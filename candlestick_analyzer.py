"""
üïØÔ∏è Pure Candlestick Analyzer (FIXED OHLC)
candlestick_analyzer.py

üîß FIXED ISSUES:
‚úÖ numpy.void object 'get' method error
‚úÖ Proper OHLC data extraction from MT5
‚úÖ Volume data handling
‚úÖ Error handling for missing data

üöÄ Features:
‚úÖ OHLC Data Collection
‚úÖ Candlestick Pattern Recognition
‚úÖ Volume Analysis (with fallback)
‚úÖ Body Ratio Calculation
‚úÖ Price Direction Detection
‚úÖ Basic Pattern Classification
"""

import MetaTrader5 as mt5
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
import time

class CandlestickAnalyzer:
    """
    üïØÔ∏è Pure Candlestick Analyzer (FIXED VERSION)
    
    ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
    ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤ patterns ‡πÅ‡∏•‡∏∞ signals ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡πÑ‡∏î‡πâ
    """
    
    def __init__(self, mt5_connector, config: Dict):
        """
        üîß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Candlestick Analyzer - ‡πÄ‡∏û‡∏¥‡πà‡∏° tracking
        """
        self.mt5_connector = mt5_connector
        self.config = config
        
        # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
        self.symbol = config.get("trading", {}).get("symbol", "XAUUSD.v")
        self.timeframe = mt5.TIMEFRAME_M5
        
        # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ analysis
        self.min_candles_required = 20
        self.volume_lookback_periods = 10
        
        # Pattern settings
        self.doji_threshold = 0.05
        self.strong_body_threshold = 0.6
        
        # Cache
        self.last_analysis_time = datetime.min
        self.last_analyzed_candle_time = datetime.min  # üîß NEW: ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÅ‡∏ó‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        self.cache_duration_seconds = 60
        self.cached_analysis = None
        
        # Volume data
        self.volume_available = False
        self.volume_history = []
                
        # NEW: ‡πÉ‡∏ä‡πâ sequence tracking ‡πÅ‡∏ó‡∏ô time tracking
        self.last_candle_signature = None  # ‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ó‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (OHLC + time)
        self.processed_signatures = set()  # ‡πÄ‡∏Å‡πá‡∏ö‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß
        self.max_signature_history = 50
        print(f"üïØÔ∏è Real-time Candlestick Analyzer initialized for {self.symbol}")
        print(f"   Will detect new candles immediately upon close")
    
    # ==========================================
    # üìä MAIN ANALYSIS METHODS
    # ==========================================
    
    def _get_latest_closed_candle(self) -> Optional[Dict]:
        """
        üìä ‡∏î‡∏∂‡∏á‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô Real-Time - rates[0] vs rates[1]
        
        üîß ‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢:
        - rates[0] = ‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ)
        - rates[1] = ‡πÅ‡∏ó‡πà‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß
        - ‡∏î‡∏π‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏ö‡∏ö Real-Time
        """
        try:
            print(f"üîç Getting REAL-TIME current candle vs previous")
            
            if not self.mt5_connector or not self.mt5_connector.is_connected:
                print("‚ùå MT5 not connected")
                return None
            
            # ‡∏î‡∏∂‡∏á‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô 2 ‡πÅ‡∏ó‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            rates = mt5.copy_rates_from_pos(self.symbol, self.timeframe, 0, 2)
            if rates is None or len(rates) < 2:
                print(f"‚ùå Cannot get 2 candles for {self.symbol}")
                return None
            
            print(f"‚úÖ Got {len(rates)} candles from MT5")
            
            # üî• FINAL FIX: ‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô vs ‡πÅ‡∏ó‡πà‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß
            current_raw = rates[0]    # ‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô)
            previous_raw = rates[1]   # ‡πÅ‡∏ó‡πà‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (rates[0])
            current_candle = {
                'time': datetime.fromtimestamp(int(current_raw['time'])),
                'open': float(current_raw['open']),
                'high': float(current_raw['high']),
                'low': float(current_raw['low']),
                'close': float(current_raw['close']),
                'volume': int(current_raw['tick_volume']) if 'tick_volume' in current_raw.dtype.names else 0
            }
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß (rates[1])
            previous_candle = {
                'time': datetime.fromtimestamp(int(previous_raw['time'])),
                'open': float(previous_raw['open']),
                'high': float(previous_raw['high']),
                'low': float(previous_raw['low']),
                'close': float(previous_raw['close']),
                'volume': int(previous_raw['tick_volume']) if 'tick_volume' in previous_raw.dtype.names else 0
            }
            
            # üî• Debug - ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á
            print(f"üî• REAL-TIME COMPARISON:")
            print(f"   üü¢ Current Candle [rates[0] - NOW]: {current_candle['time'].strftime('%H:%M')}")
            print(f"      OHLC: O:{current_candle['open']:.2f} H:{current_candle['high']:.2f} L:{current_candle['low']:.2f} C:{current_candle['close']:.2f}")
            print(f"   ‚ö™ Previous Candle [rates[1] - CLOSED]: {previous_candle['time'].strftime('%H:%M')}")
            print(f"      OHLC: O:{previous_candle['open']:.2f} H:{previous_candle['high']:.2f} L:{previous_candle['low']:.2f} C:{previous_candle['close']:.2f}")
            
            # üî• ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á Real-Time
            price_diff = current_candle['close'] - previous_candle['close']
            print(f"   üî• Real-Time Price Change: {current_candle['close']:.2f} - {previous_candle['close']:.2f} = {price_diff:+.2f}")
            
            # üî• ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á Signal Real-Time
            min_price_change = 0.10
            
            if price_diff > min_price_change:
                signal_direction = 'BUY_SIGNAL'
                print(f"   ‚Üí üü¢ BUY Signal: Current > Previous (+{price_diff:.2f})")
            elif price_diff < -min_price_change:
                signal_direction = 'SELL_SIGNAL'
                print(f"   ‚Üí üî¥ SELL Signal: Current < Previous ({price_diff:.2f})")
            else:
                signal_direction = 'NO_SIGNAL'
                print(f"   ‚Üí ‚è≥ No Signal: Change too small ({price_diff:+.2f})")
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á
            candle_range = current_candle['high'] - current_candle['low']
            body_size = abs(current_candle['close'] - current_candle['open'])
            body_ratio = body_size / candle_range if candle_range > 0 else 0
            
            price_strength = min(abs(price_diff) / 5.0, 1.0)
            candle_strength = min(body_ratio * 2, 1.0)
            overall_strength = (price_strength + candle_strength) / 2
            
            print(f"   üí™ Strength Analysis:")
            print(f"      Body Ratio: {body_ratio:.3f}")
            print(f"      Price Strength: {price_strength:.3f}")
            print(f"      Overall: {overall_strength:.3f}")
            
            return {
                'current': current_candle,
                'previous': previous_candle,
                'signal_direction': signal_direction,
                'price_difference': price_diff,
                'price_strength': price_strength,
                'candle_strength': candle_strength,
                'overall_strength': overall_strength,
                'body_ratio': body_ratio,
                'analysis_method': 'real_time_current_vs_closed'
            }
            
        except Exception as e:
            print(f"‚ùå Real-time analysis error: {e}")
            return None
                
    def get_current_analysis(self) -> Optional[Dict]:
        """
        üìä ‡∏î‡∏π‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î - rates[0] vs rates[1]
        """
        try:
            print("=== üìä ‡∏î‡∏π‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î ===")
            
            if not self.mt5_connector.is_connected:
                return None
            
            # ‡∏î‡∏∂‡∏á 3 ‡πÅ‡∏ó‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            rates = mt5.copy_rates_from_pos(self.symbol, self.timeframe, 0, 3)
            if rates is None or len(rates) < 3:
                return None
            
            # üîß ‡πÅ‡∏Å‡πâ‡πÉ‡∏´‡πâ‡∏î‡∏π‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            current_close = float(rates[0]['close'])   # ‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏¥‡∏î/‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏õ‡∏¥‡∏î)
            previous_close = float(rates[1]['close'])  # ‡πÅ‡∏ó‡πà‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
            price_diff = current_close - previous_close
            
            print(f"üìä ‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô vs ‡πÅ‡∏ó‡πà‡∏á‡∏Å‡πà‡∏≠‡∏ô:")
            print(f"   ‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô [rates[0]] ‡∏õ‡∏¥‡∏î: ${current_close:.2f}")
            print(f"   ‡πÅ‡∏ó‡πà‡∏á‡∏Å‡πà‡∏≠‡∏ô [rates[1]] ‡∏õ‡∏¥‡∏î: ${previous_close:.2f}")
            print(f"   ‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô: {price_diff:+.2f}")
            
            # ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏à‡∏≤‡∏Å‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            if price_diff > 0.10:
                signal_type = "BUY"
                print(f"   ‚Üí üü¢ BUY: ‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏õ‡∏¥‡∏î‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤")
            elif price_diff < -0.10:
                signal_type = "SELL"
                print(f"   ‚Üí üî¥ SELL: ‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏õ‡∏¥‡∏î‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤")
            else:
                print(f"   ‚Üí ‚è≥ WAIT: ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ô‡πâ‡∏≠‡∏¢")
                return None
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á signature ‡∏à‡∏≤‡∏Å‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            current_time = datetime.fromtimestamp(int(rates[0]['time']))
            candle_signature = f"{current_time.strftime('%H%M')}_{current_close:.2f}"
            
            # ‡πÄ‡∏ä‡πá‡∏Ñ 1 ‡πÅ‡∏ó‡πà‡∏á = 1 ‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå
            if self._is_signature_processed(candle_signature):
                print("üîÑ ‡πÅ‡∏ó‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏•‡πâ‡∏ß - ‡∏Ç‡πâ‡∏≤‡∏°")
                return None
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô (‡∏à‡∏≤‡∏Å‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
            current_open = float(rates[0]['open'])
            body_size = abs(current_close - current_open)
            body_ratio = 1.0 if body_size > 0 else 0.0
            
            print(f"üìä ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô:")
            print(f"   Open: ${current_open:.2f}")
            print(f"   Close: ${current_close:.2f}")
            print(f"   ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô: {body_size:.2f}")
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å signature
            self._mark_signature_processed(candle_signature)
            
            return {
                'symbol': self.symbol,
                'timestamp': datetime.now(),
                'candle_time': current_time,
                'candle_signature': candle_signature,
                
                # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å (‡∏à‡∏≤‡∏Å‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
                'close': current_close,
                'previous_close': previous_close,
                'price_change': price_diff,
                'signal_direction': signal_type.lower(),
                
                # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                'open': current_open,
                'high': float(rates[0]['high']),
                'low': float(rates[0]['low']),
                
                # ‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
                'body_ratio': body_ratio,
                'body_size': body_size,
                'candle_range': body_size,
                
                'pattern_name': f'current_{signal_type.lower()}',
                'one_candle_one_order': True,
                'is_current_candle': True,
                
                'volume_available': True,
                'current_volume': int(rates[0]['tick_volume']) if 'tick_volume' in rates[0].dtype.names else 0,
                'volume_factor': 1.0,
                
                'tracking_method': 'current_candle_rates_0_vs_1',
                'analysis_method': 'current_candle_only',
                'analysis_strength': min(abs(price_diff) / 5.0, 1.0)
            }
            
        except Exception as e:
            print(f"‚ùå Current candle error: {e}")
            return None
                                        
    def _create_candle_signature(self, candle: Dict) -> str:
        """
        üîë ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô OHLC - PURE OHLC NO TIME VERSION
        
        üîß FINAL VERSION: ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏•‡∏¢ ‡πÉ‡∏ä‡πâ‡πÅ‡∏Ñ‡πà OHLC
        - ‡πÑ‡∏°‡πà‡∏°‡∏µ timestamp
        - ‡πÑ‡∏°‡πà‡∏°‡∏µ datetime
        - ‡πÅ‡∏Ñ‡πà‡∏£‡∏≤‡∏Ñ‡∏≤ 4 ‡∏ï‡∏±‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        """
        try:
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• OHLC ‡πÅ‡∏•‡∏∞‡∏õ‡∏±‡∏î‡πÄ‡∏®‡∏© 2 ‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
            o = round(float(candle['open']), 2)
            h = round(float(candle['high']), 2)
            l = round(float(candle['low']), 2)
            c = round(float(candle['close']), 2)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏à‡∏≤‡∏Å OHLC ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏ß‡∏•‡∏≤
            signature = f"{o}_{h}_{l}_{c}"
            
            print(f"üîë PURE OHLC Signature: {signature}")
            
            return signature
            
        except Exception as e:
            print(f"‚ùå OHLC signature error: {e}")
            # Fallback signature ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤
            return f"error_{hash(str(candle))}"

    def _is_signature_processed(self, signature: str) -> bool:
        """
        üîç ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô OHLC ‡∏ô‡∏µ‡πâ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        
        Args:
            signature: ‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô OHLC
            
        Returns:
            bool: True ‡∏ñ‡πâ‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß
        """
        is_processed = signature in self.processed_signatures
        
        if is_processed:
            print(f"‚úÖ OHLC Signature already processed: {signature}")
        else:
            print(f"üÜï New OHLC Signature: {signature}")
        
        return is_processed

    def _mark_signature_processed(self, signature: str):
        """
        ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô OHLC ‡∏ß‡πà‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß - NO TIME VERSION
        """
        try:
            self.processed_signatures.add(signature)
            
            # ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà 20 ‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏•‡∏î‡∏•‡∏á‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏°‡∏µ timestamp)
            if len(self.processed_signatures) > 20:
                # ‡∏•‡∏ö‡πÅ‡∏ö‡∏ö FIFO - ‡πÄ‡∏≠‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡∏≠‡∏≠‡∏Å
                oldest_signature = next(iter(self.processed_signatures))
                self.processed_signatures.remove(oldest_signature)
                print(f"üóëÔ∏è Removed oldest OHLC: {oldest_signature}")
            
            print(f"‚úÖ OHLC Signature processed: {signature}")
            print(f"   Total processed: {len(self.processed_signatures)}")
            
        except Exception as e:
            print(f"‚ùå Mark signature error: {e}")

    def _extract_timestamp_from_signature(self, signature: str) -> float:
        """
        üîß DEPRECATED: ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ timestamp ‡πÉ‡∏ô signature ‡πÅ‡∏•‡πâ‡∏ß
        
        üö´ Method ‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô OHLC-only signature
        ‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ß‡πâ‡πÄ‡∏û‡∏∑‡πà‡∏≠ backward compatibility ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        
        Args:
            signature: ‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô OHLC
            
        Returns:
            float: timestamp ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (fallback)
        """
        print(f"‚ö†Ô∏è WARNING: _extract_timestamp_from_signature is deprecated")
        print(f"   OHLC signatures don't contain timestamps anymore")
        print(f"   Returning current timestamp as fallback")
        
        # Return current time as fallback
        return datetime.now().timestamp()
            

    def _analyze_candlestick(self, current: Dict, previous: Dict) -> Dict:
        """
        üïØÔ∏è ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô - IMPROVED WITH FIXED DATA
        """
        try:
            # üîß FIXED: ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            o, h, l, c = current['open'], current['high'], current['low'], current['close']
            prev_close = previous['close']
            prev_open = previous['open']
            prev_high = previous['high']
            prev_low = previous['low']
            
            print(f"üïØÔ∏è === CANDLESTICK ANALYSIS (FIXED) ===")
            print(f"   Current OHLC: {o:.4f}/{h:.4f}/{l:.4f}/{c:.4f}")
            print(f"   Previous OHLC: {prev_open:.4f}/{prev_high:.4f}/{prev_low:.4f}/{prev_close:.4f}")
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡πà‡∏≤‡∏á‡πÜ
            candle_range = h - l
            body_size = abs(c - o)
            
            # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô division by zero
            body_ratio = body_size / candle_range if candle_range > 0.0001 else 0
            
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
            price_threshold = 0.0001  # threshold ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥
            
            if c > o + price_threshold:
                candle_color = 'green'  # bullish
            elif c < o - price_threshold:
                candle_color = 'red'    # bearish
            else:
                candle_color = 'doji'   # ‡πÄ‡∏Å‡∏∑‡∏≠‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô
            
            # ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡πÅ‡∏ó‡πà‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
            price_change = c - prev_close
            if abs(price_change) < price_threshold:
                price_direction = 'same_close'
            elif price_change > 0:
                price_direction = 'higher_close'
            else:
                price_direction = 'lower_close'
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì wicks
            if candle_color == 'green':
                upper_wick = h - c
                lower_wick = o - l
            elif candle_color == 'red':
                upper_wick = h - o
                lower_wick = c - l
            else:  # doji
                upper_wick = h - max(o, c)
                lower_wick = min(o, c) - l
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì wick ratios
            upper_wick_ratio = upper_wick / candle_range if candle_range > 0 else 0
            lower_wick_ratio = lower_wick / candle_range if candle_range > 0 else 0
            
            # Pattern recognition
            pattern_info = self._recognize_advanced_patterns({
                'color': candle_color,
                'body_ratio': body_ratio,
                'upper_wick': upper_wick,
                'lower_wick': lower_wick,
                'upper_wick_ratio': upper_wick_ratio,
                'lower_wick_ratio': lower_wick_ratio,
                'candle_range': candle_range,
                'body_size': body_size,
                'price_change': price_change
            })
            
            analysis_result = {
                'color': candle_color,
                'body_ratio': round(body_ratio, 4),
                'price_direction': price_direction,
                'range': round(candle_range, 4),
                'body_size': round(body_size, 4),
                'upper_wick': round(upper_wick, 4),
                'lower_wick': round(lower_wick, 4),
                'upper_wick_ratio': round(upper_wick_ratio, 4),
                'lower_wick_ratio': round(lower_wick_ratio, 4),
                'price_change': round(price_change, 4),
                'price_change_pips': round(price_change * 10000, 2),
                'pattern_name': pattern_info['name'],
                'pattern_strength': pattern_info['strength'],
                'pattern_reliability': pattern_info['reliability'],
                'analysis_quality': self._calculate_candle_quality(body_ratio, candle_range, upper_wick_ratio, lower_wick_ratio),
                'signal_clarity': self._calculate_signal_clarity(candle_color, price_direction, body_ratio)
            }
            
            print(f"üìä ANALYSIS RESULTS:")
            print(f"   Color: {candle_color}")
            print(f"   Body Ratio: {body_ratio:.3f} ({body_ratio*100:.1f}%)")
            print(f"   Price Direction: {price_direction}")
            print(f"   Price Change: {price_change:+.4f} ({price_change*10000:+.1f} pips)")
            print(f"   Range: {candle_range:.4f}")
            print(f"   Pattern: {pattern_info['name']}")
            
            return analysis_result
            
        except Exception as e:
            print(f"‚ùå Candlestick analysis error: {e}")
            return self._get_fallback_analysis()
        

    def _recognize_advanced_patterns(self, candle_data: Dict) -> Dict:
        """
        üîç ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å Candlestick Patterns ‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á - IMPROVED
        
        Args:
            candle_data: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡πâ‡∏ß
            
        Returns:
            Dict: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• pattern ‡∏ó‡∏µ‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
        """
        try:
            color = candle_data.get('color', '')
            body_ratio = candle_data.get('body_ratio', 0)
            upper_wick_ratio = candle_data.get('upper_wick_ratio', 0)
            lower_wick_ratio = candle_data.get('lower_wick_ratio', 0)
            momentum = candle_data.get('momentum', 0)
            
            pattern_name = 'standard'
            pattern_strength = 0.5
            reliability = 0.5
            is_reversal = False
            is_continuation = False
            
            # üîß IMPROVED: Doji Patterns (‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏∂‡πâ‡∏ô)
            if body_ratio < 0.05:  # Doji threshold
                if upper_wick_ratio > 0.4 and lower_wick_ratio < 0.1:
                    pattern_name = 'gravestone_doji'
                    pattern_strength = 0.8
                    reliability = 0.75
                    is_reversal = True
                elif lower_wick_ratio > 0.4 and upper_wick_ratio < 0.1:
                    pattern_name = 'dragonfly_doji'
                    pattern_strength = 0.8
                    reliability = 0.75
                    is_reversal = True
                elif upper_wick_ratio > 0.3 and lower_wick_ratio > 0.3:
                    pattern_name = 'long_legged_doji'
                    pattern_strength = 0.6
                    reliability = 0.6
                    is_reversal = True
                else:
                    pattern_name = 'classic_doji'
                    pattern_strength = 0.5
                    reliability = 0.5
                    is_reversal = True
            
            # üîß IMPROVED: Hammer & Shooting Star (‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô)
            elif body_ratio >= 0.2 and body_ratio <= 0.4:  # Body ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
                if color == 'green' and lower_wick_ratio > 0.5 and upper_wick_ratio < 0.1:
                    pattern_name = 'hammer_bullish'
                    pattern_strength = 0.85
                    reliability = 0.8
                    is_reversal = True
                elif color == 'red' and upper_wick_ratio > 0.5 and lower_wick_ratio < 0.1:
                    pattern_name = 'shooting_star'
                    pattern_strength = 0.85
                    reliability = 0.8
                    is_reversal = True
                elif color == 'green' and upper_wick_ratio > 0.5 and lower_wick_ratio < 0.1:
                    pattern_name = 'inverted_hammer'
                    pattern_strength = 0.7
                    reliability = 0.65
                    is_reversal = True
                elif color == 'red' and lower_wick_ratio > 0.5 and upper_wick_ratio < 0.1:
                    pattern_name = 'hanging_man'
                    pattern_strength = 0.7
                    reliability = 0.65
                    is_reversal = True
            
            # üîß IMPROVED: Strong Trend Candles (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô)
            elif body_ratio > 0.6:  # Strong body
                if color == 'green':
                    if momentum > 0.5:
                        pattern_name = 'strong_bullish_momentum'
                        pattern_strength = 0.9
                        reliability = 0.8
                        is_continuation = True
                    else:
                        pattern_name = 'strong_bullish'
                        pattern_strength = 0.75
                        reliability = 0.7
                        is_continuation = True
                elif color == 'red':
                    if momentum < -0.5:
                        pattern_name = 'strong_bearish_momentum'
                        pattern_strength = 0.9
                        reliability = 0.8
                        is_continuation = True
                    else:
                        pattern_name = 'strong_bearish'
                        pattern_strength = 0.75
                        reliability = 0.7
                        is_continuation = True
            
            # üîß IMPROVED: Spinning Tops & Small Bodies
            elif body_ratio >= 0.05 and body_ratio <= 0.2:  # Small body
                if upper_wick_ratio > 0.3 and lower_wick_ratio > 0.3:
                    pattern_name = 'spinning_top'
                    pattern_strength = 0.4
                    reliability = 0.5
                    is_reversal = True
                else:
                    pattern_name = 'small_body'
                    pattern_strength = 0.3
                    reliability = 0.4
            
            # üîß IMPROVED: Medium Body Candles
            else:  # body_ratio 0.2-0.6
                if color == 'green':
                    if lower_wick_ratio > 0.3:
                        pattern_name = 'bullish_with_support'
                        pattern_strength = 0.65
                        reliability = 0.6
                    else:
                        pattern_name = 'medium_bullish'
                        pattern_strength = 0.6
                        reliability = 0.55
                elif color == 'red':
                    if upper_wick_ratio > 0.3:
                        pattern_name = 'bearish_with_resistance'
                        pattern_strength = 0.65
                        reliability = 0.6
                    else:
                        pattern_name = 'medium_bearish'
                        pattern_strength = 0.6
                        reliability = 0.55
                else:
                    pattern_name = 'neutral_medium'
                    pattern_strength = 0.4
                    reliability = 0.4
            
            # üîß IMPROVED: ‡∏õ‡∏£‡∏±‡∏ö strength ‡∏ï‡∏≤‡∏° momentum
            if abs(momentum) > 0.3:
                pattern_strength *= (1 + abs(momentum) * 0.2)  # ‡πÄ‡∏û‡∏¥‡πà‡∏° 20% ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö momentum ‡πÅ‡∏£‡∏á
                pattern_strength = min(pattern_strength, 0.95)  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 95%
            
            return {
                'name': pattern_name,
                'strength': round(pattern_strength, 3),
                'reliability': round(reliability, 3),
                'is_reversal': is_reversal,
                'is_continuation': is_continuation,
                'body_ratio': round(body_ratio, 4),
                'upper_wick_ratio': round(upper_wick_ratio, 4),
                'lower_wick_ratio': round(lower_wick_ratio, 4),
                'momentum_adjusted': abs(momentum) > 0.3
            }
            
        except Exception as e:
            print(f"‚ùå Advanced pattern recognition error: {e}")
            return {
                'name': 'error',
                'strength': 0.0,
                'reliability': 0.0,
                'is_reversal': False,
                'is_continuation': False,
                'body_ratio': 0,
                'upper_wick_ratio': 0,
                'lower_wick_ratio': 0,
                'momentum_adjusted': False
            }

    def _calculate_candle_quality(self, body_ratio: float, candle_range: float, 
                                upper_wick_ratio: float, lower_wick_ratio: float) -> float:
        """
        üéØ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô - IMPROVED ACCURACY
        
        Args:
            body_ratio: ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô body
            candle_range: ‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
            upper_wick_ratio: ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô upper wick
            lower_wick_ratio: ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô lower wick
            
        Returns:
            float: ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û 0-1
        """
        try:
            # üîß IMPROVED: ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å body ratio (‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô)
            if body_ratio >= 0.7:  # body ‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡∏°‡∏≤‡∏Å
                ratio_score = 1.0
            elif body_ratio >= 0.5:  # body ‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á
                ratio_score = 0.9
            elif body_ratio >= 0.3:  # body ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
                ratio_score = 0.7
            elif body_ratio >= 0.15:  # body ‡∏≠‡πà‡∏≠‡∏ô
                ratio_score = 0.5
            elif body_ratio >= 0.05:  # body ‡πÄ‡∏•‡πá‡∏Å
                ratio_score = 0.3
            else:  # doji ‡∏´‡∏£‡∏∑‡∏≠ body ‡πÄ‡∏•‡πá‡∏Å‡∏°‡∏≤‡∏Å
                ratio_score = 0.4  # doji ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏û‡∏¥‡πÄ‡∏®‡∏©
            
            # üîß IMPROVED: ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å candle range (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô)
            if candle_range >= 8.0:  # ‡πÅ‡∏ó‡πà‡∏á‡πÉ‡∏´‡∏ç‡πà‡∏°‡∏≤‡∏Å (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥)
                range_score = 1.0
            elif candle_range >= 5.0:  # ‡πÅ‡∏ó‡πà‡∏á‡πÉ‡∏´‡∏ç‡πà
                range_score = 0.9
            elif candle_range >= 3.0:  # ‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
                range_score = 0.8
            elif candle_range >= 1.5:  # ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏•‡πá‡∏Å
                range_score = 0.6
            elif candle_range >= 0.8:  # ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏°‡∏≤‡∏Å
                range_score = 0.4
            else:  # ‡πÅ‡∏ó‡πà‡∏á‡πÅ‡∏Ñ‡∏ö‡∏°‡∏≤‡∏Å
                range_score = 0.2
            
            # üîß IMPROVED: ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å wick balance
            wick_balance = abs(upper_wick_ratio - lower_wick_ratio)
            if wick_balance < 0.1:  # wicks ‡∏™‡∏°‡∏î‡∏∏‡∏•
                balance_score = 1.0
            elif wick_balance < 0.3:  # wicks ‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏™‡∏°‡∏î‡∏∏‡∏•
                balance_score = 0.8
            elif wick_balance < 0.5:  # wicks ‡πÑ‡∏°‡πà‡∏™‡∏°‡∏î‡∏∏‡∏•‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
                balance_score = 0.6
            else:  # wicks ‡πÑ‡∏°‡πà‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏°‡∏≤‡∏Å (‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô reversal pattern)
                balance_score = 0.7  # ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡πÜ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢
            
            # üîß IMPROVED: ‡∏£‡∏ß‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (‡∏õ‡∏£‡∏±‡∏ö weight ‡πÉ‡∏´‡∏°‡πà)
            final_score = (
                ratio_score * 0.5 +      # body ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
                range_score * 0.3 +      # range ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏£‡∏≠‡∏á
                balance_score * 0.2      # balance ‡πÄ‡∏™‡∏£‡∏¥‡∏°
            )
            
            return round(final_score, 3)
            
        except Exception as e:
            print(f"‚ùå Candle quality calculation error: {e}")
            return 0.5

    def _calculate_signal_clarity(self, candle_color: str, price_direction: str, body_ratio: float) -> float:
        """
        üéØ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏Ç‡∏≠‡∏á Signal - NEW
        
        Args:
            candle_color: ‡∏™‡∏µ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
            price_direction: ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
            body_ratio: ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô body
            
        Returns:
            float: Signal clarity score (0.0 ‡∏ñ‡∏∂‡∏á 1.0)
        """
        try:
            clarity_score = 0.0
            
            # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏µ‡πÅ‡∏•‡∏∞‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á
            if (candle_color == 'green' and price_direction == 'higher_close') or \
               (candle_color == 'red' and price_direction == 'lower_close'):
                clarity_score += 0.6  # ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô
            elif candle_color == 'doji':
                clarity_score += 0.3  # neutral
            else:
                clarity_score += 0.1  # ‡πÑ‡∏°‡πà‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á
            
            # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏à‡∏≤‡∏Å body size
            if body_ratio >= 0.5:
                clarity_score += 0.4  # signal ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
            elif body_ratio >= 0.2:
                clarity_score += 0.3  # signal ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
            elif body_ratio >= 0.05:
                clarity_score += 0.2  # signal ‡∏≠‡πà‡∏≠‡∏ô
            else:
                clarity_score += 0.1  # signal ‡∏Ñ‡∏•‡∏∏‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠
            
            return round(min(clarity_score, 1.0), 3)
            
        except Exception as e:
            return 0.5
        
    def _calculate_signal_clarity(self, candle_color: str, price_direction: str, body_ratio: float) -> float:
        """
        üéØ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏Ç‡∏≠‡∏á Signal - NEW
        
        Args:
            candle_color: ‡∏™‡∏µ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
            price_direction: ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
            body_ratio: ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô body
            
        Returns:
            float: Signal clarity score (0.0 ‡∏ñ‡∏∂‡∏á 1.0)
        """
        try:
            clarity_score = 0.0
            
            # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏µ‡πÅ‡∏•‡∏∞‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á
            if (candle_color == 'green' and price_direction == 'higher_close') or \
               (candle_color == 'red' and price_direction == 'lower_close'):
                clarity_score += 0.6  # ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô
            elif candle_color == 'doji':
                clarity_score += 0.3  # neutral
            else:
                clarity_score += 0.1  # ‡πÑ‡∏°‡πà‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á
            
            # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏à‡∏≤‡∏Å body size
            if body_ratio >= 0.5:
                clarity_score += 0.4  # signal ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
            elif body_ratio >= 0.2:
                clarity_score += 0.3  # signal ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
            elif body_ratio >= 0.05:
                clarity_score += 0.2  # signal ‡∏≠‡πà‡∏≠‡∏ô
            else:
                clarity_score += 0.1  # signal ‡∏Ñ‡∏•‡∏∏‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠
            
            return round(min(clarity_score, 1.0), 3)
            
        except Exception as e:
            return 0.5
        
    def _get_volume_analysis(self) -> Dict:
        """
        üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Volume (FIXED)
        
        Returns:
            Dict: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• volume analysis
        """
        try:
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• volume ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
            rates = mt5.copy_rates_from_pos(
                self.symbol, self.timeframe, 0, self.volume_lookback_periods + 1
            )
            
            if rates is None or len(rates) < self.volume_lookback_periods:
                print(f"‚ö†Ô∏è Volume data not available - using fallback")
                return {
                    'available': False,
                    'current': 0,
                    'average': 0,
                    'factor': 1.0,
                    'source': 'fallback'
                }
            
            # üîß FIXED: ‡∏î‡∏∂‡∏á volumes ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ .get() method
            volumes = []
            for rate in rates:
                try:
                    if 'tick_volume' in rate.dtype.names:
                        volumes.append(int(rate['tick_volume']))
                    else:
                        volumes.append(0)
                except:
                    volumes.append(0)
            
            current_volume = volumes[-1] if volumes else 0  # ‡πÅ‡∏ó‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            historical_volumes = volumes[:-1] if len(volumes) > 1 else [current_volume]  # ‡πÅ‡∏ó‡πà‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì average volume
            if historical_volumes and len(historical_volumes) > 0:
                avg_volume = sum(historical_volumes) / len(historical_volumes)
                volume_factor = current_volume / avg_volume if avg_volume > 0 else 1.0
            else:
                avg_volume = current_volume
                volume_factor = 1.0
            
            self.volume_available = True
            
            print(f"üìä Volume analysis: Current {current_volume}, Avg {avg_volume:.0f}, Factor {volume_factor:.2f}")
            
            return {
                'available': True,
                'current': current_volume,
                'average': avg_volume,
                'factor': volume_factor,
                'source': 'mt5'
            }
            
        except Exception as e:
            print(f"‚ùå Volume analysis error: {e}")
            return {
                'available': False,
                'current': 0,
                'average': 0,
                'factor': 1.0,
                'source': 'error'
            }
    
    # ==========================================
    # üîç PATTERN RECOGNITION
    # ==========================================
    
    def _recognize_basic_patterns(self, candle_data: Dict) -> Dict:
        """
        üîç ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å Pattern ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        
        Args:
            candle_data: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
            
        Returns:
            Dict: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• pattern
        """
        try:
            color = candle_data.get('color', '')
            body_ratio = candle_data.get('body_ratio', 0)
            upper_wick = candle_data.get('upper_wick', 0)
            lower_wick = candle_data.get('lower_wick', 0)
            candle_range = candle_data.get('candle_range', 0)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô wicks
            upper_wick_ratio = upper_wick / candle_range if candle_range > 0 else 0
            lower_wick_ratio = lower_wick / candle_range if candle_range > 0 else 0
            
            # ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å pattern
            if body_ratio < self.doji_threshold:
                # Doji patterns
                if upper_wick_ratio > 0.4:
                    pattern_name = 'dragonfly_doji' if lower_wick_ratio < 0.1 else 'long_legged_doji'
                elif lower_wick_ratio > 0.4:
                    pattern_name = 'gravestone_doji'
                else:
                    pattern_name = 'classic_doji'
                pattern_strength = 0.6
                
            elif body_ratio > self.strong_body_threshold:
                # Strong trend candles
                if color == 'green':
                    if lower_wick_ratio > 0.3:
                        pattern_name = 'hammer_bullish'
                        pattern_strength = 0.8
                    else:
                        pattern_name = 'strong_bullish'
                        pattern_strength = 0.7
                elif color == 'red':
                    if upper_wick_ratio > 0.3:
                        pattern_name = 'shooting_star'
                        pattern_strength = 0.8
                    else:
                        pattern_name = 'strong_bearish'
                        pattern_strength = 0.7
                else:
                    pattern_name = 'neutral'
                    pattern_strength = 0.5
                    
            else:
                # Standard candles
                if color == 'green':
                    pattern_name = 'green_candle'
                    pattern_strength = 0.5
                elif color == 'red':
                    pattern_name = 'red_candle'
                    pattern_strength = 0.5
                else:
                    pattern_name = 'neutral_candle'
                    pattern_strength = 0.3
            
            return {
                'name': pattern_name,
                'strength': pattern_strength,
                'body_ratio': body_ratio,
                'upper_wick_ratio': upper_wick_ratio,
                'lower_wick_ratio': lower_wick_ratio
            }
            
        except Exception as e:
            print(f"‚ùå Pattern recognition error: {e}")
            return {
                'name': 'unknown',
                'strength': 0.5,
                'body_ratio': 0,
                'upper_wick_ratio': 0,
                'lower_wick_ratio': 0
            }
        
    def _calculate_analysis_strength(self, candlestick_data: Dict, volume_data: Dict) -> float:
        """
        üí™ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        
        Args:
            candlestick_data: ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
            volume_data: ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå volume
            
        Returns:
            float: ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á 0-1
        """
        try:
            # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å pattern
            pattern_strength = candlestick_data.get('strength', 0.5)
            
            # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å volume
            if volume_data['available']:
                volume_factor = volume_data['factor']
                if volume_factor >= 1.5:  # volume ‡∏™‡∏π‡∏á
                    volume_score = 1.0
                elif volume_factor >= 1.2:  # volume ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
                    volume_score = 0.8
                else:  # volume ‡∏õ‡∏Å‡∏ï‡∏¥‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡πà‡∏≥
                    volume_score = 0.6
            else:
                volume_score = 0.7  # ‡πÑ‡∏°‡πà‡∏°‡∏µ volume = ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡πÜ
            
            # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å body ratio
            body_ratio = candlestick_data.get('body_ratio', 0)
            if body_ratio >= 0.4:
                body_score = 1.0
            elif body_ratio >= 0.2:
                body_score = 0.8
            else:
                body_score = 0.5
            
            # ‡∏£‡∏ß‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
            final_strength = (
                pattern_strength * 0.4 +
                volume_score * 0.3 +
                body_score * 0.3
            )
            
            return round(final_strength, 3)
            
        except Exception as e:
            print(f"‚ùå Analysis strength calculation error: {e}")
            return 0.5
    
    def _get_market_context(self, current_candle: Dict) -> str:
        """
        üåç ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Market Context
        
        Args:
            current_candle: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            
        Returns:
            str: ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó market context
        """
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö trading session
            current_time = datetime.now()
            hour = current_time.hour
            
            if 1 <= hour < 9:    # Asian session
                session = 'asian'
            elif 9 <= hour < 17:  # London session
                session = 'london'
            elif 17 <= hour < 24: # New York session
                session = 'newyork'
            else:                 # Overlap
                session = 'overlap'
            
            # ‡∏î‡∏π‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô
            candle_range = current_candle['high'] - current_candle['low']
            if candle_range >= 5.0:
                volatility = 'high'
            elif candle_range >= 2.0:
                volatility = 'medium'
            else:
                volatility = 'low'
            
            return f"{session}_{volatility}"
            
        except Exception as e:
            print(f"‚ùå Market context error: {e}")
            return "unknown_medium"
    
    # ==========================================
    # üîß UTILITY & HELPER METHODS
    # ==========================================
    
    def _is_cache_valid(self) -> bool:
        """üîß ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Cache - ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö real-time"""
        try:
            if self.cached_analysis is None:
                return False
            
            # üîß NEW: Cache valid ‡∏ô‡∏≤‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ó‡πà‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß
            time_diff = (datetime.now() - self.last_analysis_time).total_seconds()
            return time_diff < self.cache_duration_seconds
            
        except Exception as e:
            return False
            
    def _get_fallback_analysis(self) -> Dict:
        """‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• fallback ‡πÄ‡∏°‡∏∑‡πà‡∏≠ analysis ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß"""
        return {
            'color': 'neutral',
            'body_ratio': 0.1,
            'price_direction': 'same_close',
            'range': 1.0,
            'body_size': 0.1,
            'upper_wick': 0.45,
            'lower_wick': 0.45,
            'pattern_name': 'error',
            'pattern_strength': 0.0,
            'analysis_quality': 0.0
        }
    
    def refresh_cache(self):
        """üîÑ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö refresh cache"""
        try:
            self.cached_analysis = None
            self.last_analysis_time = datetime.min
            print(f"üîÑ Analysis cache refreshed")
        except Exception as e:
            print(f"‚ùå Cache refresh error: {e}")
    
    def is_ready(self) -> bool:
        """‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°"""
        return (
            self.mt5_connector is not None and
            self.mt5_connector.is_connected and
            self.symbol is not None
        )
    
    def get_analyzer_info(self) -> Dict:
        """‚ÑπÔ∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Candlestick Analyzer"""
        return {
            'name': 'Pure Candlestick Analyzer',
            'version': '1.0.0',
            'symbol': self.symbol,
            'timeframe': 'M5',
            'volume_available': self.volume_available,
            'min_candles_required': self.min_candles_required,
            'volume_lookback_periods': self.volume_lookback_periods,
            'doji_threshold': self.doji_threshold,
            'strong_body_threshold': self.strong_body_threshold,
            'cache_duration_seconds': self.cache_duration_seconds
        }

# ==========================================
# üß™ TESTING & VALIDATION
# ==========================================

def test_candlestick_analyzer(mt5_connector, config):
    """üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Candlestick Analyzer"""
    print("üß™ Testing Candlestick Analyzer...")
    print("=" * 50)
    
    analyzer = CandlestickAnalyzer(mt5_connector, config)
    
    if not analyzer.is_ready():
        print("‚ùå Analyzer not ready")
        return
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
    analysis = analyzer.get_current_analysis()
    
    if analysis:
        print("‚úÖ Analysis successful!")
        print(f"   Symbol: {analysis.get('symbol')}")
        print(f"   Close: ${analysis.get('close', 0):.2f}")
        print(f"   Color: {analysis.get('candle_color')}")
        print(f"   Body ratio: {analysis.get('body_ratio', 0):.3f}")
        print(f"   Price direction: {analysis.get('price_direction')}")
        print(f"   Pattern: {analysis.get('pattern_name')}")
        print(f"   Volume available: {analysis.get('volume_available')}")
        print(f"   Analysis strength: {analysis.get('analysis_strength', 0):.2f}")
    else:
        print("‚ùå Analysis failed")
    
    print("=" * 50)
    print("‚úÖ Candlestick Analyzer test completed")