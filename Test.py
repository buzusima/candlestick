"""
üîç Test Rates Debug - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• rates[0][1][2] ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
test_rates_debug.py

üéØ ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå:
‚úÖ ‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• rates[0], rates[1], rates[2] ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
‚úÖ ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü‡∏ó‡∏µ‡πà‡πÄ‡∏´‡πá‡∏ô
‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ Low[1] ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
‚úÖ ‡∏´‡∏≤‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡∏ó‡∏µ‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏£‡∏≤‡∏ü
"""

import MetaTrader5 as mt5
from datetime import datetime
import sys
import os

class RatesDebugger:
    """üîç ‡∏ï‡∏±‡∏ß‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• rates ‡∏à‡∏≤‡∏Å MT5"""
    
    def __init__(self):
        self.symbol = "XAUUSD.v"  # ‡∏õ‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏° symbol ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ
        self.timeframe = mt5.TIMEFRAME_M5
        
    def connect_mt5(self) -> bool:
        """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5"""
        try:
            print("üîó ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5...")
            
            if not mt5.initialize():
                print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5 ‡πÑ‡∏î‡πâ")
                return False
            
            account_info = mt5.account_info()
            if account_info is None:
                print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• account")
                return False
            
            print(f"‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5 ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")
            print(f"   Account: {account_info.login}")
            print(f"   Company: {account_info.company}")
            print(f"   Balance: ${account_info.balance:,.2f}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5 ‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
            return False
    
    def debug_all_rates(self):
        """üîç ‡∏î‡∏µ‡∏ö‡∏±‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• rates ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
        try:
            print(f"\n=== üîç DEBUG ALL RATES FOR {self.symbol} ===")
            print("=" * 60)
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• rates
            rates = mt5.copy_rates_from_pos(self.symbol, self.timeframe, 0, 5)
            
            if rates is None:
                print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á rates ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {self.symbol}")
                print("üí° ‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Ñ:")
                print("   - Symbol ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏´‡∏°?")
                print("   - MT5 ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏£‡∏≤‡∏ü symbol ‡∏ô‡∏µ‡πâ‡πÑ‡∏´‡∏°?")
                return
            
            print(f"‚úÖ ‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {len(rates)} ‡πÅ‡∏ó‡πà‡∏á‡∏à‡∏≤‡∏Å MT5")
            print()
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ó‡πà‡∏á
            for i, rate in enumerate(rates):
                timestamp = int(rate['time'])
                candle_time = datetime.fromtimestamp(timestamp)
                
                # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• OHLC
                open_price = float(rate['open'])
                high_price = float(rate['high'])
                low_price = float(rate['low'])
                close_price = float(rate['close'])
                volume = int(rate['tick_volume']) if 'tick_volume' in rate.dtype.names else 0
                
                # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡πÅ‡∏ó‡πà‡∏á
                if close_price > open_price:
                    color = "üü¢ GREEN (Bull)"
                elif close_price < open_price:
                    color = "üî¥ RED (Bear)"
                else:
                    color = "‚ö™ DOJI"
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
                body_size = abs(close_price - open_price)
                candle_range = high_price - low_price
                body_ratio = body_size / candle_range if candle_range > 0 else 0
                
                upper_wick = high_price - max(open_price, close_price)
                lower_wick = min(open_price, close_price) - low_price
                
                print(f"üìä RATES[{i}] - {candle_time.strftime('%H:%M:%S')} {color}")
                print(f"   üìç Time: {candle_time.strftime('%Y-%m-%d %H:%M:%S')}")
                print(f"   üí∞ OHLC: O:{open_price:.4f} H:{high_price:.4f} L:{low_price:.4f} C:{close_price:.4f}")
                print(f"   üìä Body: {body_size:.4f} ({body_ratio:.2%}) | Range: {candle_range:.4f}")
                print(f"   üïØÔ∏è Wicks: Upper:{upper_wick:.4f} Lower:{lower_wick:.4f}")
                print(f"   üìà Volume: {volume:,}")
                print()
            
            print("=" * 60)
            
            # ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏ï‡∏≤‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÉ‡∏´‡∏°‡πà
            print(f"üéØ CONDITION ANALYSIS:")
            
            if len(rates) >= 2:
                close_0 = float(rates[0]['close'])
                high_1 = float(rates[1]['high'])
                low_1 = float(rates[1]['low'])
                
                print(f"   Close[0]: {close_0:.4f} (‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)")
                print(f"   High[1]:  {high_1:.4f} (‡∏à‡∏∏‡∏î‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡πÅ‡∏ó‡πà‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)")
                print(f"   Low[1]:   {low_1:.4f} (‡∏à‡∏∏‡∏î‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡πÅ‡∏ó‡πà‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)")
                print()
                
                # ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç
                if close_0 > high_1:
                    breakout = close_0 - high_1
                    print(f"üü¢ BUY CONDITION MET!")
                    print(f"   Close[0] {close_0:.4f} > High[1] {high_1:.4f}")
                    print(f"   Breakout: +{breakout:.4f}")
                    
                elif close_0 < low_1:
                    breakdown = low_1 - close_0
                    print(f"üî¥ SELL CONDITION MET!")
                    print(f"   Close[0] {close_0:.4f} < Low[1] {low_1:.4f}")
                    print(f"   Breakdown: -{breakdown:.4f}")
                    
                else:
                    print(f"‚è≥ NO SIGNAL - ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á:")
                    print(f"   Low[1] {low_1:.4f} <= Close[0] {close_0:.4f} <= High[1] {high_1:.4f}")
                    margin_to_high = high_1 - close_0
                    margin_to_low = close_0 - low_1
                    print(f"   ‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å High[1]: {margin_to_high:.4f}")
                    print(f"   ‡∏´‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å Low[1]: {margin_to_low:.4f}")
            
            print("=" * 60)
            
        except Exception as e:
            print(f"‚ùå Debug rates error: {e}")
            import traceback
            traceback.print_exc()
    
    def compare_with_current_price(self):
        """üîç ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        try:
            print(f"\n=== üîç CURRENT PRICE COMPARISON ===")
            
            # ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            tick = mt5.symbol_info_tick(self.symbol)
            if tick is None:
                print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {self.symbol}")
                return
            
            print(f"üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (Tick):")
            print(f"   Bid: {tick.bid:.4f}")
            print(f"   Ask: {tick.ask:.4f}")
            print(f"   Time: {datetime.fromtimestamp(tick.time).strftime('%H:%M:%S')}")
            
            # ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö rates[0]
            rates = mt5.copy_rates_from_pos(self.symbol, self.timeframe, 0, 1)
            if rates is not None and len(rates) > 0:
                rate_close = float(rates[0]['close'])
                print(f"   Rate[0] Close: {rate_close:.4f}")
                print(f"   ‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å Bid: {abs(tick.bid - rate_close):.4f}")
                print(f"   ‡∏ï‡πà‡∏≤‡∏á‡∏à‡∏≤‡∏Å Ask: {abs(tick.ask - rate_close):.4f}")
            
        except Exception as e:
            print(f"‚ùå Current price comparison error: {e}")
    
    def test_symbol_info(self):
        """üîç ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Symbol"""
        try:
            print(f"\n=== üîç SYMBOL INFO TEST ===")
            
            symbol_info = mt5.symbol_info(self.symbol)
            if symbol_info is None:
                print(f"‚ùå Symbol {self.symbol} ‡πÑ‡∏°‡πà‡∏û‡∏ö")
                
                # ‡∏•‡∏≠‡∏á‡∏´‡∏≤ symbol ‡∏ó‡∏µ‡πà‡∏Ñ‡∏•‡πâ‡∏≤‡∏¢
                print("üîç ‡∏´‡∏≤ symbols ‡∏ó‡∏µ‡πà‡∏°‡∏µ 'XAU' ‡∏´‡∏£‡∏∑‡∏≠ 'GOLD':")
                all_symbols = mt5.symbols_get()
                if all_symbols:
                    gold_symbols = [s.name for s in all_symbols if 'XAU' in s.name or 'GOLD' in s.name]
                    for sym in gold_symbols[:10]:  # ‡πÅ‡∏™‡∏î‡∏á 10 ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å
                        print(f"   - {sym}")
                return
            
            print(f"‚úÖ Symbol {self.symbol} ‡∏û‡∏ö:")
            print(f"   Name: {symbol_info.name}")
            print(f"   Visible: {symbol_info.visible}")
            print(f"   Digits: {symbol_info.digits}")
            print(f"   Point: {symbol_info.point}")
            print(f"   Min volume: {symbol_info.volume_min}")
            print(f"   Max volume: {symbol_info.volume_max}")
            
            if not symbol_info.visible:
                print("‚ö†Ô∏è Symbol ‡πÑ‡∏°‡πà visible - ‡∏•‡∏≠‡∏á select...")
                if mt5.symbol_select(self.symbol, True):
                    print("‚úÖ Symbol selected successfully")
                else:
                    print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ select symbol ‡πÑ‡∏î‡πâ")
            
        except Exception as e:
            print(f"‚ùå Symbol info test error: {e}")
    
    def disconnect_mt5(self):
        """‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5"""
        try:
            mt5.shutdown()
            print("‚úÖ ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5 ‡πÅ‡∏•‡πâ‡∏ß")
        except:
            pass

def main():
    """üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
    
    print("üîç RATES DATA DEBUGGER")
    print("=" * 60)
    print(f"‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print()
    
    debugger = RatesDebugger()
    
    # ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5
    if not debugger.connect_mt5():
        print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5 ‡πÑ‡∏î‡πâ")
        return
    
    try:
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• symbol
        debugger.test_symbol_info()
        
        # ‡∏î‡∏µ‡∏ö‡∏±‡∏Å rates data
        debugger.debug_all_rates()
        
        # ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        debugger.compare_with_current_price()
        
        print("\n‚úÖ ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô")
        
    except KeyboardInterrupt:
        print("\nüõë ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏î‡∏¢‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ")
        
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
        import traceback
        traceback.print_exc()
        
    finally:
        debugger.disconnect_mt5()

if __name__ == "__main__":
    main()