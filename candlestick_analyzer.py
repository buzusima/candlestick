"""
üïØÔ∏è Pure Candlestick Analyzer (FIXED OHLC)
candlestick_analyzer.py

üîß FIXED ISSUES:
‚úÖ numpy.void object 'get' method error
‚úÖ Proper OHLC data extraction from MT5
‚úÖ Volume data handling
‚úÖ Error handling for missing data

üöÄ Features:
‚úÖ OHLC Data Collection
‚úÖ Candlestick Pattern Recognition
‚úÖ Volume Analysis (with fallback)
‚úÖ Body Ratio Calculation
‚úÖ Price Direction Detection
‚úÖ Basic Pattern Classification
"""

import MetaTrader5 as mt5
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
import time

class CandlestickAnalyzer:
    """
    üïØÔ∏è Pure Candlestick Analyzer (FIXED VERSION)
    
    ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
    ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤ patterns ‡πÅ‡∏•‡∏∞ signals ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡πÑ‡∏î‡πâ
    """
    
    def __init__(self, mt5_connector, config: Dict):
        """
        üîß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Candlestick Analyzer - ‡πÄ‡∏û‡∏¥‡πà‡∏° tracking
        """
        self.mt5_connector = mt5_connector
        self.config = config
        
        # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
        self.symbol = config.get("trading", {}).get("symbol", "XAUUSD.v")
        self.timeframe = mt5.TIMEFRAME_M5
        
        # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ analysis
        self.min_candles_required = 20
        self.volume_lookback_periods = 10
        
        # Pattern settings
        self.doji_threshold = 0.05
        self.strong_body_threshold = 0.6
        
        # Cache
        self.last_analysis_time = datetime.min
        self.last_analyzed_candle_time = datetime.min  # üîß NEW: ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÅ‡∏ó‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        self.cache_duration_seconds = 60
        self.cached_analysis = None
        
        # Volume data
        self.volume_available = False
        self.volume_history = []
        
        print(f"üïØÔ∏è Real-time Candlestick Analyzer initialized for {self.symbol}")
        print(f"   Will detect new candles immediately upon close")
    
    # ==========================================
    # üìä MAIN ANALYSIS METHODS
    # ==========================================
    
    def get_current_analysis(self) -> Optional[Dict]:
        """
        üìä ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ó‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡∏°‡πà - FORCE DETECTION MODE
        
        Returns:
            Dict: ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå ‡∏´‡∏£‡∏∑‡∏≠ None ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏ó‡πà‡∏á‡πÉ‡∏´‡∏°‡πà
        """
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
            if not self.mt5_connector.is_connected:
                print(f"‚ùå MT5 not connected - cannot analyze")
                return None
            
            print(f"üîç === CANDLESTICK ANALYSIS CYCLE ===")
            
            # üîß IMPROVED: ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏ó‡πà‡∏á‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏ö‡∏ö aggressive
            new_closed_candle = self._detect_new_closed_candle()
            
            if not new_closed_candle:
                print(f"‚è≥ No new candle detected - using cache if available")
                # ‡∏™‡πà‡∏á‡∏Ñ‡∏∑‡∏ô cache ‡∏´‡∏£‡∏∑‡∏≠ None
                if self._is_cache_valid() and self.cached_analysis:
                    cached = self.cached_analysis.copy()
                    cached['is_cached'] = True
                    cached['has_new_candle'] = False
                    print(f"üìã Returning cached analysis")
                    return cached
                else:
                    print(f"‚ùå No cached data available")
                    return None
            
            # ‡∏°‡∏µ‡πÅ‡∏ó‡πà‡∏á‡πÉ‡∏´‡∏°‡πà! - ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
            print(f"üïØÔ∏è === NEW CANDLE ANALYSIS START ===")
            
            current_candle = new_closed_candle['current']
            previous_candle = new_closed_candle['previous']
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• volume
            volume_data = self._get_volume_analysis()
            
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
            candlestick_analysis = self._analyze_candlestick(current_candle, previous_candle)
            
            # ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            complete_analysis = {
                # OHLC data
                'symbol': self.symbol,
                'timestamp': datetime.now(),
                'candle_time': current_candle['time'],
                'open': current_candle['open'],
                'high': current_candle['high'],
                'low': current_candle['low'],
                'close': current_candle['close'],
                'previous_close': previous_candle['close'],
                
                # üîß NEW: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
                'has_new_candle': True,
                'is_fresh_analysis': True,
                'candle_close_time': current_candle['time'],
                'detection_method': 'real_time',
                
                # Candlestick analysis
                'candle_color': candlestick_analysis['color'],
                'body_ratio': candlestick_analysis['body_ratio'],
                'price_direction': candlestick_analysis['price_direction'],
                'candle_range': candlestick_analysis['range'],
                'body_size': candlestick_analysis['body_size'],
                'upper_wick': candlestick_analysis['upper_wick'],
                'lower_wick': candlestick_analysis['lower_wick'],
                
                # Pattern recognition
                'pattern_name': candlestick_analysis['pattern_name'],
                'pattern_strength': candlestick_analysis['pattern_strength'],
                
                # Volume analysis
                'volume_available': volume_data['available'],
                'current_volume': volume_data['current'],
                'avg_volume': volume_data['average'],
                'volume_factor': volume_data['factor'],
                
                # Market context
                'market_context': self._get_market_context(current_candle),
                'analysis_strength': self._calculate_analysis_strength(candlestick_analysis, volume_data),
                
                # Metadata
                'timeframe': 'M5',
                'analysis_time': datetime.now(),
                'is_cached': False
            }
            
            # üîß IMPROVED: ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó tracking
            self.cached_analysis = complete_analysis.copy()
            self.last_analysis_time = datetime.now()
            self.last_analyzed_candle_time = current_candle['time']
            self.cache_duration_seconds = 240  # 4 minutes cache
            
            print(f"‚úÖ === FRESH ANALYSIS COMPLETED ===")
            print(f"   Signal ready for: {candlestick_analysis['color']} candle")
            print(f"   Price direction: {candlestick_analysis['price_direction']}")
            print(f"   Body ratio: {candlestick_analysis['body_ratio']:.3f}")
            print(f"   Pattern: {candlestick_analysis['pattern_name']}")
            print(f"   Cached until: {(datetime.now() + timedelta(seconds=240)).strftime('%H:%M:%S')}")
            
            return complete_analysis
            
        except Exception as e:
            print(f"‚ùå Current analysis error: {e}")
            return None
            
    def _detect_new_closed_candle(self) -> Optional[Dict]:
        """
        üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÅ‡∏ó‡πà‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏õ‡∏¥‡∏î - IMPROVED DETECTION
        
        Returns:
            Dict: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÉ‡∏´‡∏°‡πà ‡∏´‡∏£‡∏∑‡∏≠ None ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏ó‡πà‡∏á‡πÉ‡∏´‡∏°‡πà
        """
        try:
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 3 ‡πÅ‡∏ó‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥)
            rates = mt5.copy_rates_from_pos(self.symbol, self.timeframe, 1, 3)
            
            if rates is None or len(rates) < 2:
                print(f"‚ùå Cannot get rate data for new candle detection")
                return None
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            current_raw = rates[0]  # ‡πÅ‡∏ó‡πà‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            current_time = datetime.fromtimestamp(int(current_raw['time']))
            
            print(f"üîç Checking candle at {current_time.strftime('%H:%M:%S')}")
            
            # üîß IMPROVED: ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏ó‡πà‡∏á‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
            is_new_candle = False
            
            if hasattr(self, 'last_analyzed_candle_time'):
                time_diff = (current_time - self.last_analyzed_candle_time).total_seconds()
                print(f"   Time diff from last analysis: {time_diff:.0f} seconds")
                
                # ‡πÅ‡∏ó‡πà‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏î‡∏¥‡∏°‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 4 ‡∏ô‡∏≤‡∏ó‡∏µ
                if time_diff >= 240:  # 4 minutes
                    is_new_candle = True
                    print(f"   ‚úÖ NEW CANDLE: Time difference sufficient")
                else:
                    print(f"   ‚è≥ Same candle: Time difference too small ({time_diff:.0f}s)")
                    return None
            else:
                # ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå - ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÅ‡∏ó‡πà‡∏á‡πÉ‡∏´‡∏°‡πà
                is_new_candle = True
                print(f"   ‚úÖ FIRST ANALYSIS: Treating as new candle")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏ó‡πà‡∏á (‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô 15 ‡∏ô‡∏≤‡∏ó‡∏µ)
            candle_age_minutes = (datetime.now() - current_time).total_seconds() / 60
            if candle_age_minutes > 15:
                print(f"   ‚ùå Candle too old: {candle_age_minutes:.1f} minutes")
                return None
            
            # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á
            current_candle = {
                'time': current_time,
                'open': float(current_raw['open']),
                'high': float(current_raw['high']),
                'low': float(current_raw['low']),
                'close': float(current_raw['close']),
                'volume': int(current_raw['tick_volume']) if 'tick_volume' in current_raw.dtype.names else 0
            }
            
            previous_raw = rates[1]
            previous_candle = {
                'time': datetime.fromtimestamp(int(previous_raw['time'])),
                'open': float(previous_raw['open']),
                'high': float(previous_raw['high']),
                'low': float(previous_raw['low']),
                'close': float(previous_raw['close']),
                'volume': int(previous_raw['tick_volume']) if 'tick_volume' in previous_raw.dtype.names else 0
            }
            
            # üîß IMPROVED: ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
            price_change = current_candle['close'] - previous_candle['close']
            candle_color = 'green' if current_candle['close'] > current_candle['open'] else 'red'
            price_direction = 'higher' if price_change > 0 else 'lower'
            
            print(f"üÜï NEW CANDLE CONFIRMED:")
            print(f"   Time: {current_time.strftime('%H:%M:%S')} (Age: {candle_age_minutes:.1f}m)")
            print(f"   OHLC: {current_candle['open']:.2f}/{current_candle['high']:.2f}/{current_candle['low']:.2f}/{current_candle['close']:.2f}")
            print(f"   Color: {candle_color}")
            print(f"   Direction: {price_direction} ({price_change:+.2f})")
            print(f"   Range: {current_candle['high'] - current_candle['low']:.2f}")
            
            return {
                'current': current_candle,
                'previous': previous_candle,
                'is_new_candle': True,
                'detection_time': datetime.now(),
                'candle_age_minutes': candle_age_minutes,
                'price_change': price_change,
                'candle_color': candle_color
            }
            
        except Exception as e:
            print(f"‚ùå New candle detection error: {e}")
            return None
    
    def _get_ohlc_data(self) -> Optional[Dict]:
        """
        üìä ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• OHLC ‡πÅ‡∏ó‡πà‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô - FIXED TIME CALCULATION
        
        Returns:
            Dict: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• current (‡πÅ‡∏ó‡πà‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î) ‡πÅ‡∏•‡∏∞ previous candle
        """
        try:
            # üîß FIXED: ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 3 ‡πÅ‡∏ó‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î ‡πÅ‡∏ï‡πà‡∏Ç‡πâ‡∏≤‡∏° index 0 (‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î)
            rates = mt5.copy_rates_from_pos(self.symbol, self.timeframe, 1, 2)  # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å index 1, ‡πÄ‡∏≠‡∏≤ 2 ‡πÅ‡∏ó‡πà‡∏á
            
            if rates is None or len(rates) < 2:
                print(f"‚ùå Cannot get sufficient closed candle data for {self.symbol}")
                return None
            
            # ‡πÅ‡∏õ‡∏•‡∏á numpy array ‡πÄ‡∏õ‡πá‡∏ô dict - ‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡πà‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
            current_raw = rates[0]  # ‡πÅ‡∏ó‡πà‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            current_candle = {
                'time': datetime.fromtimestamp(int(current_raw['time'])),
                'open': float(current_raw['open']),
                'high': float(current_raw['high']),
                'low': float(current_raw['low']),
                'close': float(current_raw['close']),
                'volume': int(current_raw['tick_volume']) if 'tick_volume' in current_raw.dtype.names else 0
            }
            
            previous_raw = rates[1]  # ‡πÅ‡∏ó‡πà‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
            previous_candle = {
                'time': datetime.fromtimestamp(int(previous_raw['time'])),
                'open': float(previous_raw['open']),
                'high': float(previous_raw['high']),
                'low': float(previous_raw['low']),
                'close': float(previous_raw['close']),
                'volume': int(previous_raw['tick_volume']) if 'tick_volume' in previous_raw.dtype.names else 0
            }
            
            # üîß FIXED: ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏¥‡∏î - ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
            now = datetime.now()
            
            # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÅ‡∏ó‡πà‡∏á‡∏ô‡∏µ‡πâ‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ 10 ‡∏ô‡∏≤‡∏ó‡∏µ = ‡πÑ‡∏°‡πà current)
            candle_age_minutes = (now - current_candle['time']).total_seconds() / 60
            
            # üîß FIXED: ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏¥‡∏î ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÄ‡∏£‡∏≤‡∏î‡∏∂‡∏á‡πÅ‡∏ó‡πà‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏°‡∏≤
            # ‡πÅ‡∏Ñ‡πà‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
            if candle_age_minutes > 15:  # ‡∏ñ‡πâ‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏Å‡∏ß‡πà‡∏≤ 15 ‡∏ô‡∏≤‡∏ó‡∏µ
                print(f"‚ö†Ô∏è Candle data too old: {candle_age_minutes:.1f} minutes")
                return None
            
            print(f"üìä Using CLOSED candles (Age: {candle_age_minutes:.1f}m):")
            print(f"   Current: ${current_candle['close']:.2f} at {current_candle['time'].strftime('%H:%M:%S')}")
            print(f"   Previous: ${previous_candle['close']:.2f} at {previous_candle['time'].strftime('%H:%M:%S')}")
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
            price_change = current_candle['close'] - previous_candle['close']
            price_change_pips = price_change * 100  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥
            
            print(f"   Price change: {price_change:+.2f} ({price_change_pips:+.1f} pips)")
            
            return {
                'current': current_candle,
                'previous': previous_candle,
                'timestamp': datetime.now(),
                'is_closed_candle': True,
                'candle_age_minutes': candle_age_minutes
            }
            
        except Exception as e:
            print(f"‚ùå OHLC closed data error: {e}")
            return None
            
    def _analyze_candlestick(self, current: Dict, previous: Dict) -> Dict:
        """
        üïØÔ∏è ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô - IMPROVED ACCURACY
        
        Args:
            current: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            previous: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
            
        Returns:
            Dict: ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
        """
        try:
            o, h, l, c = current['open'], current['high'], current['low'], current['close']
            prev_close = previous['close']
            prev_open = previous['open']
            prev_high = previous['high']
            prev_low = previous['low']
            
            # üîß IMPROVED: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÅ‡∏ö‡∏ö‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
            candle_range = h - l
            body_size = abs(c - o)
            
            # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô division by zero
            body_ratio = body_size / candle_range if candle_range > 0.001 else 0
            
            # üîß IMPROVED: ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
            price_threshold = 0.001  # 0.1 pips ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥
            
            if c > o + price_threshold:
                candle_color = 'green'  # bullish
            elif c < o - price_threshold:
                candle_color = 'red'    # bearish
            else:
                candle_color = 'doji'   # ‡πÄ‡∏Å‡∏∑‡∏≠‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô
            
            # üîß IMPROVED: ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏ö‡∏ö‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥
            price_change = c - prev_close
            if abs(price_change) < price_threshold:
                price_direction = 'same_close'
            elif price_change > 0:
                price_direction = 'higher_close'
            else:
                price_direction = 'lower_close'
            
            # üîß IMPROVED: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì wicks ‡πÅ‡∏ö‡∏ö‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            if candle_color == 'green':
                upper_wick = h - c
                lower_wick = o - l
                body_top = c
                body_bottom = o
            elif candle_color == 'red':
                upper_wick = h - o
                lower_wick = c - l
                body_top = o
                body_bottom = c
            else:  # doji
                body_mid = (o + c) / 2
                upper_wick = h - max(o, c)
                lower_wick = min(o, c) - l
                body_top = max(o, c)
                body_bottom = min(o, c)
            
            # üîß IMPROVED: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì wick ratios
            upper_wick_ratio = upper_wick / candle_range if candle_range > 0 else 0
            lower_wick_ratio = lower_wick / candle_range if candle_range > 0 else 0
            
            # üîß IMPROVED: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå momentum
            momentum_score = self._calculate_momentum(current, previous)
            
            # üîß IMPROVED: Pattern recognition ‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô
            pattern_info = self._recognize_advanced_patterns({
                'color': candle_color,
                'body_ratio': body_ratio,
                'upper_wick': upper_wick,
                'lower_wick': lower_wick,
                'upper_wick_ratio': upper_wick_ratio,
                'lower_wick_ratio': lower_wick_ratio,
                'candle_range': candle_range,
                'body_size': body_size,
                'momentum': momentum_score,
                'price_change': price_change
            })
            
            # üîß IMPROVED: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå relative strength
            relative_strength = self._calculate_relative_strength(current, previous)
            
            analysis_result = {
                'color': candle_color,
                'body_ratio': round(body_ratio, 4),
                'price_direction': price_direction,
                'range': round(candle_range, 4),
                'body_size': round(body_size, 4),
                'upper_wick': round(upper_wick, 4),
                'lower_wick': round(lower_wick, 4),
                'upper_wick_ratio': round(upper_wick_ratio, 4),
                'lower_wick_ratio': round(lower_wick_ratio, 4),
                
                # üîß IMPROVED: ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô
                'price_change': round(price_change, 4),
                'price_change_pips': round(price_change * 100, 2),  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥
                'momentum_score': momentum_score,
                'relative_strength': relative_strength,
                
                # Pattern recognition
                'pattern_name': pattern_info['name'],
                'pattern_strength': pattern_info['strength'],
                'pattern_reliability': pattern_info['reliability'],
                'reversal_pattern': pattern_info['is_reversal'],
                'continuation_pattern': pattern_info['is_continuation'],
                
                # Quality metrics
                'analysis_quality': self._calculate_candle_quality(body_ratio, candle_range, upper_wick_ratio, lower_wick_ratio),
                'signal_clarity': self._calculate_signal_clarity(candle_color, price_direction, body_ratio)
            }
            
            print(f"üïØÔ∏è Advanced analysis: {candle_color} candle, body {body_ratio:.3f}, momentum {momentum_score:.2f}")
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å cache
            self.cached_analysis = analysis_result.copy()
            self.last_analysis_time = datetime.now()
            
            return analysis_result
            
        except Exception as e:
            print(f"‚ùå Candlestick analysis error: {e}")
            return self._get_fallback_analysis()
    
    def _calculate_momentum(self, current: Dict, previous: Dict) -> float:
        """
        üöÄ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Momentum Score - NEW
        
        Args:
            current: ‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            previous: ‡πÅ‡∏ó‡πà‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
            
        Returns:
            float: Momentum score (-1.0 ‡∏ñ‡∏∂‡∏á 1.0)
        """
        try:
            curr_close = current['close']
            curr_open = current['open'] 
            prev_close = previous['close']
            prev_open = previous['open']
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì momentum ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
            current_move = curr_close - curr_open
            previous_move = prev_close - prev_open
            price_acceleration = curr_close - prev_close
            
            # Normalize momentum 
            curr_range = current['high'] - current['low']
            prev_range = previous['high'] - previous['low']
            avg_range = (curr_range + prev_range) / 2
            
            if avg_range > 0:
                momentum = price_acceleration / avg_range
                # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á -1.0 ‡∏ñ‡∏∂‡∏á 1.0
                momentum = max(-1.0, min(1.0, momentum))
            else:
                momentum = 0.0
            
            return round(momentum, 3)
            
        except Exception as e:
            return 0.0

    def _calculate_relative_strength(self, current: Dict, previous: Dict) -> float:
        """
        üí™ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì Relative Strength - NEW
        
        Args:
            current: ‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            previous: ‡πÅ‡∏ó‡πà‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
            
        Returns:
            float: Relative strength (0.0 ‡∏ñ‡∏∂‡∏á 1.0)
        """
        try:
            curr_range = current['high'] - current['low']
            prev_range = previous['high'] - previous['low']
            
            curr_body = abs(current['close'] - current['open'])
            prev_body = abs(previous['close'] - previous['open'])
            
            # ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î range ‡πÅ‡∏•‡∏∞ body
            range_ratio = curr_range / prev_range if prev_range > 0 else 1.0
            body_ratio = curr_body / prev_body if prev_body > 0 else 1.0
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì relative strength
            relative_strength = (range_ratio + body_ratio) / 2
            
            # Normalize ‡πÉ‡∏´‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á 0-1
            relative_strength = min(relative_strength / 2, 1.0)  # ‡∏´‡∏≤‡∏£‡∏î‡πâ‡∏ß‡∏¢ 2 ‡πÄ‡∏û‡∏∑‡πà‡∏≠ normalize
            
            return round(relative_strength, 3)
            
        except Exception as e:
            return 0.5

    def _recognize_advanced_patterns(self, candle_data: Dict) -> Dict:
        """
        üîç ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å Candlestick Patterns ‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á - IMPROVED
        
        Args:
            candle_data: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡πâ‡∏ß
            
        Returns:
            Dict: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• pattern ‡∏ó‡∏µ‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
        """
        try:
            color = candle_data.get('color', '')
            body_ratio = candle_data.get('body_ratio', 0)
            upper_wick_ratio = candle_data.get('upper_wick_ratio', 0)
            lower_wick_ratio = candle_data.get('lower_wick_ratio', 0)
            momentum = candle_data.get('momentum', 0)
            
            pattern_name = 'standard'
            pattern_strength = 0.5
            reliability = 0.5
            is_reversal = False
            is_continuation = False
            
            # üîß IMPROVED: Doji Patterns (‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏∂‡πâ‡∏ô)
            if body_ratio < 0.05:  # Doji threshold
                if upper_wick_ratio > 0.4 and lower_wick_ratio < 0.1:
                    pattern_name = 'gravestone_doji'
                    pattern_strength = 0.8
                    reliability = 0.75
                    is_reversal = True
                elif lower_wick_ratio > 0.4 and upper_wick_ratio < 0.1:
                    pattern_name = 'dragonfly_doji'
                    pattern_strength = 0.8
                    reliability = 0.75
                    is_reversal = True
                elif upper_wick_ratio > 0.3 and lower_wick_ratio > 0.3:
                    pattern_name = 'long_legged_doji'
                    pattern_strength = 0.6
                    reliability = 0.6
                    is_reversal = True
                else:
                    pattern_name = 'classic_doji'
                    pattern_strength = 0.5
                    reliability = 0.5
                    is_reversal = True
            
            # üîß IMPROVED: Hammer & Shooting Star (‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô)
            elif body_ratio >= 0.2 and body_ratio <= 0.4:  # Body ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
                if color == 'green' and lower_wick_ratio > 0.5 and upper_wick_ratio < 0.1:
                    pattern_name = 'hammer_bullish'
                    pattern_strength = 0.85
                    reliability = 0.8
                    is_reversal = True
                elif color == 'red' and upper_wick_ratio > 0.5 and lower_wick_ratio < 0.1:
                    pattern_name = 'shooting_star'
                    pattern_strength = 0.85
                    reliability = 0.8
                    is_reversal = True
                elif color == 'green' and upper_wick_ratio > 0.5 and lower_wick_ratio < 0.1:
                    pattern_name = 'inverted_hammer'
                    pattern_strength = 0.7
                    reliability = 0.65
                    is_reversal = True
                elif color == 'red' and lower_wick_ratio > 0.5 and upper_wick_ratio < 0.1:
                    pattern_name = 'hanging_man'
                    pattern_strength = 0.7
                    reliability = 0.65
                    is_reversal = True
            
            # üîß IMPROVED: Strong Trend Candles (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô)
            elif body_ratio > 0.6:  # Strong body
                if color == 'green':
                    if momentum > 0.5:
                        pattern_name = 'strong_bullish_momentum'
                        pattern_strength = 0.9
                        reliability = 0.8
                        is_continuation = True
                    else:
                        pattern_name = 'strong_bullish'
                        pattern_strength = 0.75
                        reliability = 0.7
                        is_continuation = True
                elif color == 'red':
                    if momentum < -0.5:
                        pattern_name = 'strong_bearish_momentum'
                        pattern_strength = 0.9
                        reliability = 0.8
                        is_continuation = True
                    else:
                        pattern_name = 'strong_bearish'
                        pattern_strength = 0.75
                        reliability = 0.7
                        is_continuation = True
            
            # üîß IMPROVED: Spinning Tops & Small Bodies
            elif body_ratio >= 0.05 and body_ratio <= 0.2:  # Small body
                if upper_wick_ratio > 0.3 and lower_wick_ratio > 0.3:
                    pattern_name = 'spinning_top'
                    pattern_strength = 0.4
                    reliability = 0.5
                    is_reversal = True
                else:
                    pattern_name = 'small_body'
                    pattern_strength = 0.3
                    reliability = 0.4
            
            # üîß IMPROVED: Medium Body Candles
            else:  # body_ratio 0.2-0.6
                if color == 'green':
                    if lower_wick_ratio > 0.3:
                        pattern_name = 'bullish_with_support'
                        pattern_strength = 0.65
                        reliability = 0.6
                    else:
                        pattern_name = 'medium_bullish'
                        pattern_strength = 0.6
                        reliability = 0.55
                elif color == 'red':
                    if upper_wick_ratio > 0.3:
                        pattern_name = 'bearish_with_resistance'
                        pattern_strength = 0.65
                        reliability = 0.6
                    else:
                        pattern_name = 'medium_bearish'
                        pattern_strength = 0.6
                        reliability = 0.55
                else:
                    pattern_name = 'neutral_medium'
                    pattern_strength = 0.4
                    reliability = 0.4
            
            # üîß IMPROVED: ‡∏õ‡∏£‡∏±‡∏ö strength ‡∏ï‡∏≤‡∏° momentum
            if abs(momentum) > 0.3:
                pattern_strength *= (1 + abs(momentum) * 0.2)  # ‡πÄ‡∏û‡∏¥‡πà‡∏° 20% ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö momentum ‡πÅ‡∏£‡∏á
                pattern_strength = min(pattern_strength, 0.95)  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 95%
            
            return {
                'name': pattern_name,
                'strength': round(pattern_strength, 3),
                'reliability': round(reliability, 3),
                'is_reversal': is_reversal,
                'is_continuation': is_continuation,
                'body_ratio': round(body_ratio, 4),
                'upper_wick_ratio': round(upper_wick_ratio, 4),
                'lower_wick_ratio': round(lower_wick_ratio, 4),
                'momentum_adjusted': abs(momentum) > 0.3
            }
            
        except Exception as e:
            print(f"‚ùå Advanced pattern recognition error: {e}")
            return {
                'name': 'error',
                'strength': 0.0,
                'reliability': 0.0,
                'is_reversal': False,
                'is_continuation': False,
                'body_ratio': 0,
                'upper_wick_ratio': 0,
                'lower_wick_ratio': 0,
                'momentum_adjusted': False
            }

    def _calculate_candle_quality(self, body_ratio: float, candle_range: float, 
                                upper_wick_ratio: float, lower_wick_ratio: float) -> float:
        """
        üéØ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô - IMPROVED ACCURACY
        
        Args:
            body_ratio: ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô body
            candle_range: ‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
            upper_wick_ratio: ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô upper wick
            lower_wick_ratio: ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô lower wick
            
        Returns:
            float: ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û 0-1
        """
        try:
            # üîß IMPROVED: ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å body ratio (‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô)
            if body_ratio >= 0.7:  # body ‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡∏°‡∏≤‡∏Å
                ratio_score = 1.0
            elif body_ratio >= 0.5:  # body ‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á
                ratio_score = 0.9
            elif body_ratio >= 0.3:  # body ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
                ratio_score = 0.7
            elif body_ratio >= 0.15:  # body ‡∏≠‡πà‡∏≠‡∏ô
                ratio_score = 0.5
            elif body_ratio >= 0.05:  # body ‡πÄ‡∏•‡πá‡∏Å
                ratio_score = 0.3
            else:  # doji ‡∏´‡∏£‡∏∑‡∏≠ body ‡πÄ‡∏•‡πá‡∏Å‡∏°‡∏≤‡∏Å
                ratio_score = 0.4  # doji ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏û‡∏¥‡πÄ‡∏®‡∏©
            
            # üîß IMPROVED: ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å candle range (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô)
            if candle_range >= 8.0:  # ‡πÅ‡∏ó‡πà‡∏á‡πÉ‡∏´‡∏ç‡πà‡∏°‡∏≤‡∏Å (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥)
                range_score = 1.0
            elif candle_range >= 5.0:  # ‡πÅ‡∏ó‡πà‡∏á‡πÉ‡∏´‡∏ç‡πà
                range_score = 0.9
            elif candle_range >= 3.0:  # ‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
                range_score = 0.8
            elif candle_range >= 1.5:  # ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏•‡πá‡∏Å
                range_score = 0.6
            elif candle_range >= 0.8:  # ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏°‡∏≤‡∏Å
                range_score = 0.4
            else:  # ‡πÅ‡∏ó‡πà‡∏á‡πÅ‡∏Ñ‡∏ö‡∏°‡∏≤‡∏Å
                range_score = 0.2
            
            # üîß IMPROVED: ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å wick balance
            wick_balance = abs(upper_wick_ratio - lower_wick_ratio)
            if wick_balance < 0.1:  # wicks ‡∏™‡∏°‡∏î‡∏∏‡∏•
                balance_score = 1.0
            elif wick_balance < 0.3:  # wicks ‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏™‡∏°‡∏î‡∏∏‡∏•
                balance_score = 0.8
            elif wick_balance < 0.5:  # wicks ‡πÑ‡∏°‡πà‡∏™‡∏°‡∏î‡∏∏‡∏•‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
                balance_score = 0.6
            else:  # wicks ‡πÑ‡∏°‡πà‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏°‡∏≤‡∏Å (‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô reversal pattern)
                balance_score = 0.7  # ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡πÜ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢
            
            # üîß IMPROVED: ‡∏£‡∏ß‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (‡∏õ‡∏£‡∏±‡∏ö weight ‡πÉ‡∏´‡∏°‡πà)
            final_score = (
                ratio_score * 0.5 +      # body ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
                range_score * 0.3 +      # range ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏£‡∏≠‡∏á
                balance_score * 0.2      # balance ‡πÄ‡∏™‡∏£‡∏¥‡∏°
            )
            
            return round(final_score, 3)
            
        except Exception as e:
            print(f"‚ùå Candle quality calculation error: {e}")
            return 0.5

    def _calculate_signal_clarity(self, candle_color: str, price_direction: str, body_ratio: float) -> float:
        """
        üéØ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏Ç‡∏≠‡∏á Signal - NEW
        
        Args:
            candle_color: ‡∏™‡∏µ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
            price_direction: ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
            body_ratio: ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô body
            
        Returns:
            float: Signal clarity score (0.0 ‡∏ñ‡∏∂‡∏á 1.0)
        """
        try:
            clarity_score = 0.0
            
            # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏µ‡πÅ‡∏•‡∏∞‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á
            if (candle_color == 'green' and price_direction == 'higher_close') or \
               (candle_color == 'red' and price_direction == 'lower_close'):
                clarity_score += 0.6  # ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô
            elif candle_color == 'doji':
                clarity_score += 0.3  # neutral
            else:
                clarity_score += 0.1  # ‡πÑ‡∏°‡πà‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á
            
            # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏à‡∏≤‡∏Å body size
            if body_ratio >= 0.5:
                clarity_score += 0.4  # signal ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
            elif body_ratio >= 0.2:
                clarity_score += 0.3  # signal ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
            elif body_ratio >= 0.05:
                clarity_score += 0.2  # signal ‡∏≠‡πà‡∏≠‡∏ô
            else:
                clarity_score += 0.1  # signal ‡∏Ñ‡∏•‡∏∏‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠
            
            return round(min(clarity_score, 1.0), 3)
            
        except Exception as e:
            return 0.5
        
    def _calculate_signal_clarity(self, candle_color: str, price_direction: str, body_ratio: float) -> float:
        """
        üéØ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏Ç‡∏≠‡∏á Signal - NEW
        
        Args:
            candle_color: ‡∏™‡∏µ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
            price_direction: ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
            body_ratio: ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô body
            
        Returns:
            float: Signal clarity score (0.0 ‡∏ñ‡∏∂‡∏á 1.0)
        """
        try:
            clarity_score = 0.0
            
            # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏µ‡πÅ‡∏•‡∏∞‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á
            if (candle_color == 'green' and price_direction == 'higher_close') or \
               (candle_color == 'red' and price_direction == 'lower_close'):
                clarity_score += 0.6  # ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô
            elif candle_color == 'doji':
                clarity_score += 0.3  # neutral
            else:
                clarity_score += 0.1  # ‡πÑ‡∏°‡πà‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á
            
            # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏à‡∏≤‡∏Å body size
            if body_ratio >= 0.5:
                clarity_score += 0.4  # signal ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
            elif body_ratio >= 0.2:
                clarity_score += 0.3  # signal ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
            elif body_ratio >= 0.05:
                clarity_score += 0.2  # signal ‡∏≠‡πà‡∏≠‡∏ô
            else:
                clarity_score += 0.1  # signal ‡∏Ñ‡∏•‡∏∏‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠
            
            return round(min(clarity_score, 1.0), 3)
            
        except Exception as e:
            return 0.5
        
    def _get_volume_analysis(self) -> Dict:
        """
        üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Volume (FIXED)
        
        Returns:
            Dict: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• volume analysis
        """
        try:
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• volume ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
            rates = mt5.copy_rates_from_pos(
                self.symbol, self.timeframe, 0, self.volume_lookback_periods + 1
            )
            
            if rates is None or len(rates) < self.volume_lookback_periods:
                print(f"‚ö†Ô∏è Volume data not available - using fallback")
                return {
                    'available': False,
                    'current': 0,
                    'average': 0,
                    'factor': 1.0,
                    'source': 'fallback'
                }
            
            # üîß FIXED: ‡∏î‡∏∂‡∏á volumes ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ .get() method
            volumes = []
            for rate in rates:
                try:
                    if 'tick_volume' in rate.dtype.names:
                        volumes.append(int(rate['tick_volume']))
                    else:
                        volumes.append(0)
                except:
                    volumes.append(0)
            
            current_volume = volumes[-1] if volumes else 0  # ‡πÅ‡∏ó‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            historical_volumes = volumes[:-1] if len(volumes) > 1 else [current_volume]  # ‡πÅ‡∏ó‡πà‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì average volume
            if historical_volumes and len(historical_volumes) > 0:
                avg_volume = sum(historical_volumes) / len(historical_volumes)
                volume_factor = current_volume / avg_volume if avg_volume > 0 else 1.0
            else:
                avg_volume = current_volume
                volume_factor = 1.0
            
            self.volume_available = True
            
            print(f"üìä Volume analysis: Current {current_volume}, Avg {avg_volume:.0f}, Factor {volume_factor:.2f}")
            
            return {
                'available': True,
                'current': current_volume,
                'average': avg_volume,
                'factor': volume_factor,
                'source': 'mt5'
            }
            
        except Exception as e:
            print(f"‚ùå Volume analysis error: {e}")
            return {
                'available': False,
                'current': 0,
                'average': 0,
                'factor': 1.0,
                'source': 'error'
            }
    
    # ==========================================
    # üîç PATTERN RECOGNITION
    # ==========================================
    
    def _recognize_basic_patterns(self, candle_data: Dict) -> Dict:
        """
        üîç ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å Pattern ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        
        Args:
            candle_data: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
            
        Returns:
            Dict: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• pattern
        """
        try:
            color = candle_data.get('color', '')
            body_ratio = candle_data.get('body_ratio', 0)
            upper_wick = candle_data.get('upper_wick', 0)
            lower_wick = candle_data.get('lower_wick', 0)
            candle_range = candle_data.get('candle_range', 0)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô wicks
            upper_wick_ratio = upper_wick / candle_range if candle_range > 0 else 0
            lower_wick_ratio = lower_wick / candle_range if candle_range > 0 else 0
            
            # ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å pattern
            if body_ratio < self.doji_threshold:
                # Doji patterns
                if upper_wick_ratio > 0.4:
                    pattern_name = 'dragonfly_doji' if lower_wick_ratio < 0.1 else 'long_legged_doji'
                elif lower_wick_ratio > 0.4:
                    pattern_name = 'gravestone_doji'
                else:
                    pattern_name = 'classic_doji'
                pattern_strength = 0.6
                
            elif body_ratio > self.strong_body_threshold:
                # Strong trend candles
                if color == 'green':
                    if lower_wick_ratio > 0.3:
                        pattern_name = 'hammer_bullish'
                        pattern_strength = 0.8
                    else:
                        pattern_name = 'strong_bullish'
                        pattern_strength = 0.7
                elif color == 'red':
                    if upper_wick_ratio > 0.3:
                        pattern_name = 'shooting_star'
                        pattern_strength = 0.8
                    else:
                        pattern_name = 'strong_bearish'
                        pattern_strength = 0.7
                else:
                    pattern_name = 'neutral'
                    pattern_strength = 0.5
                    
            else:
                # Standard candles
                if color == 'green':
                    pattern_name = 'green_candle'
                    pattern_strength = 0.5
                elif color == 'red':
                    pattern_name = 'red_candle'
                    pattern_strength = 0.5
                else:
                    pattern_name = 'neutral_candle'
                    pattern_strength = 0.3
            
            return {
                'name': pattern_name,
                'strength': pattern_strength,
                'body_ratio': body_ratio,
                'upper_wick_ratio': upper_wick_ratio,
                'lower_wick_ratio': lower_wick_ratio
            }
            
        except Exception as e:
            print(f"‚ùå Pattern recognition error: {e}")
            return {
                'name': 'unknown',
                'strength': 0.5,
                'body_ratio': 0,
                'upper_wick_ratio': 0,
                'lower_wick_ratio': 0
            }
        
    def _calculate_analysis_strength(self, candlestick_data: Dict, volume_data: Dict) -> float:
        """
        üí™ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        
        Args:
            candlestick_data: ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
            volume_data: ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå volume
            
        Returns:
            float: ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á 0-1
        """
        try:
            # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å pattern
            pattern_strength = candlestick_data.get('strength', 0.5)
            
            # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å volume
            if volume_data['available']:
                volume_factor = volume_data['factor']
                if volume_factor >= 1.5:  # volume ‡∏™‡∏π‡∏á
                    volume_score = 1.0
                elif volume_factor >= 1.2:  # volume ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
                    volume_score = 0.8
                else:  # volume ‡∏õ‡∏Å‡∏ï‡∏¥‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡πà‡∏≥
                    volume_score = 0.6
            else:
                volume_score = 0.7  # ‡πÑ‡∏°‡πà‡∏°‡∏µ volume = ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡πÜ
            
            # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å body ratio
            body_ratio = candlestick_data.get('body_ratio', 0)
            if body_ratio >= 0.4:
                body_score = 1.0
            elif body_ratio >= 0.2:
                body_score = 0.8
            else:
                body_score = 0.5
            
            # ‡∏£‡∏ß‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
            final_strength = (
                pattern_strength * 0.4 +
                volume_score * 0.3 +
                body_score * 0.3
            )
            
            return round(final_strength, 3)
            
        except Exception as e:
            print(f"‚ùå Analysis strength calculation error: {e}")
            return 0.5
    
    def _get_market_context(self, current_candle: Dict) -> str:
        """
        üåç ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Market Context
        
        Args:
            current_candle: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            
        Returns:
            str: ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó market context
        """
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö trading session
            current_time = datetime.now()
            hour = current_time.hour
            
            if 1 <= hour < 9:    # Asian session
                session = 'asian'
            elif 9 <= hour < 17:  # London session
                session = 'london'
            elif 17 <= hour < 24: # New York session
                session = 'newyork'
            else:                 # Overlap
                session = 'overlap'
            
            # ‡∏î‡∏π‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô
            candle_range = current_candle['high'] - current_candle['low']
            if candle_range >= 5.0:
                volatility = 'high'
            elif candle_range >= 2.0:
                volatility = 'medium'
            else:
                volatility = 'low'
            
            return f"{session}_{volatility}"
            
        except Exception as e:
            print(f"‚ùå Market context error: {e}")
            return "unknown_medium"
    
    # ==========================================
    # üîß UTILITY & HELPER METHODS
    # ==========================================
    
    def _is_cache_valid(self) -> bool:
        """üîß ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Cache - ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö real-time"""
        try:
            if self.cached_analysis is None:
                return False
            
            # üîß NEW: Cache valid ‡∏ô‡∏≤‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ó‡πà‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß
            time_diff = (datetime.now() - self.last_analysis_time).total_seconds()
            return time_diff < self.cache_duration_seconds
            
        except Exception as e:
            return False
            
    def _get_fallback_analysis(self) -> Dict:
        """‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• fallback ‡πÄ‡∏°‡∏∑‡πà‡∏≠ analysis ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß"""
        return {
            'color': 'neutral',
            'body_ratio': 0.1,
            'price_direction': 'same_close',
            'range': 1.0,
            'body_size': 0.1,
            'upper_wick': 0.45,
            'lower_wick': 0.45,
            'pattern_name': 'error',
            'pattern_strength': 0.0,
            'analysis_quality': 0.0
        }
    
    def refresh_cache(self):
        """üîÑ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö refresh cache"""
        try:
            self.cached_analysis = None
            self.last_analysis_time = datetime.min
            print(f"üîÑ Analysis cache refreshed")
        except Exception as e:
            print(f"‚ùå Cache refresh error: {e}")
    
    def is_ready(self) -> bool:
        """‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°"""
        return (
            self.mt5_connector is not None and
            self.mt5_connector.is_connected and
            self.symbol is not None
        )
    
    def get_analyzer_info(self) -> Dict:
        """‚ÑπÔ∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Candlestick Analyzer"""
        return {
            'name': 'Pure Candlestick Analyzer',
            'version': '1.0.0',
            'symbol': self.symbol,
            'timeframe': 'M5',
            'volume_available': self.volume_available,
            'min_candles_required': self.min_candles_required,
            'volume_lookback_periods': self.volume_lookback_periods,
            'doji_threshold': self.doji_threshold,
            'strong_body_threshold': self.strong_body_threshold,
            'cache_duration_seconds': self.cache_duration_seconds
        }

# ==========================================
# üß™ TESTING & VALIDATION
# ==========================================

def test_candlestick_analyzer(mt5_connector, config):
    """üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Candlestick Analyzer"""
    print("üß™ Testing Candlestick Analyzer...")
    print("=" * 50)
    
    analyzer = CandlestickAnalyzer(mt5_connector, config)
    
    if not analyzer.is_ready():
        print("‚ùå Analyzer not ready")
        return
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
    analysis = analyzer.get_current_analysis()
    
    if analysis:
        print("‚úÖ Analysis successful!")
        print(f"   Symbol: {analysis.get('symbol')}")
        print(f"   Close: ${analysis.get('close', 0):.2f}")
        print(f"   Color: {analysis.get('candle_color')}")
        print(f"   Body ratio: {analysis.get('body_ratio', 0):.3f}")
        print(f"   Price direction: {analysis.get('price_direction')}")
        print(f"   Pattern: {analysis.get('pattern_name')}")
        print(f"   Volume available: {analysis.get('volume_available')}")
        print(f"   Analysis strength: {analysis.get('analysis_strength', 0):.2f}")
    else:
        print("‚ùå Analysis failed")
    
    print("=" * 50)
    print("‚úÖ Candlestick Analyzer test completed")