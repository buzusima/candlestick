"""
üîç  MT5 Multi-Installation Detector
‡πÅ‡∏Ñ‡πà‡∏´‡∏≤ MT5 ‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß ‡πÅ‡∏•‡πâ‡∏ß‡πÉ‡∏´‡πâ‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏≠‡∏á - ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢ ‡πÑ‡∏°‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
"""

import MetaTrader5 as mt5
import os
import time
import re
from datetime import datetime
import psutil
import winreg
from pathlib import Path
from dataclasses import dataclass
from typing import List, Dict, Optional

@dataclass
class MT5Installation:
    """‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MT5 Installation ‡πÅ‡∏ö‡∏ö‡∏á‡πà‡∏≤‡∏¢‡πÜ"""
    path: str
    broker: str = "Unknown"
    executable_type: str = ""  # terminal64.exe or terminal.exe
    is_running: bool = False
    data_path: str = ""

class MT5Connector:
    """
    üîç  MT5 Multi-Installation Connector
    
    ‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå:
    - ‡∏´‡∏≤ MT5 ‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á
    - ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    - ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ‡πÑ‡∏°‡πà‡∏ã‡∏±‡∏ö‡∏ã‡πâ‡∏≠‡∏ô
    """
    
    def __init__(self):
        self.is_connected = False
        self.gold_symbol = None
        self.account_info = {}
        self.symbol_info = {}
        self.selected_mt5 = None
        
        # ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ MT5 ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠
        self.available_installations: List[MT5Installation] = []
        
        # Gold symbol variations
        self.gold_symbols = [
            "XAUUSD", "GOLD", "XAU/USD", "XAUUSD.cmd", "GOLD#", 
            "XAUUSD.", "XAUUSD-", "XAU-USD", "GOLD.", "GOLD_",
            "XAUUSD.raw", "XAUUSD.ecn", "GOLDmicro", "XAUUSD.m",
            "XAUUSD_", "XAUUSD#", "XAUUSDpro", "GOLD.std"
        ]
        
    def find_running_mt5_installations(self) -> List[MT5Installation]:
        """
        üîç ‡∏´‡∏≤ MT5 ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
        Returns: List ‡∏Ç‡∏≠‡∏á MT5Installation objects ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
        """
        installations = []
        found_processes = {}
        
        print("üîç ‡∏´‡∏≤ MT5 ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà...")
        
        try:
            # ‡∏´‡∏≤‡∏à‡∏≤‡∏Å running processes ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
            for proc in psutil.process_iter(['pid', 'name', 'exe', 'cmdline']):
                try:
                    proc_info = proc.info
                    if not proc_info['name']:
                        continue
                        
                    # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô MT5 ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                    if ('terminal64.exe' in proc_info['name'].lower() or 
                        'terminal.exe' in proc_info['name'].lower()):
                        
                        exe_path = proc_info['exe']
                        if exe_path and self._is_mt5_process(exe_path):
                            
                            # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô duplicate processes
                            if exe_path not in found_processes:
                                
                                # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö broker ‡∏à‡∏≤‡∏Å path ‡πÅ‡∏•‡∏∞ process info
                                broker_name = self._detect_broker_from_process(proc_info)
                                
                                installation = MT5Installation(
                                    path=exe_path,
                                    broker=broker_name,
                                    executable_type=os.path.basename(exe_path),
                                    is_running=True
                                )
                                
                                installations.append(installation)
                                found_processes[exe_path] = installation
                                
                                print(f"   ‚úÖ ‡πÄ‡∏à‡∏≠: {broker_name} ({installation.executable_type})")
                                
                except (psutil.NoSuchProcess, psutil.AccessDenied, TypeError):
                    continue
                    
        except Exception as e:
            print(f"‚ùå Process scan error: {e}")
        
        self.available_installations = installations
        
        if installations:
            print(f"‚úÖ ‡πÄ‡∏à‡∏≠ MT5 ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà {len(installations)} ‡∏ï‡∏±‡∏ß")
        else:
            print("‚ùå ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ MT5 ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà")
            print("üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î MT5 ‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡πâ‡∏ß‡∏•‡∏≠‡∏á Scan ‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
            
        return installations
    
    def _is_mt5_process(self, exe_path: str) -> bool:
        """‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô MT5 process ‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
        try:
            if not exe_path:
                return False
                
            path_lower = exe_path.lower()
            
            # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå
            if not ('terminal64.exe' in path_lower or 'terminal.exe' in path_lower):
                return False
                
            # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö MT5 ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            exe_dir = os.path.dirname(exe_path)
            
            # ‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà MT5 ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ
            mt5_files = [
                'metatrader.exe', 'metaeditor64.exe', 'metaeditor.exe',
                'terminal.ini', 'config', 'profiles'
            ]
            
            has_mt5_files = any(
                os.path.exists(os.path.join(exe_dir, f)) or 
                os.path.exists(os.path.join(exe_dir, f.capitalize()))
                for f in mt5_files
            )
            
            return has_mt5_files
            
        except Exception:
            return False
    
    def _detect_broker_from_process(self, proc_info: Dict) -> str:
        """‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö broker ‡∏à‡∏≤‡∏Å process information"""
        try:
            exe_path = proc_info.get('exe', '')
            cmdline = proc_info.get('cmdline', [])
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏à‡∏≤‡∏Å path
            path_lower = exe_path.lower() if exe_path else ''
            
            # ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ broker ‡∏ó‡∏µ‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å
            known_brokers = {
                'exness': 'Exness',
                'icmarkets': 'IC Markets', 
                'ic markets': 'IC Markets',
                'ic_markets': 'IC Markets',
                'pepperstone': 'Pepperstone',
                'fxtm': 'FXTM',
                'forextime': 'FXTM',
                'xm': 'XM',
                'xmglobal': 'XM',
                'fxpro': 'FXPro',
                'avatrade': 'AvaTrade',
                'tickmill': 'Tickmill',
                'admiral': 'Admiral Markets',
                'admiralmarkets': 'Admiral Markets',
                'oanda': 'OANDA',
                'forex.com': 'Forex.com',
                'hotforex': 'HotForex',
                'roboforex': 'RoboForex',
                'alpari': 'Alpari',
                'instaforex': 'InstaForex',
                'fbs': 'FBS'
            }
            
            # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏à‡∏≤‡∏Å path
            for key, name in known_brokers.items():
                if key in path_lower:
                    return name
            
            # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏à‡∏≤‡∏Å command line arguments
            if cmdline:
                cmdline_str = ' '.join(cmdline).lower()
                for key, name in known_brokers.items():
                    if key in cmdline_str:
                        return f"{name} (cmdline)"
            
            # ‡πÄ‡∏ä‡πá‡∏Ñ‡∏à‡∏≤‡∏Å folder structure
            if exe_path:
                path_parts = exe_path.replace('\\', '/').split('/')
                for part in path_parts:
                    part_lower = part.lower()
                    if part_lower and len(part_lower) > 3:  # ‡∏Ç‡πâ‡∏≤‡∏° folder ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏±‡πâ‡∏ô‡πÜ
                        for key, name in known_brokers.items():
                            if key in part_lower:
                                return f"{name}"
                
                # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏´‡∏≤‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ ‡πÉ‡∏ä‡πâ parent folder name
                parent_folder = os.path.basename(os.path.dirname(exe_path))
                if parent_folder and parent_folder.lower() not in ['metatrader 5', 'metatrader5', 'mt5', 'program files', 'program files (x86)']:
                    return f"MT5 ({parent_folder})"
            
            return "MT5 (Unknown Broker)"
            
        except Exception as e:
            print(f"Broker detection error: {e}")
            return "MT5 (Detection Error)"
    
    def connect_to_installation(self, installation_index: int) -> bool:
        """
        ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ‡∏¢‡∏±‡∏á MT5 installation ‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        
        Args:
            installation_index: index ‡πÉ‡∏ô available_installations list
            
        Returns:
            True ‡∏ñ‡πâ‡∏≤‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        """
        if installation_index < 0 or installation_index >= len(self.available_installations):
            print("‚ùå ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å installation ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            return False
            
        installation = self.available_installations[installation_index]
        self.selected_mt5 = installation
        
        return self._attempt_connection(installation)
    
    def auto_connect(self) -> bool:
        """
        Auto-connect ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà:
        - ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ MT5 ‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß -> ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏•‡∏¢
        - ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß -> ‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        """
        print("üîó ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5...")
        
        # ‡∏´‡∏≤ MT5 ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
        installations = self.find_running_mt5_installations()
        
        if not installations:
            print("‚ùå ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ MT5 ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà")
            print("üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î MT5 ‡∏Å‡πà‡∏≠‡∏ô")
            return False
            
        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß -> ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏•‡∏¢
        if len(installations) == 1:
            print(f"üì± ‡πÄ‡∏à‡∏≠ MT5 ‡∏ï‡∏±‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß: {installations[0].broker}")
            return self.connect_to_installation(0)
            
        # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏´‡∏•‡∏≤‡∏¢‡∏ï‡∏±‡∏ß -> ‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
        print(f"\nüìã ‡πÄ‡∏à‡∏≠ MT5 ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(installations)} ‡∏ï‡∏±‡∏ß:")
        for i, inst in enumerate(installations):
            exe_type = "64-bit" if "64" in inst.executable_type else "32-bit"
            print(f"  {i+1}. {inst.broker} ({exe_type}) - üü¢ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
            print(f"     üìÅ {inst.path}")
            
        print(f"\n‚ùì ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å MT5 ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ (1-{len(installations)}):")
        print("   ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ connect_to_installation(index) ‡πÉ‡∏ô code")
        
        return False  # ‡πÉ‡∏´‡πâ user ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏≠‡∏á
    
    def _attempt_connection(self, installation: MT5Installation) -> bool:
        """‡∏•‡∏≠‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö MT5 installation"""
        try:
            print(f"üîó ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: {installation.broker}")
            print(f"üìÅ Path: {installation.path}")
            
            # MT5 ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏±‡∏ô‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó
            if not installation.is_running:
                print(f"‚ö†Ô∏è MT5 ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà - ‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ")
                return False
                
            # Initialize MT5
            if not mt5.initialize():
                print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ initialize MT5 ‡πÑ‡∏î‡πâ")
                return False
                
            # Get account info
            account_info = mt5.account_info()
            if account_info is None:
                print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ account login")
                return False
                
            print(f"‚úÖ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ account: {account_info.login}")
            print(f"üí∞ ‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô: ${account_info.balance:,.2f}")
            print(f"üè¶ ‡πÇ‡∏ö‡∏£‡∏Å‡πÄ‡∏Å‡∏≠‡∏£‡πå: {account_info.company}")
            
            # Detect gold symbol
            gold_symbol = self.detect_gold_symbol()
            if not gold_symbol:
                print("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥")
                # ‡πÑ‡∏°‡πà return False ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏≠‡∏≤‡∏à‡∏à‡∏∞‡πÄ‡∏ó‡∏£‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏≠‡∏∑‡πà‡∏ô
                
            if gold_symbol:
                print(f"ü•á ‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥: {gold_symbol}")
            
            # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
            self.is_connected = True
            self.account_info = {
                'login': account_info.login,
                'balance': account_info.balance,
                'equity': account_info.equity,
                'margin': account_info.margin,
                'free_margin': account_info.margin_free,
                'leverage': account_info.leverage,
                'company': account_info.company,
                'currency': account_info.currency
            }
            
            self.gold_symbol = gold_symbol
            
            return True
            
        except Exception as e:
            print(f"‚ùå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
            return False
    
    # === Gold Symbol Detection (‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°) ===
    
    def detect_gold_symbol(self):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥"""
        try:
            all_symbols = mt5.symbols_get()
            if not all_symbols:
                return None
                
            symbol_names = [symbol.name for symbol in all_symbols]
            
            # Method 1: Exact match
            for gold_sym in self.gold_symbols:
                if gold_sym in symbol_names:
                    if self.verify_gold_symbol(gold_sym):
                        return gold_sym
                        
            # Method 2: Pattern matching
            gold_patterns = [
                r'^XAU.*USD.*$',
                r'^GOLD.*$',
                r'^.*GOLD.*$',
                r'^XAU.*$'
            ]
            
            for pattern in gold_patterns:
                for symbol_name in symbol_names:
                    if re.match(pattern, symbol_name, re.IGNORECASE):
                        if self.verify_gold_symbol(symbol_name):
                            return symbol_name
                            
            return None
            
        except Exception as e:
            print(f"Error detecting gold symbol: {e}")
            return None
    
    def verify_gold_symbol(self, symbol):
        """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥‡∏à‡∏£‡∏¥‡∏á"""
        try:
            symbol_info = mt5.symbol_info(symbol)
            if not symbol_info:
                return False
                
            if not symbol_info.visible:
                if not mt5.symbol_select(symbol, True):
                    return False
                    
            tick = mt5.symbol_info_tick(symbol)
            if tick and tick.bid:
                price = tick.bid
                if 1000 <= price <= 5000:  # Gold price range
                    return True
                    
            return True
            
        except Exception as e:
            print(f"Error verifying gold symbol {symbol}: {e}")
            return False
    
    # === Utility Methods ===
    
    def get_installation_list(self) -> List[Dict]:
        """‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ installations ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö GUI"""
        return [
            {
                'index': i,
                'broker': inst.broker,
                'path': inst.path,
                'executable_type': inst.executable_type,
                'is_running': inst.is_running,
                'display_name': f"{inst.broker} ({'64-bit' if '64' in inst.executable_type else '32-bit'})"
            }
            for i, inst in enumerate(self.available_installations)
        ]
    
    def get_account_info(self) -> Dict:
        """‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• account ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        return self.account_info.copy()
    
    def get_gold_symbol(self) -> Optional[str]:
        """‡∏î‡∏∂‡∏á‡∏™‡∏±‡∏ç‡∏•‡∏±‡∏Å‡∏©‡∏ì‡πå‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÑ‡∏î‡πâ"""
        return self.gold_symbol
    
    def disconnect(self):
        """‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"""
        try:
            if self.is_connected:
                mt5.shutdown()
                self.is_connected = False
                self.gold_symbol = None
                self.account_info = {}
                self.symbol_info = {}
                print("‚úÖ ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
                return True
        except Exception as e:
            print(f"Error disconnecting: {e}")
            
        return False

    def get_current_price(self, symbol: str) -> float:
        """Get current market price for symbol"""
        try:
            if not self.is_connected:
                print(f"‚ùå MT5 not connected - cannot get price for {symbol}")
                return 0.0
            
            tick = mt5.symbol_info_tick(symbol)
            if tick is None:
                print(f"‚ùå No tick data for symbol: {symbol}")
                return 0.0
            
            price = tick.bid if hasattr(tick, 'bid') else 0.0
            
            if price <= 0:
                print(f"‚ùå Invalid price for {symbol}: {price}")
                return 0.0
            
            return price
            
        except Exception as e:
            print(f"‚ùå Get current price error for {symbol}: {e}")
            return 0.0

# === Test Function ===

def test_connector():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö  Connector"""
    print("üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö  MT5 Connector...")
    print("=" * 50)
    
    connector = MT5Connector()
    
    # Test 1: ‡∏´‡∏≤ installations ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà
    installations = connector.find_running_mt5_installations()
    
    if not installations:
        print("‚ùå ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠ MT5 ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà")
        print("üí° ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î MT5 ‡∏Å‡πà‡∏≠‡∏ô")
        return
        
    # Test 2: ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
    print(f"\nüìä ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ MT5 ‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà:")
    for i, inst in enumerate(installations):
        exe_type = "64-bit" if "64" in inst.executable_type else "32-bit"
        print(f"  {i}: üü¢ {inst.broker} ({exe_type})")
        print(f"     {inst.path}")
    
    # Test 3: ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å
    print(f"\nüîó ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏Å‡∏±‡∏ö‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å...")
    if connector.connect_to_installation(0):
        print("üéâ ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
        print(f"   Account: {connector.account_info.get('login')}")
        print(f"   Broker: {connector.account_info.get('company')}")
        print(f"   Gold: {connector.gold_symbol}")
        
        # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        connector.disconnect()
    else:
        print("‚ùå ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à")

if __name__ == "__main__":
    test_connector()