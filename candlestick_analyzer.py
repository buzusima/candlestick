"""
üïØÔ∏è Pure Candlestick Analyzer (FIXED OHLC)
candlestick_analyzer.py

üîß FIXED ISSUES:
‚úÖ numpy.void object 'get' method error
‚úÖ Proper OHLC data extraction from MT5
‚úÖ Volume data handling
‚úÖ Error handling for missing data

üöÄ Features:
‚úÖ OHLC Data Collection
‚úÖ Candlestick Pattern Recognition
‚úÖ Volume Analysis (with fallback)
‚úÖ Body Ratio Calculation
‚úÖ Price Direction Detection
‚úÖ Basic Pattern Classification
"""

import MetaTrader5 as mt5
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
import time

class CandlestickAnalyzer:
    """
    üïØÔ∏è Pure Candlestick Analyzer (FIXED VERSION)
    
    ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
    ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤ patterns ‡πÅ‡∏•‡∏∞ signals ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡πÑ‡∏î‡πâ
    """
    
    def __init__(self, mt5_connector, config: Dict):
        """
        üîß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Candlestick Analyzer
        
        Args:
            mt5_connector: MT5 connection object
            config: ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö
        """
        self.mt5_connector = mt5_connector
        self.config = config
        
        # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
        self.symbol = config.get("trading", {}).get("symbol", "XAUUSD.v")
        self.timeframe = mt5.TIMEFRAME_M5  # ‡πÉ‡∏ä‡πâ 5 ‡∏ô‡∏≤‡∏ó‡∏µ
        
        # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ analysis
        self.min_candles_required = 20  # ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 20 ‡πÅ‡∏ó‡πà‡∏á
        self.volume_lookback_periods = 10  # ‡∏î‡∏π volume ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 10 periods
        
        # Pattern settings
        self.doji_threshold = 0.05  # body < 5% = doji
        self.strong_body_threshold = 0.6  # body > 60% = strong trend
        
        # Cache
        self.last_analysis_time = datetime.min
        self.cache_duration_seconds = 2  # cache 2 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        self.cached_analysis = None
        
        # Volume data
        self.volume_available = False
        self.volume_history = []
        
        print(f"üïØÔ∏è Candlestick Analyzer initialized for {self.symbol}")
        print(f"   Timeframe: M5")
        print(f"   Min candles: {self.min_candles_required}")
        print(f"   Volume lookback: {self.volume_lookback_periods}")
    
    # ==========================================
    # üìä MAIN ANALYSIS METHODS
    # ==========================================
    
    def get_current_analysis(self) -> Optional[Dict]:
        """
        üìä ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        
        Returns:
            Dict: ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå ‡∏´‡∏£‡∏∑‡∏≠ None ‡∏ñ‡πâ‡∏≤‡πÄ‡∏Å‡∏¥‡∏î‡∏õ‡∏±‡∏ç‡∏´‡∏≤
        """
        try:
            # ‡πÄ‡∏ä‡πá‡∏Ñ cache
            if self._is_cache_valid():
                return self.cached_analysis.copy()
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
            if not self.mt5_connector.is_connected:
                print(f"‚ùå MT5 not connected - cannot analyze")
                return None
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• OHLC
            ohlc_data = self._get_ohlc_data()
            if not ohlc_data:
                print(f"‚ùå Cannot get OHLC data")
                return None
            
            current_candle = ohlc_data['current']
            previous_candle = ohlc_data['previous']
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• volume
            volume_data = self._get_volume_analysis()
            
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
            candlestick_analysis = self._analyze_candlestick(current_candle, previous_candle)
            
            # ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            complete_analysis = {
                # OHLC data
                'symbol': self.symbol,
                'timestamp': datetime.now(),
                'open': current_candle['open'],
                'high': current_candle['high'],
                'low': current_candle['low'],
                'close': current_candle['close'],
                'previous_close': previous_candle['close'],
                
                # Candlestick analysis
                'candle_color': candlestick_analysis['color'],
                'body_ratio': candlestick_analysis['body_ratio'],
                'price_direction': candlestick_analysis['price_direction'],
                'candle_range': candlestick_analysis['range'],
                'body_size': candlestick_analysis['body_size'],
                'upper_wick': candlestick_analysis['upper_wick'],
                'lower_wick': candlestick_analysis['lower_wick'],
                
                # Pattern recognition
                'pattern_name': candlestick_analysis['pattern_name'],
                'pattern_strength': candlestick_analysis['pattern_strength'],
                
                # Volume analysis
                'volume_available': volume_data['available'],
                'current_volume': volume_data['current'],
                'avg_volume': volume_data['average'],
                'volume_factor': volume_data['factor'],
                
                # Market context
                'market_context': self._get_market_context(current_candle),
                'analysis_strength': self._calculate_analysis_strength(candlestick_analysis, volume_data),
                
                # Metadata
                'timeframe': 'M5',
                'analysis_time': datetime.now()
            }
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å cache
            self.cached_analysis = complete_analysis.copy()
            self.last_analysis_time = datetime.now()
            
            return complete_analysis
            
        except Exception as e:
            print(f"‚ùå Current analysis error: {e}")
            return None
    
    def _get_ohlc_data(self) -> Optional[Dict]:
        """
        üìä ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• OHLC ‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ (FIXED)
        
        Returns:
            Dict: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• current ‡πÅ‡∏•‡∏∞ previous candle
        """
        try:
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 3 ‡πÅ‡∏ó‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢)
            rates = mt5.copy_rates_from_pos(self.symbol, self.timeframe, 0, 3)
            
            if rates is None or len(rates) < 2:
                print(f"‚ùå Cannot get sufficient rate data for {self.symbol}")
                return None
            
            # üîß FIXED: ‡πÅ‡∏õ‡∏•‡∏á numpy array ‡πÄ‡∏õ‡πá‡∏ô dict ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            # ‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î)
            current_raw = rates[-1]
            current_candle = {
                'time': datetime.fromtimestamp(int(current_raw['time'])),
                'open': float(current_raw['open']),
                'high': float(current_raw['high']),
                'low': float(current_raw['low']),
                'close': float(current_raw['close']),
                'volume': int(current_raw['tick_volume']) if 'tick_volume' in current_raw.dtype.names else 0
            }
            
            # ‡πÅ‡∏ó‡πà‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
            previous_raw = rates[-2]
            previous_candle = {
                'time': datetime.fromtimestamp(int(previous_raw['time'])),
                'open': float(previous_raw['open']),
                'high': float(previous_raw['high']),
                'low': float(previous_raw['low']),
                'close': float(previous_raw['close']),
                'volume': int(previous_raw['tick_volume']) if 'tick_volume' in previous_raw.dtype.names else 0
            }
            
            print(f"üìä OHLC retrieved: Current ${current_candle['close']:.2f}, Previous ${previous_candle['close']:.2f}")
            
            return {
                'current': current_candle,
                'previous': previous_candle,
                'timestamp': datetime.now()
            }
            
        except Exception as e:
            print(f"‚ùå OHLC data error: {e}")
            return None
    
    def _analyze_candlestick(self, current: Dict, previous: Dict) -> Dict:
        """
        üïØÔ∏è ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        
        Args:
            current: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            previous: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
            
        Returns:
            Dict: ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
        """
        try:
            o, h, l, c = current['open'], current['high'], current['low'], current['close']
            prev_close = previous['close']
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡πà‡∏≤‡∏á‡πÜ
            candle_range = h - l
            body_size = abs(c - o)
            body_ratio = body_size / candle_range if candle_range > 0 else 0
            
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
            if c > o:
                candle_color = 'green'  # bullish
            elif c < o:
                candle_color = 'red'    # bearish
            else:
                candle_color = 'doji'   # ‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô
            
            # ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
            if c > prev_close:
                price_direction = 'higher_close'
            elif c < prev_close:
                price_direction = 'lower_close'
            else:
                price_direction = 'same_close'
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì wicks
            if candle_color == 'green':
                upper_wick = h - c
                lower_wick = o - l
            elif candle_color == 'red':
                upper_wick = h - o
                lower_wick = c - l
            else:  # doji
                upper_wick = h - max(o, c)
                lower_wick = min(o, c) - l
            
            # Pattern recognition
            pattern_info = self._recognize_basic_patterns({
                'color': candle_color,
                'body_ratio': body_ratio,
                'upper_wick': upper_wick,
                'lower_wick': lower_wick,
                'candle_range': candle_range
            })
            
            analysis_result = {
                'color': candle_color,
                'body_ratio': body_ratio,
                'price_direction': price_direction,
                'range': candle_range,
                'body_size': body_size,
                'upper_wick': upper_wick,
                'lower_wick': lower_wick,
                'pattern_name': pattern_info['name'],
                'pattern_strength': pattern_info['strength'],
                'analysis_quality': self._calculate_candle_quality(body_ratio, candle_range)
            }
            
            print(f"üïØÔ∏è Candle analysis: {candle_color} candle, body ratio {body_ratio:.3f}, {price_direction}")
            
            return analysis_result
            
        except Exception as e:
            print(f"‚ùå Candlestick analysis error: {e}")
            return self._get_fallback_analysis()
    
    def _get_volume_analysis(self) -> Dict:
        """
        üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Volume (FIXED)
        
        Returns:
            Dict: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• volume analysis
        """
        try:
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• volume ‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
            rates = mt5.copy_rates_from_pos(
                self.symbol, self.timeframe, 0, self.volume_lookback_periods + 1
            )
            
            if rates is None or len(rates) < self.volume_lookback_periods:
                print(f"‚ö†Ô∏è Volume data not available - using fallback")
                return {
                    'available': False,
                    'current': 0,
                    'average': 0,
                    'factor': 1.0,
                    'source': 'fallback'
                }
            
            # üîß FIXED: ‡∏î‡∏∂‡∏á volumes ‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πâ .get() method
            volumes = []
            for rate in rates:
                try:
                    if 'tick_volume' in rate.dtype.names:
                        volumes.append(int(rate['tick_volume']))
                    else:
                        volumes.append(0)
                except:
                    volumes.append(0)
            
            current_volume = volumes[-1] if volumes else 0  # ‡πÅ‡∏ó‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            historical_volumes = volumes[:-1] if len(volumes) > 1 else [current_volume]  # ‡πÅ‡∏ó‡πà‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì average volume
            if historical_volumes and len(historical_volumes) > 0:
                avg_volume = sum(historical_volumes) / len(historical_volumes)
                volume_factor = current_volume / avg_volume if avg_volume > 0 else 1.0
            else:
                avg_volume = current_volume
                volume_factor = 1.0
            
            self.volume_available = True
            
            print(f"üìä Volume analysis: Current {current_volume}, Avg {avg_volume:.0f}, Factor {volume_factor:.2f}")
            
            return {
                'available': True,
                'current': current_volume,
                'average': avg_volume,
                'factor': volume_factor,
                'source': 'mt5'
            }
            
        except Exception as e:
            print(f"‚ùå Volume analysis error: {e}")
            return {
                'available': False,
                'current': 0,
                'average': 0,
                'factor': 1.0,
                'source': 'error'
            }
    
    # ==========================================
    # üîç PATTERN RECOGNITION
    # ==========================================
    
    def _recognize_basic_patterns(self, candle_data: Dict) -> Dict:
        """
        üîç ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å Pattern ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        
        Args:
            candle_data: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
            
        Returns:
            Dict: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• pattern
        """
        try:
            color = candle_data.get('color', '')
            body_ratio = candle_data.get('body_ratio', 0)
            upper_wick = candle_data.get('upper_wick', 0)
            lower_wick = candle_data.get('lower_wick', 0)
            candle_range = candle_data.get('candle_range', 0)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô wicks
            upper_wick_ratio = upper_wick / candle_range if candle_range > 0 else 0
            lower_wick_ratio = lower_wick / candle_range if candle_range > 0 else 0
            
            # ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å pattern
            if body_ratio < self.doji_threshold:
                # Doji patterns
                if upper_wick_ratio > 0.4:
                    pattern_name = 'dragonfly_doji' if lower_wick_ratio < 0.1 else 'long_legged_doji'
                elif lower_wick_ratio > 0.4:
                    pattern_name = 'gravestone_doji'
                else:
                    pattern_name = 'classic_doji'
                pattern_strength = 0.6
                
            elif body_ratio > self.strong_body_threshold:
                # Strong trend candles
                if color == 'green':
                    if lower_wick_ratio > 0.3:
                        pattern_name = 'hammer_bullish'
                        pattern_strength = 0.8
                    else:
                        pattern_name = 'strong_bullish'
                        pattern_strength = 0.7
                elif color == 'red':
                    if upper_wick_ratio > 0.3:
                        pattern_name = 'shooting_star'
                        pattern_strength = 0.8
                    else:
                        pattern_name = 'strong_bearish'
                        pattern_strength = 0.7
                else:
                    pattern_name = 'neutral'
                    pattern_strength = 0.5
                    
            else:
                # Standard candles
                if color == 'green':
                    pattern_name = 'green_candle'
                    pattern_strength = 0.5
                elif color == 'red':
                    pattern_name = 'red_candle'
                    pattern_strength = 0.5
                else:
                    pattern_name = 'neutral_candle'
                    pattern_strength = 0.3
            
            return {
                'name': pattern_name,
                'strength': pattern_strength,
                'body_ratio': body_ratio,
                'upper_wick_ratio': upper_wick_ratio,
                'lower_wick_ratio': lower_wick_ratio
            }
            
        except Exception as e:
            print(f"‚ùå Pattern recognition error: {e}")
            return {
                'name': 'unknown',
                'strength': 0.5,
                'body_ratio': 0,
                'upper_wick_ratio': 0,
                'lower_wick_ratio': 0
            }
    
    def _calculate_candle_quality(self, body_ratio: float, candle_range: float) -> float:
        """
        üéØ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
        
        Args:
            body_ratio: ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô body
            candle_range: ‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
            
        Returns:
            float: ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û 0-1
        """
        try:
            # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å body ratio
            if body_ratio >= 0.6:  # body ‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á
                ratio_score = 1.0
            elif body_ratio >= 0.3:  # body ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
                ratio_score = 0.7
            elif body_ratio >= 0.1:  # body ‡∏≠‡πà‡∏≠‡∏ô
                ratio_score = 0.4
            else:  # doji ‡∏´‡∏£‡∏∑‡∏≠ body ‡πÄ‡∏•‡πá‡∏Å‡∏°‡∏≤‡∏Å
                ratio_score = 0.2
            
            # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å candle range (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô)
            if candle_range >= 5.0:  # ‡πÅ‡∏ó‡πà‡∏á‡πÉ‡∏´‡∏ç‡πà
                range_score = 1.0
            elif candle_range >= 2.0:  # ‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
                range_score = 0.8
            elif candle_range >= 1.0:  # ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏•‡πá‡∏Å
                range_score = 0.6
            else:  # ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏°‡∏≤‡∏Å
                range_score = 0.3
            
            # ‡∏£‡∏ß‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (‡πÄ‡∏ô‡πâ‡∏ô body ratio)
            final_score = (ratio_score * 0.7) + (range_score * 0.3)
            
            return round(final_score, 3)
            
        except Exception as e:
            print(f"‚ùå Candle quality calculation error: {e}")
            return 0.5
    
    def _calculate_analysis_strength(self, candlestick_data: Dict, volume_data: Dict) -> float:
        """
        üí™ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        
        Args:
            candlestick_data: ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
            volume_data: ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå volume
            
        Returns:
            float: ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á 0-1
        """
        try:
            # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å pattern
            pattern_strength = candlestick_data.get('strength', 0.5)
            
            # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å volume
            if volume_data['available']:
                volume_factor = volume_data['factor']
                if volume_factor >= 1.5:  # volume ‡∏™‡∏π‡∏á
                    volume_score = 1.0
                elif volume_factor >= 1.2:  # volume ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
                    volume_score = 0.8
                else:  # volume ‡∏õ‡∏Å‡∏ï‡∏¥‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡πà‡∏≥
                    volume_score = 0.6
            else:
                volume_score = 0.7  # ‡πÑ‡∏°‡πà‡∏°‡∏µ volume = ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡πÜ
            
            # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å body ratio
            body_ratio = candlestick_data.get('body_ratio', 0)
            if body_ratio >= 0.4:
                body_score = 1.0
            elif body_ratio >= 0.2:
                body_score = 0.8
            else:
                body_score = 0.5
            
            # ‡∏£‡∏ß‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
            final_strength = (
                pattern_strength * 0.4 +
                volume_score * 0.3 +
                body_score * 0.3
            )
            
            return round(final_strength, 3)
            
        except Exception as e:
            print(f"‚ùå Analysis strength calculation error: {e}")
            return 0.5
    
    def _get_market_context(self, current_candle: Dict) -> str:
        """
        üåç ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Market Context
        
        Args:
            current_candle: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            
        Returns:
            str: ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó market context
        """
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö trading session
            current_time = datetime.now()
            hour = current_time.hour
            
            if 1 <= hour < 9:    # Asian session
                session = 'asian'
            elif 9 <= hour < 17:  # London session
                session = 'london'
            elif 17 <= hour < 24: # New York session
                session = 'newyork'
            else:                 # Overlap
                session = 'overlap'
            
            # ‡∏î‡∏π‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô
            candle_range = current_candle['high'] - current_candle['low']
            if candle_range >= 5.0:
                volatility = 'high'
            elif candle_range >= 2.0:
                volatility = 'medium'
            else:
                volatility = 'low'
            
            return f"{session}_{volatility}"
            
        except Exception as e:
            print(f"‚ùå Market context error: {e}")
            return "unknown_medium"
    
    # ==========================================
    # üîß UTILITY & HELPER METHODS
    # ==========================================
    
    def _is_cache_valid(self) -> bool:
        """üîß ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Cache"""
        try:
            if self.cached_analysis is None:
                return False
            
            time_diff = (datetime.now() - self.last_analysis_time).total_seconds()
            return time_diff < self.cache_duration_seconds
            
        except Exception as e:
            return False
    
    def _get_fallback_analysis(self) -> Dict:
        """‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• fallback ‡πÄ‡∏°‡∏∑‡πà‡∏≠ analysis ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß"""
        return {
            'color': 'neutral',
            'body_ratio': 0.1,
            'price_direction': 'same_close',
            'range': 1.0,
            'body_size': 0.1,
            'upper_wick': 0.45,
            'lower_wick': 0.45,
            'pattern_name': 'error',
            'pattern_strength': 0.0,
            'analysis_quality': 0.0
        }
    
    def refresh_cache(self):
        """üîÑ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö refresh cache"""
        try:
            self.cached_analysis = None
            self.last_analysis_time = datetime.min
            print(f"üîÑ Analysis cache refreshed")
        except Exception as e:
            print(f"‚ùå Cache refresh error: {e}")
    
    def is_ready(self) -> bool:
        """‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°"""
        return (
            self.mt5_connector is not None and
            self.mt5_connector.is_connected and
            self.symbol is not None
        )
    
    def get_analyzer_info(self) -> Dict:
        """‚ÑπÔ∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Candlestick Analyzer"""
        return {
            'name': 'Pure Candlestick Analyzer',
            'version': '1.0.0',
            'symbol': self.symbol,
            'timeframe': 'M5',
            'volume_available': self.volume_available,
            'min_candles_required': self.min_candles_required,
            'volume_lookback_periods': self.volume_lookback_periods,
            'doji_threshold': self.doji_threshold,
            'strong_body_threshold': self.strong_body_threshold,
            'cache_duration_seconds': self.cache_duration_seconds
        }

# ==========================================
# üß™ TESTING & VALIDATION
# ==========================================

def test_candlestick_analyzer(mt5_connector, config):
    """üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Candlestick Analyzer"""
    print("üß™ Testing Candlestick Analyzer...")
    print("=" * 50)
    
    analyzer = CandlestickAnalyzer(mt5_connector, config)
    
    if not analyzer.is_ready():
        print("‚ùå Analyzer not ready")
        return
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
    analysis = analyzer.get_current_analysis()
    
    if analysis:
        print("‚úÖ Analysis successful!")
        print(f"   Symbol: {analysis.get('symbol')}")
        print(f"   Close: ${analysis.get('close', 0):.2f}")
        print(f"   Color: {analysis.get('candle_color')}")
        print(f"   Body ratio: {analysis.get('body_ratio', 0):.3f}")
        print(f"   Price direction: {analysis.get('price_direction')}")
        print(f"   Pattern: {analysis.get('pattern_name')}")
        print(f"   Volume available: {analysis.get('volume_available')}")
        print(f"   Analysis strength: {analysis.get('analysis_strength', 0):.2f}")
    else:
        print("‚ùå Analysis failed")
    
    print("=" * 50)
    print("‚úÖ Candlestick Analyzer test completed")