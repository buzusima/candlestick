"""
üïØÔ∏è Smart Candlestick Analyzer - Compatible with Mini Trend System
candlestick_analyzer.py

üîß UPDATED FOR SMART SIGNAL GENERATOR:
‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° candle_timestamp ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö signature
‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° symbol field
‚úÖ ‡∏õ‡∏£‡∏±‡∏ö data format ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö mini trend analysis
‚úÖ ‡∏Ñ‡∏á method names ‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ 100%
‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏° multi-candle support
‚úÖ ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á error handling

üöÄ Features:
‚úÖ OHLC Data Collection & Validation  
‚úÖ Candlestick Pattern Recognition
‚úÖ Volume Analysis with Fallback
‚úÖ Body Ratio & Wick Analysis
‚úÖ Price Direction Detection
‚úÖ Real-time Processing
‚úÖ Signature-based Duplicate Prevention
‚úÖ Mini Trend Data Preparation
"""

import MetaTrader5 as mt5
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple
import time
import statistics

class CandlestickAnalyzer:
    """
    üïØÔ∏è Smart Candlestick Analyzer
    
    ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö Mini Trend Analysis
    ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Smart Signal Generator
    """
    
    def __init__(self, mt5_connector, config: Dict):
        """
        üîß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Smart Candlestick Analyzer
        
        Args:
            mt5_connector: MT5 connection object
            config: ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö
        """
        self.mt5_connector = mt5_connector
        self.config = config
        
        # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        self.symbol = config.get("trading", {}).get("symbol", "XAUUSD.v")
        self.timeframe = mt5.TIMEFRAME_M1
        
        # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ analysis parameters
        self.min_candles_required = 3  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö mini trend
        self.max_candles_lookback = 20
        self.volume_lookback_periods = 10
        
        # Pattern recognition settings
        self.doji_threshold = 0.05
        self.strong_body_threshold = 0.6
        self.hammer_wick_ratio = 2.0
        self.shooting_star_ratio = 2.0
        
        # Volume analysis settings
        self.volume_spike_threshold = 1.5
        self.volume_confirmation_enabled = config.get("volume", {}).get("enabled", True)
        self.volume_fallback_enabled = True
        
        # üîß CACHE MANAGEMENT
        self.last_analysis_time = datetime.min
        self.last_analyzed_candle_time = datetime.min
        self.cache_duration_seconds = 5
        self.cached_analysis = None
        
        # üîß VOLUME TRACKING
        self.volume_available = False
        self.volume_history = []
        self.max_volume_history = 20
        self.avg_volume = 0.0
        
        # üÜï SIGNATURE TRACKING ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö mini trend
        self.processed_signatures = set()
        self.max_signature_history = 500
        
        # üÜï CANDLE STATE TRACKING
        self.last_candle_signature = None
        self.last_processed_candle_time = datetime.min
        self.minimum_time_gap_seconds = 30
        
        # üÜï PERFORMANCE TRACKING
        self.analysis_count = 0
        self.successful_analysis = 0
        self.error_count = 0
        self.avg_analysis_time = 0.0
        
        print(f"üïØÔ∏è Smart Candlestick Analyzer initialized")
        print(f"   Symbol: {self.symbol}")
        print(f"   Timeframe: M1")
        print(f"   Mini trend support: {self.min_candles_required} candles")
        print(f"   Cache duration: {self.cache_duration_seconds}s")
    
    # ==========================================
    # üéØ MAIN ANALYSIS METHOD (‡∏Ñ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏î‡∏¥‡∏°)
    # ==========================================
    
    def get_current_analysis(self) -> Optional[Dict]:
        """
        üéØ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô - Enhanced for Mini Trend
        
        ‡∏Ñ‡∏á‡∏ä‡∏∑‡πà‡∏≠ method ‡πÄ‡∏î‡∏¥‡∏° ‡πÅ‡∏ï‡πà‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Smart Signal Generator
        
        Returns:
            Dict: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå + fields ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö mini trend
        """
        try:
            analysis_start = time.time()
            
            if not self._is_ready_for_analysis():
                return None
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cache (‡πÄ‡∏î‡∏¥‡∏°)
            if self._is_cache_valid():
                return self.cached_analysis
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• candles
            candles_data = self._get_candles_for_analysis()
            if not candles_data or len(candles_data) < self.min_candles_required:
                print(f"‚ùå ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö analysis: {len(candles_data) if candles_data else 0} candles")
                return None
            
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡πÄ‡∏î‡∏¥‡∏° + ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á)
            current_candle = candles_data[-1]  # ‡πÅ‡∏ó‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            analysis_result = self._analyze_single_candle(current_candle, candles_data)
            
            if not analysis_result:
                return None
            
            # üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• meta ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Smart Signal Generator
            analysis_result.update({
                'symbol': self.symbol,
                'timeframe': 'M1',
                'candle_timestamp': int(current_candle['timestamp']),
                'analysis_timestamp': datetime.now(),
                'total_candles_analyzed': len(candles_data),
                'analyzer_version': 'smart_v2.0'
            })
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å cache
            self.cached_analysis = analysis_result
            self.last_analysis_time = datetime.now()
            self.last_analyzed_candle_time = datetime.fromtimestamp(current_candle['timestamp'])
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
            analysis_time = time.time() - analysis_start
            self._update_performance_stats(analysis_time, True)
            
            print(f"üïØÔ∏è Analysis completed for {self.symbol}")
            print(f"   Candle: {analysis_result['candle_color']} body {analysis_result['body_ratio']:.3f}")
            print(f"   Timestamp: {analysis_result['candle_timestamp']}")
            print(f"   Analysis time: {analysis_time*1000:.1f}ms")
            
            return analysis_result
            
        except Exception as e:
            print(f"‚ùå Current analysis error: {e}")
            self._update_performance_stats(0, False)
            return None
    
    # ==========================================
    # üÜï ENHANCED DATA COLLECTION
    # ==========================================
    
    def _get_candles_for_analysis(self) -> Optional[List[Dict]]:
        """
        üîç ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• candles ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö analysis - Enhanced
        
        ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö mini trend analysis
        """
        try:
            if not self.mt5_connector.is_connected:
                print(f"‚ùå MT5 ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠")
                return None
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• rates ‡∏à‡∏≤‡∏Å MT5
            candle_count = max(self.min_candles_required, 5)  # ‡∏î‡∏∂‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 5 ‡πÅ‡∏ó‡πà‡∏á
            rates = mt5.copy_rates_from_pos(self.symbol, self.timeframe, 0, candle_count)
            
            if rates is None:
                print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á rates ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {self.symbol}")
                return None
            
            if len(rates) < self.min_candles_required:
                print(f"‚ùå Rates ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠: {len(rates)} < {self.min_candles_required}")
                return None
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô format ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô - ‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô
            candles = []
            for i, rate in enumerate(rates[:-1]):
                try:
                    candle = {
                        'timestamp': int(rate[0]),  # rates[i][0] = timestamp
                        'open': float(rate[1]),     # rates[i][1] = open
                        'high': float(rate[2]),     # rates[i][2] = high
                        'low': float(rate[3]),      # rates[i][3] = low
                        'close': float(rate[4]),    # rates[i][4] = close
                        'volume': int(rate[5]) if len(rate) > 5 else 0,  # rates[i][5] = volume
                        'real_volume': int(rate[6]) if len(rate) > 6 else 0
                    }
                    
                    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì derived values
                    self._calculate_candle_properties(candle)
                    candles.append(candle)
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è Error processing candle {i}: {e}")
                    continue
            
            if len(candles) < self.min_candles_required:
                print(f"‚ùå Processed closed candles ‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠: {len(candles)}")
                return None
            
            print(f"üïØÔ∏è Successfully processed {len(candles)} CLOSED candles")
            return candles
            
        except Exception as e:
            print(f"‚ùå Get candles error: {e}")
            return None
    
    def _calculate_candle_properties(self, candle: Dict):
        """
        üìê ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏Ç‡∏≠‡∏á‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô - Enhanced
        
        ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà Smart Signal Generator ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
        """
        try:
            open_price = candle['open']
            high_price = candle['high']
            low_price = candle['low']
            close_price = candle['close']
            
            # Basic calculations
            candle['body_size'] = abs(close_price - open_price)
            candle['range_size'] = high_price - low_price
            candle['upper_wick'] = high_price - max(open_price, close_price)
            candle['lower_wick'] = min(open_price, close_price) - low_price
            
            # Ratios
            if candle['range_size'] > 0:
                candle['body_ratio'] = candle['body_size'] / candle['range_size']
                candle['upper_wick_ratio'] = candle['upper_wick'] / candle['range_size']
                candle['lower_wick_ratio'] = candle['lower_wick'] / candle['range_size']
            else:
                candle['body_ratio'] = 0.0
                candle['upper_wick_ratio'] = 0.0
                candle['lower_wick_ratio'] = 0.0
            
            # Candle color ‡πÅ‡∏•‡∏∞ type
            candle['candle_color'] = 'green' if close_price > open_price else 'red'
            candle['is_bullish'] = close_price > open_price
            candle['is_bearish'] = close_price < open_price
            candle['is_doji'] = candle['body_ratio'] < self.doji_threshold
            
            # Price movement info (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Signal Generator)
            candle['price_change'] = close_price - open_price
            candle['price_change_abs'] = abs(candle['price_change'])
            candle['price_change_percent'] = (candle['price_change'] / open_price) * 100 if open_price > 0 else 0
            
            # üÜï ‡πÄ‡∏û‡∏¥‡πà‡∏° fields ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö compatibility
            candle['candle_type'] = self._classify_candle_type(candle)
            
        except Exception as e:
            print(f"‚ùå Calculate candle properties error: {e}")
    
    def _classify_candle_type(self, candle: Dict) -> str:
        """
        üè∑Ô∏è ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô - Enhanced
        """
        try:
            body_ratio = candle['body_ratio']
            upper_wick_ratio = candle['upper_wick_ratio']  
            lower_wick_ratio = candle['lower_wick_ratio']
            is_bullish = candle['is_bullish']
            
            # Doji patterns
            if body_ratio < self.doji_threshold:
                if upper_wick_ratio > 0.4 and lower_wick_ratio > 0.4:
                    return 'long_legged_doji'
                elif upper_wick_ratio > 0.6:
                    return 'dragonfly_doji'
                elif lower_wick_ratio > 0.6:
                    return 'gravestone_doji'
                else:
                    return 'doji'
            
            # Strong body candles
            elif body_ratio > self.strong_body_threshold:
                if is_bullish:
                    return 'strong_bullish'
                else:
                    return 'strong_bearish'
            
            # Hammer patterns  
            elif lower_wick_ratio > self.hammer_wick_ratio * body_ratio and upper_wick_ratio < body_ratio:
                if is_bullish:
                    return 'hammer_bullish'
                else:
                    return 'hammer_bearish'
            
            # Shooting star patterns
            elif upper_wick_ratio > self.shooting_star_ratio * body_ratio and lower_wick_ratio < body_ratio:
                if is_bullish:
                    return 'shooting_star_bullish'
                else:
                    return 'shooting_star_bearish'
            
            # Regular candles
            else:
                if is_bullish:
                    return 'bullish'
                else:
                    return 'bearish'
                    
        except Exception as e:
            print(f"‚ùå Candle classification error: {e}")
            return 'unknown'
    
    def _analyze_single_candle(self, current_candle: Dict, all_candles: List[Dict]) -> Optional[Dict]:
        """
        üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡πÄ‡∏î‡∏µ‡πà‡∏¢‡∏ß - Enhanced with Context
        
        Args:
            current_candle: ‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            all_candles: ‡πÅ‡∏ó‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö context
        """
        try:
            analysis_result = {}
            
            # 1. Basic OHLC data (‡πÄ‡∏î‡∏¥‡∏° + enhanced)
            analysis_result.update({
                'open': current_candle['open'],
                'high': current_candle['high'], 
                'low': current_candle['low'],
                'close': current_candle['close'],
                'volume': current_candle['volume'],
                'timestamp': current_candle['timestamp']
            })
            
            # 2. Calculated properties (‡πÄ‡∏î‡∏¥‡∏°)
            analysis_result.update({
                'body_size': current_candle['body_size'],
                'range_size': current_candle['range_size'],
                'body_ratio': current_candle['body_ratio'],
                'upper_wick': current_candle['upper_wick'],
                'lower_wick': current_candle['lower_wick'],
                'upper_wick_ratio': current_candle['upper_wick_ratio'],
                'lower_wick_ratio': current_candle['lower_wick_ratio']
            })
            
            # 3. Candle classification (‡πÄ‡∏î‡∏¥‡∏°)
            analysis_result.update({
                'candle_color': current_candle['candle_color'],
                'candle_type': current_candle['candle_type'],
                'is_bullish': current_candle['is_bullish'],
                'is_bearish': current_candle['is_bearish'],
                'is_doji': current_candle['is_doji']
            })
            
            # 4. Price direction analysis (‡πÄ‡∏î‡∏¥‡∏° + enhanced)
            if len(all_candles) >= 2:
                previous_candle = all_candles[-2]
                analysis_result.update({
                    'previous_close': previous_candle['close'],
                    'previous_open': previous_candle['open'],
                    'close_vs_previous': 'higher' if current_candle['close'] > previous_candle['close'] else 'lower',
                    'price_direction': 'higher_close' if current_candle['close'] > previous_candle['close'] else 'lower_close',
                    'price_change_from_previous': current_candle['close'] - previous_candle['close'],
                    'price_change_points': abs(current_candle['close'] - previous_candle['close'])
                })
            else:
                analysis_result.update({
                    'previous_close': current_candle['close'],
                    'close_vs_previous': 'same',
                    'price_direction': 'neutral',
                    'price_change_from_previous': 0,
                    'price_change_points': 0
                })
            
            # 5. Volume analysis (‡πÄ‡∏î‡∏¥‡∏° + enhanced)
            volume_analysis = self._analyze_volume(current_candle, all_candles)
            analysis_result.update(volume_analysis)
            
            # 6. üÜï Multi-candle context ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Mini Trend
            context_analysis = self._analyze_multi_candle_context(all_candles)
            analysis_result.update(context_analysis)
            
            # 7. üÜï Market condition assessment
            market_condition = self._assess_market_condition(all_candles)
            analysis_result.update(market_condition)
            
            # 8. Analysis metadata
            analysis_result.update({
                'analysis_quality': self._calculate_analysis_quality(all_candles),
                'analysis_timestamp': datetime.now(),
                'candles_used_count': len(all_candles)
            })
            
            self.successful_analysis += 1
            
            return analysis_result
            
        except Exception as e:
            print(f"‚ùå Single candle analysis error: {e}")
            self.error_count += 1
            return None
    
    # ==========================================
    # üÜï MULTI-CANDLE ANALYSIS ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö MINI TREND
    # ==========================================
    
    def _analyze_multi_candle_context(self, candles: List[Dict]) -> Dict:
        """
        üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå context ‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏ó‡πà‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Mini Trend
        
        Args:
            candles: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            
        Returns:
            Dict: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• context ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö mini trend analysis
        """
        try:
            if len(candles) < 3:
                return {'multi_candle_context': 'insufficient_data'}
            
            # ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà 3 ‡πÅ‡∏ó‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö mini trend
            recent_3_candles = candles[-3:]
            
            # ‡∏ô‡∏±‡∏ö‡∏™‡∏µ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
            colors = [candle['candle_color'] for candle in recent_3_candles]
            green_count = colors.count('green')
            red_count = colors.count('red')
            
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå pattern
            pattern_analysis = {
                'recent_3_candles_colors': colors,
                'green_count_in_3': green_count,
                'red_count_in_3': red_count,
                'dominant_color': 'green' if green_count > red_count else 'red' if red_count > green_count else 'mixed',
                'trend_consistency': max(green_count, red_count) / 3.0
            }
            
            # ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç mini trend
            current_color = recent_3_candles[-1]['candle_color']
            current_body_ratio = recent_3_candles[-1]['body_ratio']
            min_body_ratio = self.config.get("smart_entry_rules", {}).get("mini_trend", {}).get("min_body_ratio", 0.05)
            
            # Mini trend signals
            mini_trend_signals = {}
            
            # BUY condition: ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß 2 ‡πÉ‡∏ô 3 + ‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß + body >= 5%
            if green_count >= 2 and current_color == 'green' and current_body_ratio >= min_body_ratio:
                mini_trend_signals['buy_mini_trend_detected'] = True
                mini_trend_signals['buy_trend_strength'] = self._calculate_mini_trend_strength(recent_3_candles, 'bullish')
                print(f"üü¢ Mini trend BUY detected: {colors}")
            else:
                mini_trend_signals['buy_mini_trend_detected'] = False
            
            # SELL condition: ‡πÅ‡∏î‡∏á 2 ‡πÉ‡∏ô 3 + ‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏î‡∏á + body >= 5%  
            if red_count >= 2 and current_color == 'red' and current_body_ratio >= min_body_ratio:
                mini_trend_signals['sell_mini_trend_detected'] = True
                mini_trend_signals['sell_trend_strength'] = self._calculate_mini_trend_strength(recent_3_candles, 'bearish')
                print(f"üî¥ Mini trend SELL detected: {colors}")
            else:
                mini_trend_signals['sell_mini_trend_detected'] = False
            
            # ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            return {
                'multi_candle_context': pattern_analysis,
                'mini_trend_signals': mini_trend_signals
            }
            
        except Exception as e:
            print(f"‚ùå Multi-candle context error: {e}")
            return {'multi_candle_context': 'error'}
    
    def _calculate_mini_trend_strength(self, candles: List[Dict], direction: str) -> float:
        """
        üí™ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡∏Ç‡∏≠‡∏á mini trend
        """
        try:
            if len(candles) < 3:
                return 0.5
            
            strength = 0.5  # Base strength
            
            # 1. Consistency factor (‡πÅ‡∏ó‡πà‡∏á‡∏™‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÄ‡∏¢‡∏≠‡∏∞ = ‡πÅ‡∏£‡∏á)
            target_color = 'green' if direction == 'bullish' else 'red'
            same_color_count = sum(1 for c in candles if c['candle_color'] == target_color)
            consistency_factor = same_color_count / len(candles)
            strength += consistency_factor * 0.3
            
            # 2. Body size factor (‡πÅ‡∏ó‡πà‡∏á‡πÉ‡∏´‡∏ç‡πà = ‡πÅ‡∏£‡∏á)
            avg_body_ratio = sum(c['body_ratio'] for c in candles) / len(candles)
            body_factor = min(avg_body_ratio * 2, 0.2)
            strength += body_factor
            
            # 3. Price movement factor
            total_movement = abs(candles[-1]['close'] - candles[0]['open'])
            movement_factor = min(total_movement / 2.0, 0.2)  # ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î +0.2
            strength += movement_factor
            
            return round(min(strength, 1.0), 3)
            
        except Exception as e:
            print(f"‚ùå Mini trend strength error: {e}")
            return 0.5
    
    # ==========================================
    # üîß VOLUME ANALYSIS (‡πÄ‡∏î‡∏¥‡∏° + ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á)
    # ==========================================
    
    def _analyze_volume(self, current_candle: Dict, all_candles: List[Dict]) -> Dict:
        """
        üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå volume - Enhanced with better fallback
        """
        try:
            volume_result = {
                'volume_available': False,
                'volume_factor': 1.0,
                'volume_analysis': 'unavailable',
                'avg_volume': 0
            }
            
            current_volume = current_candle.get('volume', 0)
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ volume data ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
            if current_volume > 0 and len(all_candles) >= 5:
                
                # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì average volume
                volumes = [c.get('volume', 0) for c in all_candles[-10:] if c.get('volume', 0) > 0]
                
                if volumes and len(volumes) >= 3:
                    avg_volume = statistics.mean(volumes)
                    self.avg_volume = avg_volume
                    self.volume_available = True
                    
                    volume_factor = current_volume / avg_volume if avg_volume > 0 else 1.0
                    
                    # Volume classification
                    if volume_factor >= self.volume_spike_threshold:
                        volume_analysis = 'high'
                    elif volume_factor >= 1.2:
                        volume_analysis = 'above_average' 
                    elif volume_factor <= 0.8:
                        volume_analysis = 'below_average'
                    else:
                        volume_analysis = 'normal'
                    
                    volume_result.update({
                        'volume_available': True,
                        'volume_factor': round(volume_factor, 2),
                        'volume_analysis': volume_analysis,
                        'avg_volume': round(avg_volume, 0)
                    })
                    
                    print(f"üìä Volume: {current_volume:,} (avg: {avg_volume:,.0f}, factor: {volume_factor:.2f})")
                
            else:
                # Volume fallback - ‡πÉ‡∏ä‡πâ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏•‡∏∞ range ‡πÅ‡∏ó‡∏ô
                if self.volume_fallback_enabled:
                    volume_result.update({
                        'volume_available': False,
                        'volume_factor': self._estimate_volume_from_price_action(current_candle, all_candles),
                        'volume_analysis': 'estimated_from_price',
                        'avg_volume': 0
                    })
                    print(f"üìä Volume fallback used")
            
            return volume_result
            
        except Exception as e:
            print(f"‚ùå Volume analysis error: {e}")
            return {
                'volume_available': False,
                'volume_factor': 1.0,
                'volume_analysis': 'error',
                'avg_volume': 0
            }
    
    def _estimate_volume_from_price_action(self, current_candle: Dict, all_candles: List[Dict]) -> float:
        """
        üìä ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì volume ‡∏à‡∏≤‡∏Å price action ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ volume data
        """
        try:
            # ‡πÉ‡∏ä‡πâ range size ‡πÅ‡∏•‡∏∞ body ratio ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÅ‡∏ó‡∏ô
            range_size = current_candle['range_size']
            body_ratio = current_candle['body_ratio']
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì average range ‡∏à‡∏≤‡∏Å‡πÅ‡∏ó‡πà‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
            recent_ranges = [c['range_size'] for c in all_candles[-5:]]
            avg_range = statistics.mean(recent_ranges) if recent_ranges else range_size
            
            # ‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì volume factor
            range_factor = range_size / avg_range if avg_range > 0 else 1.0
            body_factor = min(body_ratio * 2, 1.5)  # ‡πÅ‡∏ó‡πà‡∏á‡πÉ‡∏´‡∏ç‡πà = volume ‡πÄ‡∏¢‡∏≠‡∏∞
            
            estimated_factor = (range_factor + body_factor) / 2
            return round(max(0.5, min(estimated_factor, 2.0)), 2)
            
        except Exception as e:
            return 1.0
    
    # ==========================================
    # üÜï MARKET CONDITION ASSESSMENT
    # ==========================================
    
    def _assess_market_condition(self, candles: List[Dict]) -> Dict:
        """
        üåç ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏†‡∏≤‡∏ß‡∏∞‡∏ï‡∏•‡∏≤‡∏î - ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Smart Decision Making
        """
        try:
            condition_result = {
                'market_condition': 'unknown',
                'volatility_level': 'medium',
                'trend_direction': 'sideways',
                'session_info': {}
            }
            
            if len(candles) < 5:
                return condition_result
            
            # 1. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå volatility
            recent_ranges = [c['range_size'] for c in candles[-5:]]
            avg_range = statistics.mean(recent_ranges)
            current_range = candles[-1]['range_size']
            
            volatility_ratio = current_range / avg_range if avg_range > 0 else 1.0
            
            if volatility_ratio >= 2.0:
                volatility_level = 'very_high'
            elif volatility_ratio >= 1.5:
                volatility_level = 'high'
            elif volatility_ratio >= 1.2:
                volatility_level = 'above_normal'
            elif volatility_ratio <= 0.6:
                volatility_level = 'low' 
            else:
                volatility_level = 'normal'
            
            # 2. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå trend direction
            closes = [c['close'] for c in candles[-5:]]
            if len(closes) >= 2:
                overall_change = closes[-1] - closes[0]
                if abs(overall_change) < avg_range * 0.5:
                    trend_direction = 'sideways'
                elif overall_change > 0:
                    trend_direction = 'uptrend'
                else:
                    trend_direction = 'downtrend'
            
            # 3. Session information  
            session_info = self._detect_trading_session(datetime.now())
            
            condition_result.update({
                'volatility_level': volatility_level,
                'volatility_ratio': round(volatility_ratio, 2),
                'trend_direction': trend_direction,
                'session_info': session_info,
                'market_condition': f"{volatility_level}_{trend_direction}"
            })
            
            return condition_result
            
        except Exception as e:
            print(f"‚ùå Market condition assessment error: {e}")
            return {'market_condition': 'error'}
    
    def _detect_trading_session(self, current_time: datetime) -> Dict:
        """üåç ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö trading session"""
        try:
            hour = current_time.hour
            
            if 1 <= hour < 9:
                session = 'asian'
                activity = 'medium'
            elif 9 <= hour < 17:
                session = 'london'
                activity = 'high'
            elif 17 <= hour <= 23:
                session = 'newyork'
                activity = 'high'
            else:
                session = 'quiet'
                activity = 'low'
            
            # Overlap detection
            overlap = None
            if 9 <= hour < 11:
                overlap = 'london_asian'
            elif 17 <= hour < 19:
                overlap = 'london_newyork'
            
            return {
                'trading_session': session,
                'session_activity': activity,
                'session_overlap': overlap,
                'current_hour': hour
            }
            
        except Exception as e:
            return {'trading_session': 'unknown', 'session_activity': 'medium'}
    
    # ==========================================
    # üîß UTILITY METHODS (‡πÄ‡∏î‡∏¥‡∏° + ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á)
    # ==========================================
    
    def _is_ready_for_analysis(self) -> bool:
        """‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö analysis"""
        try:
            if not self.mt5_connector or not self.mt5_connector.is_connected:
                print(f"‚ùå MT5 not connected")
                return False
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö symbol
            symbol_info = mt5.symbol_info(self.symbol)
            if symbol_info is None:
                print(f"‚ùå Symbol {self.symbol} not found")
                return False
            
            if not symbol_info.visible:
                print(f"üìä Symbol ‡πÑ‡∏°‡πà visible - attempting to select...")
                if not mt5.symbol_select(self.symbol, True):
                    print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ select symbol {self.symbol}")
                    return False
                print(f"‚úÖ Symbol selected successfully")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Readiness check error: {e}")
            return False
    
    def _is_cache_valid(self) -> bool:
        """‚è∞ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cache validity"""
        try:
            if not self.cached_analysis:
                return False
            
            time_diff = (datetime.now() - self.last_analysis_time).total_seconds()
            return time_diff < self.cache_duration_seconds
            
        except Exception:
            return False
    
    def _update_performance_stats(self, analysis_time: float, success: bool):
        """üìä ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"""
        try:
            self.analysis_count += 1
            
            if success:
                self.successful_analysis += 1
                
                # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó average analysis time
                if self.avg_analysis_time == 0:
                    self.avg_analysis_time = analysis_time
                else:
                    self.avg_analysis_time = (self.avg_analysis_time * 0.9) + (analysis_time * 0.1)
            else:
                self.error_count += 1
                
        except Exception as e:
            print(f"‚ùå Performance stats update error: {e}")
    
    def _calculate_analysis_quality(self, candles: List[Dict]) -> float:
        """üéØ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"""
        try:
            quality_score = 0.5
            
            # Data quantity factor
            data_factor = min(len(candles) / 10.0, 1.0)
            quality_score += data_factor * 0.2
            
            # Volume availability
            if self.volume_available:
                quality_score += 0.1
            
            # Success rate factor
            if self.analysis_count > 0:
                success_rate = self.successful_analysis / self.analysis_count
                quality_score += success_rate * 0.2
            
            return round(min(quality_score, 1.0), 3)
            
        except Exception as e:
            return 0.5
    
    # ==========================================
    # üîß MAINTENANCE & INFO METHODS (‡πÄ‡∏î‡∏¥‡∏°)
    # ==========================================
    
    def clear_cache(self):
        """üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á cache"""
        self.cached_analysis = None
        self.last_analysis_time = datetime.min
        print(f"üóëÔ∏è Analysis cache cleared")
    
    def get_analysis_statistics(self) -> Dict:
        """üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"""
        try:
            return {
                'total_analysis': self.analysis_count,
                'successful_analysis': self.successful_analysis,
                'error_count': self.error_count,
                'success_rate': self.successful_analysis / max(self.analysis_count, 1),
                'avg_analysis_time_ms': round(self.avg_analysis_time * 1000, 2),
                'volume_available': self.volume_available,
                'processed_signatures_count': len(self.processed_signatures)
            }
        except Exception as e:
            return {'error': str(e)}
    
    def is_ready(self) -> bool:
        """‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°"""
        return (
            self.mt5_connector is not None and
            self.mt5_connector.is_connected and
            self.symbol is not None
        )
    
    def get_analyzer_info(self) -> Dict:
        """‚ÑπÔ∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Analyzer"""
        return {
            'name': 'Smart Candlestick Analyzer',
            'version': '3.0.0-SmartFreq', 
            'symbol': self.symbol,
            'timeframe': 'M1',
            'features': [
                'Multi-candle Analysis',
                'Mini Trend Detection', 
                'Volume Analysis with Fallback',
                'Market Condition Assessment',
                'Real-time Processing',
                'Smart Caching System'
            ],
            'status': {
                'ready': self.is_ready(),
                'volume_available': self.volume_available,
                'cache_valid': self._is_cache_valid()
            },
            'statistics': self.get_analysis_statistics()
        }