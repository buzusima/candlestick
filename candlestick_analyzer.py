"""
üïØÔ∏è Pure Candlestick Analyzer (FIXED OHLC)
candlestick_analyzer.py

üîß FIXED ISSUES:
‚úÖ numpy.void object 'get' method error
‚úÖ Proper OHLC data extraction from MT5
‚úÖ Volume data handling
‚úÖ Error handling for missing data

üöÄ Features:
‚úÖ OHLC Data Collection
‚úÖ Candlestick Pattern Recognition
‚úÖ Volume Analysis (with fallback)
‚úÖ Body Ratio Calculation
‚úÖ Price Direction Detection
‚úÖ Basic Pattern Classification
"""

import MetaTrader5 as mt5
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
import time

class CandlestickAnalyzer:
    """
    üïØÔ∏è Pure Candlestick Analyzer (FIXED VERSION)
    
    ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
    ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤ patterns ‡πÅ‡∏•‡∏∞ signals ‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏ñ‡∏∑‡∏≠‡πÑ‡∏î‡πâ
    """
    
    def __init__(self, mt5_connector, config: Dict):
        """
        üîß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Candlestick Analyzer - COMPLETELY FIXED
        
        üöÄ Fixed Issues:
        - Invalid time order detection
        - Proper duplicate prevention
        - Real-time candle processing
        - Memory management
        """
        self.mt5_connector = mt5_connector
        self.config = config
        
        # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        self.symbol = config.get("trading", {}).get("symbol", "XAUUSD.v")
        self.timeframe = mt5.TIMEFRAME_M1
        
        # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ analysis parameters
        self.min_candles_required = 3  # ‡∏•‡∏î‡∏à‡∏≤‡∏Å 20 ‡πÄ‡∏õ‡πá‡∏ô 3 (‡πÉ‡∏ä‡πâ‡πÅ‡∏Ñ‡πà 3 ‡πÅ‡∏ó‡πà‡∏á)
        self.volume_lookback_periods = 10
        
        # Pattern recognition settings
        self.doji_threshold = 0.05
        self.strong_body_threshold = 0.6
        
        # üîß CACHE MANAGEMENT - ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞ real-time
        self.last_analysis_time = datetime.min
        self.last_analyzed_candle_time = datetime.min
        self.cache_duration_seconds = 2   # ‡∏•‡∏î‡πÄ‡∏´‡∏•‡∏∑‡∏≠ 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÄ‡∏û‡∏∑‡πà‡∏≠ real-time
        self.cached_analysis = None
        
        # üîß VOLUME TRACKING
        self.volume_available = False
        self.volume_history = []
        self.max_volume_history = 20
        
        # üÜï STRICT SIGNATURE TRACKING
        self.processed_signatures = set()
        self.max_signature_history = 500  # ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô 500 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û
        
        # üÜï CANDLE STATE TRACKING  
        self.last_candle_signature = None
        self.last_processed_candle_time = datetime.min
        self.minimum_time_gap_seconds = 10  # üîß ‡πÉ‡∏´‡∏°‡πà: ‡∏ï‡πâ‡∏≠‡∏á‡∏´‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
        
        # üÜï PERFORMANCE COUNTERS
        self.analysis_count = 0
        self.duplicate_blocks = 0
        self.successful_analysis = 0
        self.time_order_errors = 0        # üÜï ‡∏ô‡∏±‡∏ö time order errors
        self.invalid_data_errors = 0      # üÜï ‡∏ô‡∏±‡∏ö invalid data errors
        
        # üÜï DATA VALIDATION FLAGS
        self.strict_time_checking = True   # ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏ß‡∏•‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î
        self.allow_same_minute_candles = False  # ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‡πÉ‡∏ô‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô
        
        # üîß PERSISTENCE INTEGRATION
        self.persistence_manager = None
        
        # üÜï REAL-TIME PROCESSING FLAGS
        self.real_time_mode = True         # ‡πÇ‡∏´‡∏°‡∏î real-time
        self.force_sequential_processing = True  # ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏ï‡∏≤‡∏°‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
           
        # üíæ NEW: State Management ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö Reference Candle
        self.reference_candle = None           # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á
        self.reference_timestamp = 0           # timestamp ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ó‡πà‡∏á‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á  
        self.waiting_for_new_candle = False    # ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏£‡∏≠‡πÅ‡∏ó‡πà‡∏á‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        self.last_checked_timestamp = 0 
        
        self.price_history = []        # ‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
        self.high_low_levels = {}      # ‡πÄ‡∏Å‡πá‡∏ö high/low ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ô‡∏≤‡∏ó‡∏µ
        self.last_minute_processed = ""  # ‡∏ô‡∏≤‡∏ó‡∏µ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
        self.current_minute_data = {    # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏≤‡∏ó‡∏µ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            'high': 0,
            'low': 999999,
            'open': 0,
            'close': 0,
            'tick_count': 0
        }

        # print(f"üïØÔ∏è COMPLETELY FIXED Candlestick Analyzer for {self.symbol}")
        # print(f"   Real-time mode: {self.real_time_mode}")
        # print(f"   Cache duration: {self.cache_duration_seconds}s")
        # print(f"   Min time gap: {self.minimum_time_gap_seconds}s")
        # print(f"   Strict time checking: {self.strict_time_checking}")
        # print(f"   Sequential processing: {self.force_sequential_processing}")
        # print(f"   Max signatures: {self.max_signature_history}")
        # print(f"   Duplicate prevention: ULTRA STRICT")
        # print(f"   üéØ Ready for breakout/breakdown detection")

                    

    def get_current_analysis(self) -> Optional[Dict]:
        """
        üéØ SIMPLE METHOD: ‡∏™‡∏£‡πâ‡∏≤‡∏á OHLC ‡πÄ‡∏≠‡∏á ‡∏à‡∏≤‡∏Å tick ‡πÑ‡∏°‡πà‡∏û‡∏∂‡πà‡∏á rates
        
        ‚úÖ Logic ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏á‡πà‡∏≤‡∏¢:
        1. ‡πÄ‡∏Å‡πá‡∏ö tick ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        2. ‡∏™‡∏£‡πâ‡∏≤‡∏á OHLC ‡∏Ç‡∏≠‡∏á‡∏ô‡∏≤‡∏ó‡∏µ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
        3. ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ô‡∏≤‡∏ó‡∏µ‡πÉ‡∏´‡∏°‡πà ‚Üí ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô
        4. ‡∏ñ‡πâ‡∏≤‡∏ï‡∏£‡∏á‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç ‚Üí ‡∏™‡πà‡∏á Signal
        """
        try:
            if not self.mt5_connector.is_connected:
                return None

            # 1. ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            tick = mt5.symbol_info_tick(self.symbol)
            if tick is None:
                print("‚ùå Cannot get current tick")
                return None
            
            current_price = float(tick.bid)
            tick_time = datetime.fromtimestamp(tick.time)
            current_minute = tick_time.strftime('%H:%M')
            
            print(f"\nüéØ === SIMPLE TICK-BASED ANALYSIS ===")
            print(f"üïê Current time: {tick_time.strftime('%H:%M:%S')}")
            print(f"üí∞ Current price: ${current_price:.4f}")
            print(f"üìÖ Current minute: {current_minute}")
            
            # 2. ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó OHLC ‡∏Ç‡∏≠‡∏á‡∏ô‡∏≤‡∏ó‡∏µ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            if current_minute != self.last_minute_processed:
                # üÜï ‡∏ô‡∏≤‡∏ó‡∏µ‡πÉ‡∏´‡∏°‡πà - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà
                
                if self.last_minute_processed:  # ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô
                    # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏≤‡∏ó‡∏µ‡∏ó‡∏µ‡πà‡∏ú‡πà‡∏≤‡∏ô‡∏°‡∏≤
                    self.high_low_levels[self.last_minute_processed] = {
                        'high': self.current_minute_data['high'],
                        'low': self.current_minute_data['low'],
                        'open': self.current_minute_data['open'], 
                        'close': self.current_minute_data['close'],
                        'tick_count': self.current_minute_data['tick_count']
                    }
                    
                    print(f"üíæ SAVED PREVIOUS MINUTE: {self.last_minute_processed}")
                    print(f"   üìà High: ${self.current_minute_data['high']:.4f}")
                    print(f"   üìâ Low:  ${self.current_minute_data['low']:.4f}")
                    print(f"   üìä Close: ${self.current_minute_data['close']:.4f}")
                    print(f"   üéØ Ticks: {self.current_minute_data['tick_count']}")
                
                # ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ô‡∏≤‡∏ó‡∏µ‡πÉ‡∏´‡∏°‡πà
                self.current_minute_data = {
                    'high': current_price,
                    'low': current_price,
                    'open': current_price,
                    'close': current_price,
                    'tick_count': 1
                }
                
                print(f"üÜï STARTED NEW MINUTE: {current_minute}")
                print(f"   Opening price: ${current_price:.4f}")
                
                # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô ‚Üí ‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ô
                if self.last_minute_processed in self.high_low_levels:
                    return self._check_breakout_conditions(current_minute)
                
                self.last_minute_processed = current_minute
                return None
                
            else:
                # üîÑ ‡∏ô‡∏≤‡∏ó‡∏µ‡πÄ‡∏î‡∏¥‡∏° - ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó OHLC
                self.current_minute_data['high'] = max(self.current_minute_data['high'], current_price)
                self.current_minute_data['low'] = min(self.current_minute_data['low'], current_price)
                self.current_minute_data['close'] = current_price
                self.current_minute_data['tick_count'] += 1
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏≤‡∏ó‡∏µ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
                print(f"üîÑ UPDATING MINUTE: {current_minute}")
                print(f"   üìà High: ${self.current_minute_data['high']:.4f}")
                print(f"   üìâ Low:  ${self.current_minute_data['low']:.4f}")
                print(f"   üìä Current: ${current_price:.4f}")
                print(f"   üéØ Ticks: {self.current_minute_data['tick_count']}")
                
                return None  # ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏™‡∏£‡πá‡∏à
            
        except Exception as e:
            print(f"‚ùå Simple analysis error: {e}")
            return None

    def _check_breakout_conditions(self, current_minute: str) -> Optional[Dict]:
        """
        üéØ ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç Breakout ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö
        """
        try:
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
            prev_minute_data = self.high_low_levels[self.last_minute_processed]
            
            # ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô (Close ‡∏à‡∏£‡∏¥‡∏á)
            prev_close = prev_minute_data['close']
            prev_high = prev_minute_data['high'] 
            prev_low = prev_minute_data['low']
            
            # ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡∏Ç‡∏≠‡∏á‡∏ô‡∏≤‡∏ó‡∏µ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            current_open = self.current_minute_data['open']
            
            print(f"üî• === BREAKOUT CHECK ===")
            print(f"üìä PREVIOUS MINUTE ({self.last_minute_processed}):")
            print(f"   üìà High: ${prev_high:.4f}")
            print(f"   üìâ Low:  ${prev_low:.4f}")
            print(f"   üìä Close: ${prev_close:.4f}")
            print(f"")
            print(f"üìä NEW MINUTE ({current_minute}):")
            print(f"   üìä Open: ${current_open:.4f}")
            print(f"")
            print(f"üî• COMPARISON:")
            print(f"   New Open: ${current_open:.4f}")
            print(f"   vs Previous High: ${prev_high:.4f}")
            print(f"   vs Previous Low:  ${prev_low:.4f}")
            
            # ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç Gap
            tolerance = 0.01
            is_gap_up = current_open > (prev_high + tolerance)
            is_gap_down = current_open < (prev_low - tolerance)
            
            print(f"")
            print(f"üéØ GAP CONDITIONS:")
            print(f"   üü¢ BUY (Gap Up):   ${current_open:.4f} > ${prev_high + tolerance:.4f} = {is_gap_up}")
            print(f"   üî¥ SELL (Gap Down): ${current_open:.4f} < ${prev_low - tolerance:.4f} = {is_gap_down}")
            
            if not (is_gap_up or is_gap_down):
                print("‚è≥ No gap detected - normal continuation")
                return None
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á signature
            signature = f"GAP_{current_minute.replace(':', '')}_{current_open:.1f}"
            
            # ‡πÄ‡∏ä‡πá‡∏Ñ duplicate
            if hasattr(self, 'processed_signatures') and signature in self.processed_signatures:
                print(f"üö´ DUPLICATE GAP BLOCKED: {signature}")
                return None
            
            # Lock
            if not hasattr(self, 'processed_signatures'):
                self.processed_signatures = set()
            self.processed_signatures.add(signature)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á
            if is_gap_up:
                signal_type = 'BUY'
                amount = current_open - prev_high
            else:
                signal_type = 'SELL'
                amount = prev_low - current_open
            
            strength = min(0.8 + (amount / 2.0), 1.0)
            
            print(f"")
            print(f"üéâ GAP SIGNAL CONFIRMED:")
            print(f"   üéØ Type: {signal_type}")
            print(f"   üí∞ Gap Amount: {amount:.4f}")
            print(f"   üí™ Strength: {strength:.3f}")
            print(f"   üîí Signature: {signature}")
            print("=" * 60)
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó tracking
            self.last_minute_processed = current_minute
            
            return {
                'symbol': self.symbol,
                'timestamp': datetime.now(),
                'candle_signature': signature,
                'candle_timestamp': int(time.time()),
                
                'close': current_open,           # ‡πÉ‡∏ä‡πâ Open ‡∏Ç‡∏≠‡∏á‡∏ô‡∏≤‡∏ó‡∏µ‡πÉ‡∏´‡∏°‡πà
                'previous_high': prev_high,
                'previous_low': prev_low,
                'previous_close': prev_close,
                
                'open': current_open,
                'high': current_open,  # ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ high ‡∏Ç‡∏≠‡∏á‡∏ô‡∏≤‡∏ó‡∏µ‡πÉ‡∏´‡∏°‡πà
                'low': current_open,   # ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ low ‡∏Ç‡∏≠‡∏á‡∏ô‡∏≤‡∏ó‡∏µ‡πÉ‡∏´‡∏°‡πà
                
                'breakout_detected': is_gap_up,
                'breakdown_detected': is_gap_down,
                'breakout_amount': amount if is_gap_up else 0,
                'breakdown_amount': amount if is_gap_down else 0,
                
                'candle_color': 'green' if is_gap_up else 'red',
                'body_ratio': 0.8,  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏á‡∏ó‡∏µ‡πà
                'signal_strength': strength,
                'analysis_method': 'simple_tick_based_gap_detection'
            }
            
        except Exception as e:
            print(f"‚ùå Breakout check error: {e}")
            return None
        
    def get_reference_info(self) -> Dict:
        """üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Reference Candle ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        if self.reference_candle:
            return {
                'has_reference': True,
                'reference_time': self.reference_candle['time'].strftime('%H:%M:%S'),
                'reference_high': self.reference_candle['high'],
                'reference_low': self.reference_candle['low'],
                'waiting_for_new': self.waiting_for_new_candle,
                'last_checked': self.last_checked_timestamp
            }
        else:
            return {'has_reference': False}

    def reset_reference_state(self):
        """üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï Reference State (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug)"""
        self.reference_candle = None
        self.reference_timestamp = 0
        self.waiting_for_new_candle = False
        self.last_checked_timestamp = 0
        print("üîÑ Reference state reset")
                                                                                                                                            
    def _is_signature_processed(self, signature: str) -> bool:
        """
        üîí STRICT: ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÅ‡∏ó‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
        ‡∏ñ‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß = ‡∏ö‡∏•‡πá‡∏≠‡∏Å‡∏ï‡∏•‡∏≠‡∏î‡πÑ‡∏õ (‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏£‡∏∞‡∏ö‡∏ö)
        """
        try:
            is_processed = signature in self.processed_signatures
            
            if is_processed:
                print(f"üö´ PERMANENTLY BLOCKED: ‡πÅ‡∏ó‡πà‡∏á‡∏ô‡∏µ‡πâ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß")
                return True
            else:
                print(f"‚úÖ NEW CANDLE: ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•")
                return False
                
        except Exception as e:
            print(f"Signature check error: {e}")
            return False

    def _mark_signature_processed(self, signature: str):
        """
        üîí FIXED: ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏ó‡πà‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß - ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î
        
        Args:
            signature: ‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
        """
        try:
            if not hasattr(self, 'processed_signatures'):
                self.processed_signatures = set()
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡πÉ‡∏´‡∏°‡πà
            self.processed_signatures.add(signature)
            
            # üîß CLEANUP: ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô memory leak
            if len(self.processed_signatures) > 1000:
                # ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà 800 ‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                signatures_list = list(self.processed_signatures)
                # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° timestamp (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
                try:
                    signatures_list.sort(key=lambda x: self._extract_timestamp_from_signature(x))
                    # ‡πÄ‡∏Å‡πá‡∏ö 800 ‡∏ï‡∏±‡∏ß‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                    self.processed_signatures = set(signatures_list[-800:])
                    print(f"üßπ Cleaned signature history: kept 800 most recent")
                except:
                    # ‡∏ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡∏•‡∏ö‡πÅ‡∏ö‡∏ö‡∏™‡∏∏‡πà‡∏°
                    self.processed_signatures = set(signatures_list[-800:])
            
            print(f"üîí PROCESSED: {signature}")
            print(f"üìä Total signatures: {len(self.processed_signatures)}")
            
            # üÜï ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á persistence (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
            if hasattr(self, 'persistence_manager') and self.persistence_manager:
                self.persistence_manager.save_processed_signatures(self.processed_signatures)
                
        except Exception as e:
            print(f"‚ùå Mark signature error: {e}")

    def _extract_timestamp_from_signature(self, signature: str) -> float:
        """
        üîß ‡∏î‡∏∂‡∏á timestamp ‡∏à‡∏≤‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô - IMPROVED
        
        Args:
            signature: ‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö "CANDLE_timestamp_..."
            
        Returns:
            float: timestamp ‡∏´‡∏£‡∏∑‡∏≠ 0 ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏ö
        """
        try:
            # ‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö "CANDLE_1756313664_3377.75_..."
            parts = signature.split('_')
            if len(parts) >= 2 and parts[0] == 'CANDLE':
                return float(parts[1])
            
            # ‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏Å‡πà‡∏≤ "CORRECT_timestamp_..."  
            elif len(parts) >= 2 and parts[0] == 'CORRECT':
                return float(parts[1])
            
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ‡πÉ‡∏ä‡πâ current time
            return datetime.now().timestamp()
            
        except (ValueError, IndexError):
            return datetime.now().timestamp()
            

    def _analyze_candlestick(self, current: Dict, previous: Dict) -> Dict:
        """
        üïØÔ∏è ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô - IMPROVED WITH FIXED DATA
        """
        try:
            # üîß FIXED: ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
            o, h, l, c = current['open'], current['high'], current['low'], current['close']
            prev_close = previous['close']
            prev_open = previous['open']
            prev_high = previous['high']
            prev_low = previous['low']
            
            print(f"üïØÔ∏è === CANDLESTICK ANALYSIS (FIXED) ===")
            print(f"   Current OHLC: {o:.4f}/{h:.4f}/{l:.4f}/{c:.4f}")
            print(f"   Previous OHLC: {prev_open:.4f}/{prev_high:.4f}/{prev_low:.4f}/{prev_close:.4f}")
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡πà‡∏≤‡∏á‡πÜ
            candle_range = h - l
            body_size = abs(c - o)
            
            # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô division by zero
            body_ratio = body_size / candle_range if candle_range > 0.0001 else 0
            
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
            price_threshold = 0.0001  # threshold ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥
            
            if c > o + price_threshold:
                candle_color = 'green'  # bullish
            elif c < o - price_threshold:
                candle_color = 'red'    # bearish
            else:
                candle_color = 'doji'   # ‡πÄ‡∏Å‡∏∑‡∏≠‡∏ö‡πÄ‡∏ó‡πà‡∏≤‡∏Å‡∏±‡∏ô
            
            # ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡πÅ‡∏ó‡πà‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
            price_change = c - prev_close
            if abs(price_change) < price_threshold:
                price_direction = 'same_close'
            elif price_change > 0:
                price_direction = 'higher_close'
            else:
                price_direction = 'lower_close'
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì wicks
            if candle_color == 'green':
                upper_wick = h - c
                lower_wick = o - l
            elif candle_color == 'red':
                upper_wick = h - o
                lower_wick = c - l
            else:  # doji
                upper_wick = h - max(o, c)
                lower_wick = min(o, c) - l
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì wick ratios
            upper_wick_ratio = upper_wick / candle_range if candle_range > 0 else 0
            lower_wick_ratio = lower_wick / candle_range if candle_range > 0 else 0
            
            # Pattern recognition
            pattern_info = self._recognize_advanced_patterns({
                'color': candle_color,
                'body_ratio': body_ratio,
                'upper_wick': upper_wick,
                'lower_wick': lower_wick,
                'upper_wick_ratio': upper_wick_ratio,
                'lower_wick_ratio': lower_wick_ratio,
                'candle_range': candle_range,
                'body_size': body_size,
                'price_change': price_change
            })
            
            analysis_result = {
                'color': candle_color,
                'body_ratio': round(body_ratio, 4),
                'price_direction': price_direction,
                'range': round(candle_range, 4),
                'body_size': round(body_size, 4),
                'upper_wick': round(upper_wick, 4),
                'lower_wick': round(lower_wick, 4),
                'upper_wick_ratio': round(upper_wick_ratio, 4),
                'lower_wick_ratio': round(lower_wick_ratio, 4),
                'price_change': round(price_change, 4),
                'price_change_pips': round(price_change * 10000, 2),
                'pattern_name': pattern_info['name'],
                'pattern_strength': pattern_info['strength'],
                'pattern_reliability': pattern_info['reliability'],
                'analysis_quality': self._calculate_candle_quality(body_ratio, candle_range, upper_wick_ratio, lower_wick_ratio),
                'signal_clarity': self._calculate_signal_clarity(candle_color, price_direction, body_ratio)
            }
            
            print(f"üìä ANALYSIS RESULTS:")
            print(f"   Color: {candle_color}")
            print(f"   Body Ratio: {body_ratio:.3f} ({body_ratio*100:.1f}%)")
            print(f"   Price Direction: {price_direction}")
            print(f"   Price Change: {price_change:+.4f} ({price_change*10000:+.1f} pips)")
            print(f"   Range: {candle_range:.4f}")
            print(f"   Pattern: {pattern_info['name']}")
            
            return analysis_result
            
        except Exception as e:
            print(f"‚ùå Candlestick analysis error: {e}")
            return self._get_fallback_analysis()
        

    def _recognize_advanced_patterns(self, candle_data: Dict) -> Dict:
        """
        üîç ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å Candlestick Patterns ‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á - IMPROVED
        
        Args:
            candle_data: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÅ‡∏•‡πâ‡∏ß
            
        Returns:
            Dict: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• pattern ‡∏ó‡∏µ‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î
        """
        try:
            color = candle_data.get('color', '')
            body_ratio = candle_data.get('body_ratio', 0)
            upper_wick_ratio = candle_data.get('upper_wick_ratio', 0)
            lower_wick_ratio = candle_data.get('lower_wick_ratio', 0)
            momentum = candle_data.get('momentum', 0)
            
            pattern_name = 'standard'
            pattern_strength = 0.5
            reliability = 0.5
            is_reversal = False
            is_continuation = False
            
            # üîß IMPROVED: Doji Patterns (‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏∂‡πâ‡∏ô)
            if body_ratio < 0.05:  # Doji threshold
                if upper_wick_ratio > 0.4 and lower_wick_ratio < 0.1:
                    pattern_name = 'gravestone_doji'
                    pattern_strength = 0.8
                    reliability = 0.75
                    is_reversal = True
                elif lower_wick_ratio > 0.4 and upper_wick_ratio < 0.1:
                    pattern_name = 'dragonfly_doji'
                    pattern_strength = 0.8
                    reliability = 0.75
                    is_reversal = True
                elif upper_wick_ratio > 0.3 and lower_wick_ratio > 0.3:
                    pattern_name = 'long_legged_doji'
                    pattern_strength = 0.6
                    reliability = 0.6
                    is_reversal = True
                else:
                    pattern_name = 'classic_doji'
                    pattern_strength = 0.5
                    reliability = 0.5
                    is_reversal = True
            
            # üîß IMPROVED: Hammer & Shooting Star (‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô)
            elif body_ratio >= 0.2 and body_ratio <= 0.4:  # Body ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
                if color == 'green' and lower_wick_ratio > 0.5 and upper_wick_ratio < 0.1:
                    pattern_name = 'hammer_bullish'
                    pattern_strength = 0.85
                    reliability = 0.8
                    is_reversal = True
                elif color == 'red' and upper_wick_ratio > 0.5 and lower_wick_ratio < 0.1:
                    pattern_name = 'shooting_star'
                    pattern_strength = 0.85
                    reliability = 0.8
                    is_reversal = True
                elif color == 'green' and upper_wick_ratio > 0.5 and lower_wick_ratio < 0.1:
                    pattern_name = 'inverted_hammer'
                    pattern_strength = 0.7
                    reliability = 0.65
                    is_reversal = True
                elif color == 'red' and lower_wick_ratio > 0.5 and upper_wick_ratio < 0.1:
                    pattern_name = 'hanging_man'
                    pattern_strength = 0.7
                    reliability = 0.65
                    is_reversal = True
            
            # üîß IMPROVED: Strong Trend Candles (‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô)
            elif body_ratio > 0.6:  # Strong body
                if color == 'green':
                    if momentum > 0.5:
                        pattern_name = 'strong_bullish_momentum'
                        pattern_strength = 0.9
                        reliability = 0.8
                        is_continuation = True
                    else:
                        pattern_name = 'strong_bullish'
                        pattern_strength = 0.75
                        reliability = 0.7
                        is_continuation = True
                elif color == 'red':
                    if momentum < -0.5:
                        pattern_name = 'strong_bearish_momentum'
                        pattern_strength = 0.9
                        reliability = 0.8
                        is_continuation = True
                    else:
                        pattern_name = 'strong_bearish'
                        pattern_strength = 0.75
                        reliability = 0.7
                        is_continuation = True
            
            # üîß IMPROVED: Spinning Tops & Small Bodies
            elif body_ratio >= 0.05 and body_ratio <= 0.2:  # Small body
                if upper_wick_ratio > 0.3 and lower_wick_ratio > 0.3:
                    pattern_name = 'spinning_top'
                    pattern_strength = 0.4
                    reliability = 0.5
                    is_reversal = True
                else:
                    pattern_name = 'small_body'
                    pattern_strength = 0.3
                    reliability = 0.4
            
            # üîß IMPROVED: Medium Body Candles
            else:  # body_ratio 0.2-0.6
                if color == 'green':
                    if lower_wick_ratio > 0.3:
                        pattern_name = 'bullish_with_support'
                        pattern_strength = 0.65
                        reliability = 0.6
                    else:
                        pattern_name = 'medium_bullish'
                        pattern_strength = 0.6
                        reliability = 0.55
                elif color == 'red':
                    if upper_wick_ratio > 0.3:
                        pattern_name = 'bearish_with_resistance'
                        pattern_strength = 0.65
                        reliability = 0.6
                    else:
                        pattern_name = 'medium_bearish'
                        pattern_strength = 0.6
                        reliability = 0.55
                else:
                    pattern_name = 'neutral_medium'
                    pattern_strength = 0.4
                    reliability = 0.4
            
            # üîß IMPROVED: ‡∏õ‡∏£‡∏±‡∏ö strength ‡∏ï‡∏≤‡∏° momentum
            if abs(momentum) > 0.3:
                pattern_strength *= (1 + abs(momentum) * 0.2)  # ‡πÄ‡∏û‡∏¥‡πà‡∏° 20% ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö momentum ‡πÅ‡∏£‡∏á
                pattern_strength = min(pattern_strength, 0.95)  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 95%
            
            return {
                'name': pattern_name,
                'strength': round(pattern_strength, 3),
                'reliability': round(reliability, 3),
                'is_reversal': is_reversal,
                'is_continuation': is_continuation,
                'body_ratio': round(body_ratio, 4),
                'upper_wick_ratio': round(upper_wick_ratio, 4),
                'lower_wick_ratio': round(lower_wick_ratio, 4),
                'momentum_adjusted': abs(momentum) > 0.3
            }
            
        except Exception as e:
            print(f"‚ùå Advanced pattern recognition error: {e}")
            return {
                'name': 'error',
                'strength': 0.0,
                'reliability': 0.0,
                'is_reversal': False,
                'is_continuation': False,
                'body_ratio': 0,
                'upper_wick_ratio': 0,
                'lower_wick_ratio': 0,
                'momentum_adjusted': False
            }

    def _calculate_candle_quality(self, body_ratio: float, candle_range: float, 
                                upper_wick_ratio: float, lower_wick_ratio: float) -> float:
        """
        üéØ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô - IMPROVED ACCURACY
        
        Args:
            body_ratio: ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô body
            candle_range: ‡∏Ç‡∏ô‡∏≤‡∏î‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
            upper_wick_ratio: ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô upper wick
            lower_wick_ratio: ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô lower wick
            
        Returns:
            float: ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û 0-1
        """
        try:
            # üîß IMPROVED: ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å body ratio (‡πÅ‡∏°‡πà‡∏ô‡∏¢‡∏≥‡∏Ç‡∏∂‡πâ‡∏ô)
            if body_ratio >= 0.7:  # body ‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡∏°‡∏≤‡∏Å
                ratio_score = 1.0
            elif body_ratio >= 0.5:  # body ‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á
                ratio_score = 0.9
            elif body_ratio >= 0.3:  # body ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
                ratio_score = 0.7
            elif body_ratio >= 0.15:  # body ‡∏≠‡πà‡∏≠‡∏ô
                ratio_score = 0.5
            elif body_ratio >= 0.05:  # body ‡πÄ‡∏•‡πá‡∏Å
                ratio_score = 0.3
            else:  # doji ‡∏´‡∏£‡∏∑‡∏≠ body ‡πÄ‡∏•‡πá‡∏Å‡∏°‡∏≤‡∏Å
                ratio_score = 0.4  # doji ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢‡∏û‡∏¥‡πÄ‡∏®‡∏©
            
            # üîß IMPROVED: ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å candle range (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô)
            if candle_range >= 8.0:  # ‡πÅ‡∏ó‡πà‡∏á‡πÉ‡∏´‡∏ç‡πà‡∏°‡∏≤‡∏Å (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥)
                range_score = 1.0
            elif candle_range >= 5.0:  # ‡πÅ‡∏ó‡πà‡∏á‡πÉ‡∏´‡∏ç‡πà
                range_score = 0.9
            elif candle_range >= 3.0:  # ‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
                range_score = 0.8
            elif candle_range >= 1.5:  # ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏•‡πá‡∏Å
                range_score = 0.6
            elif candle_range >= 0.8:  # ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏°‡∏≤‡∏Å
                range_score = 0.4
            else:  # ‡πÅ‡∏ó‡πà‡∏á‡πÅ‡∏Ñ‡∏ö‡∏°‡∏≤‡∏Å
                range_score = 0.2
            
            # üîß IMPROVED: ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å wick balance
            wick_balance = abs(upper_wick_ratio - lower_wick_ratio)
            if wick_balance < 0.1:  # wicks ‡∏™‡∏°‡∏î‡∏∏‡∏•
                balance_score = 1.0
            elif wick_balance < 0.3:  # wicks ‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏™‡∏°‡∏î‡∏∏‡∏•
                balance_score = 0.8
            elif wick_balance < 0.5:  # wicks ‡πÑ‡∏°‡πà‡∏™‡∏°‡∏î‡∏∏‡∏•‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
                balance_score = 0.6
            else:  # wicks ‡πÑ‡∏°‡πà‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏°‡∏≤‡∏Å (‡∏≠‡∏≤‡∏à‡πÄ‡∏õ‡πá‡∏ô reversal pattern)
                balance_score = 0.7  # ‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡πÜ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢
            
            # üîß IMPROVED: ‡∏£‡∏ß‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (‡∏õ‡∏£‡∏±‡∏ö weight ‡πÉ‡∏´‡∏°‡πà)
            final_score = (
                ratio_score * 0.5 +      # body ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
                range_score * 0.3 +      # range ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏£‡∏≠‡∏á
                balance_score * 0.2      # balance ‡πÄ‡∏™‡∏£‡∏¥‡∏°
            )
            
            return round(final_score, 3)
            
        except Exception as e:
            print(f"‚ùå Candle quality calculation error: {e}")
            return 0.5

    def _calculate_signal_clarity(self, candle_color: str, price_direction: str, body_ratio: float) -> float:
        """
        üéØ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏Ç‡∏≠‡∏á Signal - NEW
        
        Args:
            candle_color: ‡∏™‡∏µ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
            price_direction: ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
            body_ratio: ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô body
            
        Returns:
            float: Signal clarity score (0.0 ‡∏ñ‡∏∂‡∏á 1.0)
        """
        try:
            clarity_score = 0.0
            
            # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏µ‡πÅ‡∏•‡∏∞‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á
            if (candle_color == 'green' and price_direction == 'higher_close') or \
               (candle_color == 'red' and price_direction == 'lower_close'):
                clarity_score += 0.6  # ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô
            elif candle_color == 'doji':
                clarity_score += 0.3  # neutral
            else:
                clarity_score += 0.1  # ‡πÑ‡∏°‡πà‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á
            
            # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏à‡∏≤‡∏Å body size
            if body_ratio >= 0.5:
                clarity_score += 0.4  # signal ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
            elif body_ratio >= 0.2:
                clarity_score += 0.3  # signal ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
            elif body_ratio >= 0.05:
                clarity_score += 0.2  # signal ‡∏≠‡πà‡∏≠‡∏ô
            else:
                clarity_score += 0.1  # signal ‡∏Ñ‡∏•‡∏∏‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠
            
            return round(min(clarity_score, 1.0), 3)
            
        except Exception as e:
            return 0.5
        
    def _calculate_signal_clarity(self, candle_color: str, price_direction: str, body_ratio: float) -> float:
        """
        üéØ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏Ç‡∏≠‡∏á Signal - NEW
        
        Args:
            candle_color: ‡∏™‡∏µ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
            price_direction: ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤
            body_ratio: ‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô body
            
        Returns:
            float: Signal clarity score (0.0 ‡∏ñ‡∏∂‡∏á 1.0)
        """
        try:
            clarity_score = 0.0
            
            # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏™‡∏µ‡πÅ‡∏•‡∏∞‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á
            if (candle_color == 'green' and price_direction == 'higher_close') or \
               (candle_color == 'red' and price_direction == 'lower_close'):
                clarity_score += 0.6  # ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô
            elif candle_color == 'doji':
                clarity_score += 0.3  # neutral
            else:
                clarity_score += 0.1  # ‡πÑ‡∏°‡πà‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á
            
            # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô‡∏à‡∏≤‡∏Å body size
            if body_ratio >= 0.5:
                clarity_score += 0.4  # signal ‡∏ä‡∏±‡∏î‡πÄ‡∏à‡∏ô
            elif body_ratio >= 0.2:
                clarity_score += 0.3  # signal ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
            elif body_ratio >= 0.05:
                clarity_score += 0.2  # signal ‡∏≠‡πà‡∏≠‡∏ô
            else:
                clarity_score += 0.1  # signal ‡∏Ñ‡∏•‡∏∏‡∏°‡πÄ‡∏Ñ‡∏£‡∏∑‡∏≠
            
            return round(min(clarity_score, 1.0), 3)
            
        except Exception as e:
            return 0.5
        
    def _get_volume_analysis(self) -> Dict:
        """
        üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Volume - ULTRA SAFE VERSION
        
        Returns:
            Dict: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• volume analysis
        """
        try:
            print(f"üìä Analyzing volume data...")
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• rates ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö volume
            rates = mt5.copy_rates_from_pos(
                self.symbol, self.timeframe, 0, self.volume_lookback_periods + 1
            )
            
            if rates is None:
                print(f"‚ùå No rates data for volume analysis")
                return self._get_fallback_volume()
            
            if len(rates) < 2:
                print(f"‚ùå Not enough candles for volume analysis: {len(rates)}")
                return self._get_fallback_volume()
            
            print(f"‚úÖ Got {len(rates)} candles for volume analysis")
            
            # üîß SAFE VOLUME EXTRACTION
            volumes = []
            
            for i, rate in enumerate(rates):
                try:
                    # Method 1: ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ dtype.names
                    if hasattr(rate, 'dtype') and rate.dtype.names:
                        if 'tick_volume' in rate.dtype.names:
                            volume = int(rate['tick_volume'])
                        elif 'real_volume' in rate.dtype.names:
                            volume = int(rate['real_volume'])
                        else:
                            volume = 1000  # default volume
                    else:
                        # Method 2: ‡∏•‡∏≠‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á
                        try:
                            volume = int(rate[4]) if len(rate) > 4 else 1000  # index 4 ‡∏°‡∏±‡∏Å‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô volume
                        except:
                            volume = 1000
                    
                    volumes.append(max(volume, 1))  # ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1
                    print(f"   üìä Rate[{i}] volume: {volume}")
                    
                except Exception as e:
                    print(f"‚ùå Volume extraction error for rate[{i}]: {e}")
                    volumes.append(1000)  # fallback volume
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
            if len(volumes) < 2:
                print(f"‚ùå No valid volumes extracted")
                return self._get_fallback_volume()
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì volume metrics
            current_volume = volumes[0]  # ‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            historical_volumes = volumes[1:]  # ‡πÅ‡∏ó‡πà‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
            
            # ‡∏Å‡∏£‡∏≠‡∏á volume ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•
            valid_historical = [v for v in historical_volumes if 10 <= v <= 1000000]
            
            if len(valid_historical) == 0:
                print(f"‚ùå No valid historical volumes")
                return self._get_fallback_volume()
            
            avg_volume = sum(valid_historical) / len(valid_historical)
            volume_factor = current_volume / avg_volume if avg_volume > 0 else 1.0
            
            # ‡∏à‡∏≥‡∏Å‡∏±‡∏î volume factor ‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•
            volume_factor = max(0.1, min(10.0, volume_factor))
            
            print(f"üìä Volume Analysis Results:")
            print(f"   Current: {current_volume:,}")
            print(f"   Average: {avg_volume:,.0f}")
            print(f"   Factor: {volume_factor:.2f}")
            print(f"   Valid samples: {len(valid_historical)}")
            
            self.volume_available = True
            
            return {
                'available': True,
                'current': current_volume,
                'average': round(avg_volume, 0),
                'factor': round(volume_factor, 2),
                'samples': len(valid_historical),
                'source': 'mt5_safe'
            }
            
        except Exception as e:
            print(f"‚ùå Volume analysis error: {e}")
            return self._get_fallback_volume()

    def _get_fallback_volume(self) -> Dict:
        """üìä Fallback volume data ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å MT5 ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ"""
        return {
            'available': False,
            'current': 1000,
            'average': 1000,
            'factor': 1.0,
            'samples': 0,
            'source': 'fallback'
        }
    
    def reset_timestamp_tracking(self):
        """üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° timestamp (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug)"""
        try:
            self.last_processed_timestamp = 0
            print(f"üîÑ Timestamp tracking reset")
            return True
        except Exception as e:
            print(f"‚ùå Reset error: {e}")
            return False

    def get_timestamp_info(self) -> Dict:
        """üìä ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° timestamp"""
        try:
            last_time = self.last_processed_timestamp
            if last_time > 0:
                last_datetime = datetime.fromtimestamp(last_time)
                time_ago = (datetime.now() - last_datetime).total_seconds()
            else:
                last_datetime = None
                time_ago = 0
            
            return {
                'last_processed_timestamp': last_time,
                'last_processed_datetime': last_datetime.isoformat() if last_datetime else None,
                'seconds_since_last': time_ago,
                'next_expected_in_seconds': max(0, 300 - time_ago)  # M5 = 300 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
            }
        except Exception as e:
            return {'error': str(e)}
    
    # ==========================================
    # üîç PATTERN RECOGNITION
    # ==========================================
    
    def _recognize_basic_patterns(self, candle_data: Dict) -> Dict:
        """
        üîç ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å Pattern ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        
        Args:
            candle_data: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
            
        Returns:
            Dict: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• pattern
        """
        try:
            color = candle_data.get('color', '')
            body_ratio = candle_data.get('body_ratio', 0)
            upper_wick = candle_data.get('upper_wick', 0)
            lower_wick = candle_data.get('lower_wick', 0)
            candle_range = candle_data.get('candle_range', 0)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô wicks
            upper_wick_ratio = upper_wick / candle_range if candle_range > 0 else 0
            lower_wick_ratio = lower_wick / candle_range if candle_range > 0 else 0
            
            # ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å pattern
            if body_ratio < self.doji_threshold:
                # Doji patterns
                if upper_wick_ratio > 0.4:
                    pattern_name = 'dragonfly_doji' if lower_wick_ratio < 0.1 else 'long_legged_doji'
                elif lower_wick_ratio > 0.4:
                    pattern_name = 'gravestone_doji'
                else:
                    pattern_name = 'classic_doji'
                pattern_strength = 0.6
                
            elif body_ratio > self.strong_body_threshold:
                # Strong trend candles
                if color == 'green':
                    if lower_wick_ratio > 0.3:
                        pattern_name = 'hammer_bullish'
                        pattern_strength = 0.8
                    else:
                        pattern_name = 'strong_bullish'
                        pattern_strength = 0.7
                elif color == 'red':
                    if upper_wick_ratio > 0.3:
                        pattern_name = 'shooting_star'
                        pattern_strength = 0.8
                    else:
                        pattern_name = 'strong_bearish'
                        pattern_strength = 0.7
                else:
                    pattern_name = 'neutral'
                    pattern_strength = 0.5
                    
            else:
                # Standard candles
                if color == 'green':
                    pattern_name = 'green_candle'
                    pattern_strength = 0.5
                elif color == 'red':
                    pattern_name = 'red_candle'
                    pattern_strength = 0.5
                else:
                    pattern_name = 'neutral_candle'
                    pattern_strength = 0.3
            
            return {
                'name': pattern_name,
                'strength': pattern_strength,
                'body_ratio': body_ratio,
                'upper_wick_ratio': upper_wick_ratio,
                'lower_wick_ratio': lower_wick_ratio
            }
            
        except Exception as e:
            print(f"‚ùå Pattern recognition error: {e}")
            return {
                'name': 'unknown',
                'strength': 0.5,
                'body_ratio': 0,
                'upper_wick_ratio': 0,
                'lower_wick_ratio': 0
            }
        
    def _calculate_analysis_strength(self, candlestick_data: Dict, volume_data: Dict) -> float:
        """
        üí™ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        
        Args:
            candlestick_data: ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
            volume_data: ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå volume
            
        Returns:
            float: ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á 0-1
        """
        try:
            # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å pattern
            pattern_strength = candlestick_data.get('strength', 0.5)
            
            # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å volume
            if volume_data['available']:
                volume_factor = volume_data['factor']
                if volume_factor >= 1.5:  # volume ‡∏™‡∏π‡∏á
                    volume_score = 1.0
                elif volume_factor >= 1.2:  # volume ‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
                    volume_score = 0.8
                else:  # volume ‡∏õ‡∏Å‡∏ï‡∏¥‡∏´‡∏£‡∏∑‡∏≠‡∏ï‡πà‡∏≥
                    volume_score = 0.6
            else:
                volume_score = 0.7  # ‡πÑ‡∏°‡πà‡∏°‡∏µ volume = ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Å‡∏•‡∏≤‡∏á‡πÜ
            
            # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å body ratio
            body_ratio = candlestick_data.get('body_ratio', 0)
            if body_ratio >= 0.4:
                body_score = 1.0
            elif body_ratio >= 0.2:
                body_score = 0.8
            else:
                body_score = 0.5
            
            # ‡∏£‡∏ß‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
            final_strength = (
                pattern_strength * 0.4 +
                volume_score * 0.3 +
                body_score * 0.3
            )
            
            return round(final_strength, 3)
            
        except Exception as e:
            print(f"‚ùå Analysis strength calculation error: {e}")
            return 0.5
    
    def _get_market_context(self, current_candle: Dict) -> str:
        """
        üåç ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Market Context
        
        Args:
            current_candle: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            
        Returns:
            str: ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó market context
        """
        try:
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö trading session
            current_time = datetime.now()
            hour = current_time.hour
            
            if 1 <= hour < 9:    # Asian session
                session = 'asian'
            elif 9 <= hour < 17:  # London session
                session = 'london'
            elif 17 <= hour < 24: # New York session
                session = 'newyork'
            else:                 # Overlap
                session = 'overlap'
            
            # ‡∏î‡∏π‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô
            candle_range = current_candle['high'] - current_candle['low']
            if candle_range >= 5.0:
                volatility = 'high'
            elif candle_range >= 2.0:
                volatility = 'medium'
            else:
                volatility = 'low'
            
            return f"{session}_{volatility}"
            
        except Exception as e:
            print(f"‚ùå Market context error: {e}")
            return "unknown_medium"
    
    # ==========================================
    # üîß UTILITY & HELPER METHODS
    # ==========================================
    
    def _is_cache_valid(self) -> bool:
        """üîß ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Cache - ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö real-time"""
        try:
            if self.cached_analysis is None:
                return False
            
            # üîß NEW: Cache valid ‡∏ô‡∏≤‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ó‡πà‡∏á‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß
            time_diff = (datetime.now() - self.last_analysis_time).total_seconds()
            return time_diff < self.cache_duration_seconds
            
        except Exception as e:
            return False
            
    def _get_fallback_analysis(self) -> Dict:
        """‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• fallback ‡πÄ‡∏°‡∏∑‡πà‡∏≠ analysis ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß"""
        return {
            'color': 'neutral',
            'body_ratio': 0.1,
            'price_direction': 'same_close',
            'range': 1.0,
            'body_size': 0.1,
            'upper_wick': 0.45,
            'lower_wick': 0.45,
            'pattern_name': 'error',
            'pattern_strength': 0.0,
            'analysis_quality': 0.0
        }
    
    def refresh_cache(self):
        """üîÑ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö refresh cache"""
        try:
            self.cached_analysis = None
            self.last_analysis_time = datetime.min
            print(f"üîÑ Analysis cache refreshed")
        except Exception as e:
            print(f"‚ùå Cache refresh error: {e}")
    
    def is_ready(self) -> bool:
        """‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°"""
        return (
            self.mt5_connector is not None and
            self.mt5_connector.is_connected and
            self.symbol is not None
        )
    
    def get_analyzer_info(self) -> Dict:
        """‚ÑπÔ∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Candlestick Analyzer"""
        return {
            'name': 'Pure Candlestick Analyzer',
            'version': '1.0.0',
            'symbol': self.symbol,
            'timeframe': 'M5',
            'volume_available': self.volume_available,
            'min_candles_required': self.min_candles_required,
            'volume_lookback_periods': self.volume_lookback_periods,
            'doji_threshold': self.doji_threshold,
            'strong_body_threshold': self.strong_body_threshold,
            'cache_duration_seconds': self.cache_duration_seconds
        }

    def get_debug_info(self) -> Dict:
        """üîç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• debug ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö troubleshooting"""
        try:
            return {
                'analyzer_status': {
                    'is_ready': self.is_ready(),
                    'mt5_connected': self.mt5_connector.is_connected if self.mt5_connector else False,
                    'symbol': self.symbol,
                    'timeframe': 'M5'
                },
                'cache_info': {
                    'last_analysis_time': self.last_analysis_time.isoformat() if self.last_analysis_time != datetime.min else 'Never',
                    'last_candle_time': self.last_analyzed_candle_time.isoformat() if self.last_analyzed_candle_time != datetime.min else 'Never',
                    'cache_valid': self._is_cache_valid(),
                    'cache_duration': self.cache_duration_seconds
                },
                'signature_tracking': {
                    'processed_count': len(getattr(self, 'processed_signatures', set())),
                    'max_history': self.max_signature_history,
                    'recent_signatures': list(getattr(self, 'processed_signatures', set()))[-5:] if hasattr(self, 'processed_signatures') else []
                },
                'performance': {
                    'total_analysis': getattr(self, 'analysis_count', 0),
                    'duplicate_blocks': getattr(self, 'duplicate_blocks', 0),
                    'successful_analysis': getattr(self, 'successful_analysis', 0),
                    'block_rate': f"{(getattr(self, 'duplicate_blocks', 0) / max(getattr(self, 'analysis_count', 1), 1) * 100):.1f}%"
                },
                'volume_status': {
                    'available': self.volume_available,
                    'history_count': len(self.volume_history)
                }
            }
        except Exception as e:
            return {'error': str(e)}

    def clear_processed_signatures(self):
        """üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug)"""
        try:
            if hasattr(self, 'processed_signatures'):
                old_count = len(self.processed_signatures)
                self.processed_signatures.clear()
                print(f"üóëÔ∏è Cleared {old_count} processed signatures")
                
            # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏ß‡∏•‡∏≤‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°
            self.last_analysis_time = datetime.min
            self.last_analyzed_candle_time = datetime.min
            
            # ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
            self.analysis_count = 0
            self.duplicate_blocks = 0 
            self.successful_analysis = 0
            
            print(f"‚úÖ Analyzer reset completed")
            return True
            
        except Exception as e:
            print(f"‚ùå Clear signatures error: {e}")
            return False

    def force_analyze_current_candle(self) -> Optional[Dict]:
        """üîß ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ó‡πà‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏Ç‡πâ‡∏≤‡∏° duplicate check)"""
        try:
            print(f"üîß FORCE ANALYSIS - bypassing duplicate check...")
            
            # ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏õ‡∏¥‡∏î duplicate check ‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
            original_processed = getattr(self, 'processed_signatures', set()).copy()
            self.processed_signatures = set()  # ‡∏•‡πâ‡∏≤‡∏á‡∏ä‡∏±‡πà‡∏ß‡∏Ñ‡∏£‡∏≤‡∏ß
            
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
            result = self.get_current_analysis()
            
            # ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤ processed signatures
            self.processed_signatures = original_processed
            
            if result:
                print(f"‚úÖ Force analysis completed")
            else:
                print(f"‚ùå Force analysis failed")
            
            return result
            
        except Exception as e:
            print(f"‚ùå Force analysis error: {e}")
            return None
    
# ==========================================
# üß™ TESTING & VALIDATION
# ==========================================

def test_candlestick_analyzer(mt5_connector, config):
    """üß™ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö Candlestick Analyzer"""
    print("üß™ Testing Candlestick Analyzer...")
    print("=" * 50)
    
    analyzer = CandlestickAnalyzer(mt5_connector, config)
    
    if not analyzer.is_ready():
        print("‚ùå Analyzer not ready")
        return
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
    analysis = analyzer.get_current_analysis()
    
    if analysis:
        print("‚úÖ Analysis successful!")
        print(f"   Symbol: {analysis.get('symbol')}")
        print(f"   Close: ${analysis.get('close', 0):.2f}")
        print(f"   Color: {analysis.get('candle_color')}")
        print(f"   Body ratio: {analysis.get('body_ratio', 0):.3f}")
        print(f"   Price direction: {analysis.get('price_direction')}")
        print(f"   Pattern: {analysis.get('pattern_name')}")
        print(f"   Volume available: {analysis.get('volume_available')}")
        print(f"   Analysis strength: {analysis.get('analysis_strength', 0):.2f}")
    else:
        print("‚ùå Analysis failed")
    
    print("=" * 50)
    print("‚úÖ Candlestick Analyzer test completed")
