"""
üí∞ Smart Position Monitor & Manager
position_monitor.py

üöÄ Features:
‚úÖ Real-time Position Monitoring
‚úÖ Smart Recovery (‡∏´‡∏≤ profitable positions ‡∏ä‡∏î‡πÄ‡∏ä‡∏¢ losing positions)
‚úÖ Portfolio Balance Management
‚úÖ Intelligent Close Combinations (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà 1:1)
‚úÖ Emergency Close Protocols
‚úÖ Position Age & P&L Tracking

üéØ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå positions ‡πÅ‡∏•‡∏∞‡∏´‡∏≤‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
‡πÄ‡∏û‡∏∑‡πà‡∏≠ optimize portfolio ‡πÅ‡∏•‡∏∞‡∏•‡∏î‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á
"""

import MetaTrader5 as mt5
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple
import statistics
import time

class PositionMonitor:
    """
    üí∞ Smart Position Monitor & Manager
    
    ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏•‡∏∞‡∏´‡∏≤‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞
    ‡πÄ‡∏ô‡πâ‡∏ô portfolio optimization ‡πÅ‡∏•‡∏∞ risk management
    """
    
    def __init__(self, mt5_connector, config: Dict):
        """
        üîß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Position Monitor
        
        Args:
            mt5_connector: MT5 connection object
            config: ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö
        """
        self.mt5_connector = mt5_connector
        self.config = config
        
        # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ position management
        self.position_config = config.get("position_management", {})
        self.symbol = config.get("trading", {}).get("symbol", "XAUUSD.v")
        
        # Smart close settings
        self.max_losing_age_hours = self.position_config.get("max_losing_age_hours", 24)
        self.min_profit_to_close = self.position_config.get("min_profit_to_close", 5.0)
        self.portfolio_balance_threshold = self.position_config.get("portfolio_balance_threshold", 0.7)
        
        # Emergency settings
        self.max_total_loss = self.position_config.get("max_total_loss", -500.0)
        self.max_single_loss = self.position_config.get("max_single_loss", -100.0)
        self.margin_level_warning = self.position_config.get("margin_level_warning", 200.0)
        
        # Tracking
        self.position_cache = {}
        self.last_update_time = datetime.min
        self.cache_duration_seconds = 5
        
        # Statistics
        self.close_stats = {
            'smart_closes': 0,
            'emergency_closes': 0,
            'profit_closes': 0,
            'recovery_closes': 0,
            'total_closed_profit': 0.0
        }
        
        print(f"üí∞ Position Monitor initialized for {self.symbol}")
        print(f"   Max losing age: {self.max_losing_age_hours}h")
        print(f"   Min profit to close: ${self.min_profit_to_close}")
        print(f"   Max total loss: ${self.max_total_loss}")
    
    # ==========================================
    # üìä POSITION RETRIEVAL & MONITORING
    # ==========================================
    
    def get_all_positions(self) -> List[Dict]:
        """
        üìä ‡∏î‡∏∂‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà - FIXED Commission Error
        
        Returns:
            List[Dict]: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ positions ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
        """
        try:
            if not self.mt5_connector.is_connected:
                print(f"‚ùå MT5 not connected - cannot get positions")
                return []
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cache
            if self._is_cache_valid():
                return list(self.position_cache.values())
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• positions ‡∏à‡∏≤‡∏Å MT5
            raw_positions = mt5.positions_get(symbol=self.symbol)
            
            if raw_positions is None:
                print(f"‚ÑπÔ∏è No positions found for {self.symbol}")
                self.position_cache = {}
                return []
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            processed_positions = []
            current_time = datetime.now()
            
            for pos in raw_positions:
                try:
                    # üîß FIXED: ‡πÉ‡∏ä‡πâ getattr ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô AttributeError
                    commission = getattr(pos, 'commission', 0.0)  # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô commission ‡πÑ‡∏°‡πà‡∏°‡∏µ
                    swap = getattr(pos, 'swap', 0.0)              # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô swap ‡πÑ‡∏°‡πà‡∏°‡∏µ
                    comment = getattr(pos, 'comment', '')         # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô comment ‡πÑ‡∏°‡πà‡∏°‡∏µ
                    magic = getattr(pos, 'magic', 0)              # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô magic ‡πÑ‡∏°‡πà‡∏°‡∏µ
                    
                    # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
                    position_data = {
                        'id': pos.ticket,
                        'symbol': pos.symbol,
                        'type': 'BUY' if pos.type == mt5.POSITION_TYPE_BUY else 'SELL',
                        'volume': float(pos.volume),
                        'price_open': float(pos.price_open),
                        'price_current': float(pos.price_current),
                        'profit': float(pos.profit),
                        'swap': float(swap),           # üîß FIXED: ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å getattr
                        'commission': float(commission), # üîß FIXED: ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å getattr
                        'magic': magic,                # üîß FIXED
                        'comment': comment,            # üîß FIXED
                        'time_open': datetime.fromtimestamp(pos.time),
                    }
                    
                    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
                    open_time = position_data['time_open']
                    age_timedelta = current_time - open_time
                    
                    position_data['age'] = self._format_position_age(age_timedelta)
                    position_data['age_hours'] = age_timedelta.total_seconds() / 3600
                    position_data['age_minutes'] = age_timedelta.total_seconds() / 60
                    
                    # üîß FIXED: ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì total P&L ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
                    total_pnl = position_data['profit'] + position_data['swap'] + position_data['commission']
                    position_data['total_pnl'] = round(total_pnl, 2)
                    
                    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì pips/points movement
                    position_data['pips_movement'] = self._calculate_pips_movement(position_data)
                    
                    # ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó position
                    position_data['status'] = self._classify_position_status(position_data)
                    
                    processed_positions.append(position_data)
                    
                    print(f"üí∞ Position {pos.ticket}: ${total_pnl:.2f} P&L ({position_data['status']})")
                    
                except Exception as e:
                    # üîß FIXED: ‡πÅ‡∏™‡∏î‡∏á error ‡∏ó‡∏µ‡πà‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
                    ticket = getattr(pos, 'ticket', 'unknown')
                    print(f"‚ùå Error processing position {ticket}: {e}")
                    continue
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó cache
            self.position_cache = {pos['id']: pos for pos in processed_positions}
            self.last_update_time = current_time
            
            print(f"üìä Retrieved {len(processed_positions)} valid positions")
            return processed_positions
            
        except Exception as e:
            print(f"‚ùå Get positions error: {e}")
            return []
            
    def _classify_position_status(self, position: Dict) -> str:
        """üè∑Ô∏è ‡∏à‡∏≥‡πÅ‡∏ô‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á Position"""
        try:
            profit = position.get('total_pnl', 0)
            age_hours = position.get('age_hours', 0)
            
            if profit > self.min_profit_to_close:
                return 'profitable'
            elif profit < self.max_single_loss:
                return 'heavy_loss'
            elif age_hours > self.max_losing_age_hours and profit < 0:
                return 'old_losing'
            elif profit < 0:
                return 'losing'
            else:
                return 'neutral'
                
        except Exception as e:
            print(f"‚ùå Position classification error: {e}")
            return 'unknown'
    
    def _format_position_age(self, age_timedelta: timedelta) -> str:
        """‚è±Ô∏è ‡∏à‡∏±‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏≤‡∏¢‡∏∏ Position"""
        try:
            total_seconds = int(age_timedelta.total_seconds())
            
            if total_seconds < 60:
                return f"{total_seconds}s"
            elif total_seconds < 3600:
                minutes = total_seconds // 60
                return f"{minutes}m"
            elif total_seconds < 86400:
                hours = total_seconds // 3600
                minutes = (total_seconds % 3600) // 60
                return f"{hours}h{minutes}m"
            else:
                days = total_seconds // 86400
                hours = (total_seconds % 86400) // 3600
                return f"{days}d{hours}h"
                
        except Exception as e:
            print(f"‚ùå Age formatting error: {e}")
            return "unknown"
    
    def _calculate_pips_movement(self, position: Dict) -> float:
        """üìè ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏´‡∏ß‡πÄ‡∏õ‡πá‡∏ô pips"""
        try:
            open_price = position.get('price_open', 0)
            current_price = position.get('price_current', 0)
            position_type = position.get('type', 'BUY')
            
            if open_price <= 0 or current_price <= 0:
                return 0.0
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì pips movement
            if position_type == 'BUY':
                pips = (current_price - open_price) * 10000  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥
            else:  # SELL
                pips = (open_price - current_price) * 10000
            
            return round(pips, 1)
            
        except Exception as e:
            print(f"‚ùå Pips calculation error: {e}")
            return 0.0
    
    # ==========================================
    # üß† SMART CLOSE ANALYSIS
    # ==========================================
    
    def check_smart_close_opportunities(self) -> List[Dict]:
        """
        üß† ‡∏´‡∏≤‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏≠‡∏±‡∏à‡∏â‡∏£‡∏¥‡∏¢‡∏∞ (‡πÑ‡∏°‡πà‡∏°‡∏µ Emergency/Aging)
        
        Returns:
            List[Dict]: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ close actions ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        """
        try:
            positions = self.get_all_positions()
            
            if not positions:
                return []
            
            close_opportunities = []
            
            # 1. Smart Recovery Analysis
            recovery_actions = self._find_recovery_opportunities(positions)
            close_opportunities.extend(recovery_actions)
            
            # 2. Portfolio Balance Analysis  
            balance_actions = self._find_balance_opportunities(positions)
            close_opportunities.extend(balance_actions)
            
            # 3. Profit Target Analysis
            profit_actions = self._find_profit_opportunities(positions)
            close_opportunities.extend(profit_actions)
            
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° priority
            close_opportunities.sort(key=lambda x: x.get('priority', 5))
            
            if close_opportunities:
                print(f"üß† Found {len(close_opportunities)} smart close opportunities")
            
            return close_opportunities
            
        except Exception as e:
            print(f"‚ùå Smart close analysis error: {e}")
        return []
        
    def _find_recovery_opportunities(self, positions: List[Dict]) -> List[Dict]:
        """üéØ ‡∏´‡∏≤‡πÇ‡∏≠‡∏Å‡∏≤‡∏™ Smart Recovery"""
        try:
            recovery_actions = []
            
            # ‡πÅ‡∏¢‡∏Å profitable ‡πÅ‡∏•‡∏∞ losing positions
            profitable_positions = [p for p in positions if p.get('total_pnl', 0) > self.min_profit_to_close]
            losing_positions = [p for p in positions if p.get('status') in ['losing', 'old_losing', 'heavy_loss']]
            
            if not profitable_positions or not losing_positions:
                return recovery_actions
            
            print(f"üéØ Recovery analysis: {len(profitable_positions)} profitable vs {len(losing_positions)} losing")
            
            # ‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°
            for losing_pos in losing_positions:
                losing_amount = abs(losing_pos.get('total_pnl', 0))
                
                # ‡∏´‡∏≤ profitable positions ‡∏ó‡∏µ‡πà‡∏û‡∏≠‡∏ä‡∏î‡πÄ‡∏ä‡∏¢
                recovery_candidates = []
                total_recovery_profit = 0
                
                for profit_pos in profitable_positions:
                    profit_amount = profit_pos.get('total_pnl', 0)
                    
                    if profit_amount >= self.min_profit_to_close:
                        recovery_candidates.append(profit_pos)
                        total_recovery_profit += profit_amount
                        
                        # ‡∏ñ‡πâ‡∏≤‡∏û‡∏≠‡∏ä‡∏î‡πÄ‡∏ä‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏¢‡∏∏‡∏î
                        if total_recovery_profit >= losing_amount * 1.1:  # ‡∏û‡∏≠‡∏ä‡∏î‡πÄ‡∏ä‡∏¢ + ‡∏Å‡∏≥‡πÑ‡∏£‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢
                            break
                
                # ‡∏ñ‡πâ‡∏≤‡∏´‡∏≤‡πÑ‡∏î‡πâ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∏‡πâ‡∏°‡∏Ñ‡πà‡∏≤
                if recovery_candidates and total_recovery_profit >= losing_amount * 0.8:
                    recovery_action = {
                        'action_type': 'smart_recovery',
                        'losing_position': losing_pos['id'],
                        'recovery_positions': [p['id'] for p in recovery_candidates],
                        'losing_amount': losing_amount,
                        'recovery_amount': total_recovery_profit,
                        'net_result': total_recovery_profit - losing_amount,
                        'priority': 2,  # ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á
                        'reason': f"Recovery: ${total_recovery_profit:.2f} covers ${losing_amount:.2f} loss"
                    }
                    
                    recovery_actions.append(recovery_action)
            
            return recovery_actions
            
        except Exception as e:
            print(f"‚ùå Recovery opportunities error: {e}")
            return []
    
    def _find_balance_opportunities(self, positions: List[Dict]) -> List[Dict]:
        """‚öñÔ∏è ‡∏´‡∏≤‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏õ‡∏£‡∏±‡∏ö‡∏™‡∏°‡∏î‡∏∏‡∏• Portfolio"""
        try:
            balance_actions = []
            
            # ‡∏ô‡∏±‡∏ö BUY vs SELL positions
            buy_positions = [p for p in positions if p.get('type') == 'BUY']
            sell_positions = [p for p in positions if p.get('type') == 'SELL']
            
            buy_count = len(buy_positions)
            sell_count = len(sell_positions)
            total_count = buy_count + sell_count
            
            if total_count < 4:  # ‡πÑ‡∏°‡πà‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö balance analysis
                return balance_actions
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô
            buy_ratio = buy_count / total_count
            sell_ratio = sell_count / total_count
            
            print(f"‚öñÔ∏è Portfolio balance: {buy_count} BUY ({buy_ratio:.1%}) vs {sell_count} SELL ({sell_ratio:.1%})")
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏°‡∏î‡∏∏‡∏•‡∏°‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ
            if buy_ratio > self.portfolio_balance_threshold:
                # BUY ‡πÄ‡∏¢‡∏≠‡∏∞‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ - ‡∏´‡∏≤‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏õ‡∏¥‡∏î BUY
                close_candidates = sorted(
                    buy_positions, 
                    key=lambda x: (x.get('total_pnl', 0), -x.get('age_hours', 0))
                )
                
                # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏¥‡∏î‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô
                close_count = max(1, int((buy_count - sell_count) / 2))
                positions_to_close = close_candidates[:close_count]
                
                if positions_to_close:
                    balance_action = {
                        'action_type': 'portfolio_balance',
                        'positions_to_close': [p['id'] for p in positions_to_close],
                        'balance_issue': 'too_many_buy',
                        'current_ratio': f"{buy_ratio:.1%} BUY",
                        'priority': 3,
                        'reason': f"Rebalance: Too many BUY positions ({buy_ratio:.1%})"
                    }
                    balance_actions.append(balance_action)
            
            elif sell_ratio > self.portfolio_balance_threshold:
                # SELL ‡πÄ‡∏¢‡∏≠‡∏∞‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ - ‡∏´‡∏≤‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏õ‡∏¥‡∏î SELL  
                close_candidates = sorted(
                    sell_positions,
                    key=lambda x: (x.get('total_pnl', 0), -x.get('age_hours', 0))
                )
                
                close_count = max(1, int((sell_count - buy_count) / 2))
                positions_to_close = close_candidates[:close_count]
                
                if positions_to_close:
                    balance_action = {
                        'action_type': 'portfolio_balance', 
                        'positions_to_close': [p['id'] for p in positions_to_close],
                        'balance_issue': 'too_many_sell',
                        'current_ratio': f"{sell_ratio:.1%} SELL",
                        'priority': 3,
                        'reason': f"Rebalance: Too many SELL positions ({sell_ratio:.1%})"
                    }
                    balance_actions.append(balance_action)
            
            return balance_actions
            
        except Exception as e:
            print(f"‚ùå Balance opportunities error: {e}")
            return []
    
    def _find_profit_opportunities(self, positions: List[Dict]) -> List[Dict]:
        """üí∞ ‡∏´‡∏≤‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏õ‡∏¥‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡πÑ‡∏£ (‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç)"""
        try:
            profit_actions = []
            
            # ‡∏´‡∏≤ positions ‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡πÑ‡∏£‡∏î‡∏µ
            profitable_positions = [
                p for p in positions 
                if p.get('total_pnl', 0) >= self.min_profit_to_close
            ]
            
            if not profitable_positions:
                return profit_actions
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏Å‡∏≥‡πÑ‡∏£‡∏à‡∏≤‡∏Å‡∏°‡∏≤‡∏Å‡πÑ‡∏õ‡∏ô‡πâ‡∏≠‡∏¢
            profitable_positions.sort(key=lambda x: x.get('total_pnl', 0), reverse=True)
            
            # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞ position - ‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
            for pos in profitable_positions:
                profit = pos.get('total_pnl', 0)
                age_hours = pos.get('age_hours', 0)
                
                # ‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡πÑ‡∏£ - ‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î‡∏Ç‡∏∂‡πâ‡∏ô
                close_profit = False
                priority = 4  # ‡∏õ‡∏Å‡∏ï‡∏¥
                reason = ""
                
                if profit >= 100.0:  # ‡∏Å‡∏≥‡πÑ‡∏£‡∏°‡∏≤‡∏Å‡∏°‡∏≤‡∏Å (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 50)
                    close_profit = True
                    priority = 1  # ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏°‡∏≤‡∏Å
                    reason = f"Very high profit: ${profit:.2f}"
                    
                elif profit >= 50.0 and age_hours >= 4:  # ‡∏Å‡∏≥‡πÑ‡∏£‡∏°‡∏≤‡∏Å + ‡∏≠‡∏≤‡∏¢‡∏∏‡∏û‡∏≠‡∏™‡∏°‡∏Ñ‡∏ß‡∏£ (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 2h)
                    close_profit = True
                    priority = 2
                    reason = f"High profit with age: ${profit:.2f} ({age_hours:.1f}h)"
                    
                elif profit >= 20.0 and age_hours >= 24:  # ‡∏Å‡∏≥‡πÑ‡∏£‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á + ‡∏≠‡∏≤‡∏¢‡∏∏‡∏°‡∏≤‡∏Å (‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 12h)
                    close_profit = True
                    priority = 3
                    reason = f"Medium profit but very old: ${profit:.2f} ({age_hours:.1f}h)"
                
                # üîß ‡πÄ‡∏Ç‡πâ‡∏°‡∏á‡∏ß‡∏î‡∏Ç‡∏∂‡πâ‡∏ô - ‡πÑ‡∏°‡πà‡∏õ‡∏¥‡∏î‡∏Å‡∏≥‡πÑ‡∏£‡πÄ‡∏•‡πá‡∏Å‡πÜ ‡πÅ‡∏°‡πâ‡∏à‡∏∞‡πÄ‡∏Å‡πà‡∏≤
                
                if close_profit:
                    profit_action = {
                        'action_type': 'profit_target',
                        'position_id': pos['id'],
                        'profit_amount': profit,
                        'age_hours': age_hours,
                        'priority': priority,
                        'reason': reason
                    }
                    profit_actions.append(profit_action)
            
            return profit_actions
            
        except Exception as e:
            print(f"‚ùå Profit opportunities error: {e}")
            return []        
    
    # ==========================================
    # ‚ö° CLOSE EXECUTION METHODS
    # ==========================================
    
    def execute_close_action(self, close_action: Dict) -> bool:
        """
        ‚ö° ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏° Action (‡πÑ‡∏°‡πà‡∏°‡∏µ Emergency/Aging)
        
        Args:
            close_action: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• close action
            
        Returns:
            bool: ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        """
        try:
            action_type = close_action.get('action_type')
            priority = close_action.get('priority', 5)
            reason = close_action.get('reason', '')
            
            print(f"‚ö° Executing close action: {action_type}")
            print(f"   Priority: {priority}")  
            print(f"   Reason: {reason}")
            
            success = False
            
            if action_type == 'smart_recovery':
                success = self._execute_recovery_close(close_action)
                
            elif action_type == 'portfolio_balance':
                success = self._execute_balance_close(close_action)
                
            elif action_type == 'profit_target':
                success = self._execute_profit_close(close_action)
                            
            else:
                print(f"‚ùå Unknown action type: {action_type}")
                return False
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
            if success:
                self._record_close_stats(action_type)
                self.position_cache = {}  # Clear cache ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó
            
            return success
            
        except Exception as e:
            print(f"‚ùå Close action execution error: {e}")
            return False
    
    def _execute_recovery_close(self, action: Dict) -> bool:
        """üéØ ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ Smart Recovery"""
        try:
            losing_id = action.get('losing_position')
            recovery_ids = action.get('recovery_positions', [])
            
            all_positions_to_close = [losing_id] + recovery_ids
            
            print(f"üéØ Smart Recovery: Closing {len(all_positions_to_close)} positions")
            print(f"   Losing: {losing_id}")
            print(f"   Recovery: {recovery_ids}")
            
            return self._close_multiple_positions(all_positions_to_close, "Smart Recovery")
            
        except Exception as e:
            print(f"‚ùå Recovery close error: {e}")
            return False
    
    def _execute_balance_close(self, action: Dict) -> bool:
        """‚öñÔ∏è ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ Portfolio Balance"""
        try:
            positions_to_close = action.get('positions_to_close', [])
            balance_issue = action.get('balance_issue', '')
            
            print(f"‚öñÔ∏è Portfolio Balance: Closing {len(positions_to_close)} positions")
            print(f"   Issue: {balance_issue}")
            
            return self._close_multiple_positions(positions_to_close, "Portfolio Balance")
            
        except Exception as e:
            print(f"‚ùå Balance close error: {e}")
            return False
    
    def _execute_profit_close(self, action: Dict) -> bool:
        """üí∞ ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏≥‡πÑ‡∏£"""
        try:
            position_id = action.get('position_id')
            profit_amount = action.get('profit_amount', 0)
            
            print(f"üí∞ Profit Close: Position {position_id} (${profit_amount:.2f})")
            
            return self.close_position_by_id(position_id, "Profit Target")
            
        except Exception as e:
            print(f"‚ùå Profit close error: {e}")
            return False
            
    # ==========================================
    # üîß CORE CLOSE METHODS
    # ==========================================
    
    def close_position_by_id(self, position_id: int, reason: str = "Manual") -> bool:
        """
        ‚ùå ‡∏õ‡∏¥‡∏î Position ‡∏ï‡∏≤‡∏° ID
        
        Args:
            position_id: ID ‡∏Ç‡∏≠‡∏á position
            reason: ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î
            
        Returns:
            bool: ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        """
        try:
            if not self.mt5_connector.is_connected:
                print(f"‚ùå MT5 not connected - cannot close position")
                return False
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• position
            position = mt5.positions_get(ticket=position_id)
            
            if not position:
                print(f"‚ùå Position {position_id} not found")
                return False
            
            pos = position[0]  # ‡πÄ‡∏≠‡∏≤‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å
            
            print(f"‚ùå Closing position {position_id}...")
            print(f"   Type: {'BUY' if pos.type == mt5.POSITION_TYPE_BUY else 'SELL'}")
            print(f"   Volume: {pos.volume} lots")
            print(f"   Profit: ${pos.profit:.2f}")
            print(f"   Reason: {reason}")
            
            # ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° close request
            if pos.type == mt5.POSITION_TYPE_BUY:
                order_type = mt5.ORDER_TYPE_SELL
                price = mt5.symbol_info_tick(pos.symbol).bid
            else:
                order_type = mt5.ORDER_TYPE_BUY
                price = mt5.symbol_info_tick(pos.symbol).ask
            
            close_request = {
                'action': mt5.TRADE_ACTION_DEAL,
                'symbol': pos.symbol,
                'volume': pos.volume,
                'type': order_type,
                'position': position_id,
                'price': price,
                'deviation': 10,
                'magic': pos.magic,
                'comment': f"Close_{reason}",
                'type_time': mt5.ORDER_TIME_GTC,
                'type_filling': mt5.ORDER_FILLING_IOC
            }
            
            # ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏õ‡∏¥‡∏î
            result = mt5.order_send(close_request)
            
            if result and result.retcode == mt5.TRADE_RETCODE_DONE:
                print(f"‚úÖ Position {position_id} closed successfully")
                print(f"   Close price: ${result.price:.2f}")
                print(f"   Final profit: ${result.profit:.2f}" if hasattr(result, 'profit') else "")
                return True
            else:
                error_msg = f"retcode: {result.retcode}, comment: {result.comment}" if result else "No result"
                print(f"‚ùå Failed to close position {position_id}: {error_msg}")
                return False
            
        except Exception as e:
            print(f"‚ùå Close position error: {e}")
            return False
    
    def _close_multiple_positions(self, position_ids: List[int], reason: str = "Batch") -> bool:
        """
        üì¶ ‡∏õ‡∏¥‡∏î‡∏´‡∏•‡∏≤‡∏¢ Positions ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
        
        Args:
            position_ids: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£ position IDs
            reason: ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î
            
        Returns:
            bool: ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        """
        try:
            if not position_ids:
                print(f"‚ÑπÔ∏è No positions to close")
                return True
            
            print(f"üì¶ Batch closing {len(position_ids)} positions...")
            print(f"   Reason: {reason}")
            print(f"   Position IDs: {position_ids}")
            
            success_count = 0
            total_count = len(position_ids)
            
            for position_id in position_ids:
                if self.close_position_by_id(position_id, reason):
                    success_count += 1
                    time.sleep(0.1)  # ‡∏û‡∏±‡∏Å 100ms ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î
            
            success_rate = success_count / total_count
            
            print(f"üì¶ Batch close result: {success_count}/{total_count} successful ({success_rate:.1%})")
            
            return success_rate >= 0.8  # ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏ñ‡πâ‡∏≤‡∏õ‡∏¥‡∏î‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 80%
            
        except Exception as e:
            print(f"‚ùå Batch close error: {e}")
            return False
    
    def emergency_close_all(self) -> int:
        """
        üö® ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô
        
        Returns:
            int: ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏õ‡∏¥‡∏î‡πÑ‡∏î‡πâ
        """
        try:
            print(f"üö® EMERGENCY CLOSE ALL POSITIONS!")
            
            positions = self.get_all_positions()
            
            if not positions:
                print(f"‚ÑπÔ∏è No positions to close")
                return 0
            
            position_ids = [p['id'] for p in positions]
            
            print(f"üö® Force closing {len(positions)} positions...")
            
            closed_count = 0
            for position_id in position_ids:
                if self.close_position_by_id(position_id, "EMERGENCY STOP"):
                    closed_count += 1
                time.sleep(0.05)  # ‡∏û‡∏±‡∏Å‡∏™‡∏±‡πâ‡∏ô‡πÜ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ server ‡∏á‡∏á
            
            print(f"üö® Emergency close completed: {closed_count}/{len(positions)} closed")
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
            self.close_stats['emergency_closes'] += closed_count
            
            return closed_count
            
        except Exception as e:
            print(f"‚ùå Emergency close all error: {e}")
            return 0
    
    # ==========================================
    # üìä STATISTICS & UTILITY METHODS
    # ==========================================
    
    def _record_close_stats(self, action_type: str):
        """üìù ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå (‡πÑ‡∏°‡πà‡∏ô‡∏±‡∏ö Emergency)"""
        try:
            if action_type == 'smart_recovery':
                self.close_stats['recovery_closes'] += 1
            elif action_type == 'profit_target':
                self.close_stats['profit_closes'] += 1
            self.close_stats['smart_closes'] += 1
            
        except Exception as e:
            print(f"‚ùå Close stats recording error: {e}")
    
    def get_portfolio_summary(self) -> Dict:
        """üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ Portfolio"""
        try:
            positions = self.get_all_positions()
            
            if not positions:
                return {
                    'total_positions': 0,
                    'total_pnl': 0.0,
                    'buy_positions': 0,
                    'sell_positions': 0,
                    'profitable_positions': 0,
                    'losing_positions': 0
                }
            
            # ‡∏ô‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏£‡∏ß‡∏°
            buy_count = len([p for p in positions if p.get('type') == 'BUY'])
            sell_count = len([p for p in positions if p.get('type') == 'SELL'])
            profitable_count = len([p for p in positions if p.get('total_pnl', 0) > 0])
            losing_count = len([p for p in positions if p.get('total_pnl', 0) < 0])
            
            total_pnl = sum(p.get('total_pnl', 0) for p in positions)
            total_volume = sum(p.get('volume', 0) for p in positions)
            
            # ‡∏≠‡∏≤‡∏¢‡∏∏‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢
            ages = [p.get('age_hours', 0) for p in positions]
            avg_age_hours = statistics.mean(ages) if ages else 0
            
            return {
                'total_positions': len(positions),
                'total_pnl': total_pnl,
                'total_volume': total_volume,
                'buy_positions': buy_count,
                'sell_positions': sell_count,
                'profitable_positions': profitable_count,
                'losing_positions': losing_count,
                'avg_age_hours': avg_age_hours,
                'buy_sell_ratio': buy_count / max(sell_count, 1),
                'profit_loss_ratio': profitable_count / max(losing_count, 1)
            }
            
        except Exception as e:
            print(f"‚ùå Portfolio summary error: {e}")
            return {'error': str(e)}
    
    def get_close_statistics(self) -> Dict:
        """üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå"""
        return self.close_stats.copy()
    
    def _is_cache_valid(self) -> bool:
        """üîß ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Cache"""
        time_diff = (datetime.now() - self.last_update_time).total_seconds()
        return time_diff < self.cache_duration_seconds and bool(self.position_cache)
    
    def is_ready(self) -> bool:
        """‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°"""
        return (
            self.mt5_connector is not None and
            self.mt5_connector.is_connected
        )
    
    def get_monitor_info(self) -> Dict:
        """‚ÑπÔ∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Position Monitor"""
        return {
            'name': 'Smart Position Monitor',
            'version': '1.0.0',
            'symbol': self.symbol,
            'max_losing_age_hours': self.max_losing_age_hours,
            'min_profit_to_close': self.min_profit_to_close,
            'max_total_loss': self.max_total_loss,
            'max_single_loss': self.max_single_loss,
            'portfolio_balance_threshold': self.portfolio_balance_threshold,
            'cache_duration_seconds': self.cache_duration_seconds
        }