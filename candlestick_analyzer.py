"""
üïØÔ∏è Pure Candlestick Analyzer (COMPLETE VERSION)
candlestick_analyzer.py

üîß COMPLETELY FIXED:
‚úÖ numpy.void object 'get' method error
‚úÖ Proper OHLC data extraction from MT5
‚úÖ Volume data handling
‚úÖ Error handling for missing data
‚úÖ Real-time candle processing
‚úÖ Duplicate prevention system
‚úÖ Memory management & caching
‚úÖ Pattern recognition algorithms
‚úÖ Volume confirmation system

üöÄ Complete Features:
‚úÖ OHLC Data Collection & Validation
‚úÖ Advanced Candlestick Pattern Recognition
‚úÖ Volume Analysis with Fallback
‚úÖ Body Ratio & Wick Analysis
‚úÖ Price Direction Detection
‚úÖ Pattern Classification System
‚úÖ Real-time Performance Tracking
‚úÖ Signature-based Duplicate Prevention
‚úÖ Persistence Integration
‚úÖ Comprehensive Error Handling
"""

import MetaTrader5 as mt5
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Tuple
import time
import statistics
import math

class CandlestickAnalyzer:
    """
    üïØÔ∏è Pure Candlestick Analyzer (COMPLETE VERSION)
    
    ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
    ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå real-time ‡πÅ‡∏•‡∏∞ pattern recognition
    """
    
    def __init__(self, mt5_connector, config: Dict):
        """
        üîß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Candlestick Analyzer - COMPLETE
        
        Args:
            mt5_connector: MT5 connection object
            config: ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö
        """
        self.mt5_connector = mt5_connector
        self.config = config
        
        # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        self.symbol = config.get("trading", {}).get("symbol", "XAUUSD.v")
        self.timeframe = mt5.TIMEFRAME_M1
        
        # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ analysis parameters
        self.min_candles_required = 3  # ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö analysis
        self.max_candles_lookback = 20  # ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏î‡∏π‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
        self.volume_lookback_periods = 10
        
        # Pattern recognition settings
        self.doji_threshold = 0.05  # 5% ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö doji detection
        self.strong_body_threshold = 0.6  # 60% ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö strong candle
        self.hammer_wick_ratio = 2.0  # ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô wick ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö hammer
        self.shooting_star_ratio = 2.0  # ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö shooting star
        
        # Volume analysis settings
        self.volume_spike_threshold = 1.5  # 150% ‡∏Ç‡∏≠‡∏á average volume
        self.volume_confirmation_enabled = config.get("volume", {}).get("enabled", True)
        self.volume_fallback_enabled = True  # ‡πÉ‡∏ä‡πâ fallback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ volume
        
        # üîß CACHE MANAGEMENT - ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏≤‡∏∞ real-time
        self.last_analysis_time = datetime.min
        self.last_analyzed_candle_time = datetime.min
        self.cache_duration_seconds = 5   # Cache 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
        self.cached_analysis = None
        
        # üîß VOLUME TRACKING
        self.volume_available = False
        self.volume_history = []
        self.max_volume_history = 20
        self.avg_volume = 0.0
        
        # üÜï STRICT SIGNATURE TRACKING
        self.processed_signatures = set()
        self.max_signature_history = 500  # ‡πÄ‡∏Å‡πá‡∏ö 500 signatures
        
        # üÜï CANDLE STATE TRACKING  
        self.last_candle_signature = None
        self.last_processed_candle_time = datetime.min
        self.minimum_time_gap_seconds = 30  # ‡∏´‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
        
        # üÜï PERFORMANCE COUNTERS
        self.analysis_count = 0
        self.duplicate_blocks = 0
        self.successful_analysis = 0
        self.time_order_errors = 0
        self.invalid_data_errors = 0
        
        # üÜï DATA VALIDATION FLAGS
        self.strict_time_checking = True
        self.allow_same_minute_candles = False
        
        # üîß PERSISTENCE INTEGRATION
        self.persistence_manager = None
        
        # üÜï REAL-TIME PROCESSING FLAGS
        self.real_time_mode = True
        self.force_sequential_processing = True
        
        # Pattern tracking
        self.pattern_history = []
        self.pattern_success_rates = {}
        
        print(f"üïØÔ∏è Candlestick Analyzer initialized (COMPLETE) for {self.symbol}")
        print(f"   Timeframe: M1")
        print(f"   Min candles: {self.min_candles_required}")
        print(f"   Volume enabled: {self.volume_confirmation_enabled}")
        print(f"   Cache duration: {self.cache_duration_seconds}s")
        print(f"   Real-time mode: {self.real_time_mode}")
    
    # ==========================================
    # üïØÔ∏è MAIN ANALYSIS METHODS - COMPLETE
    # ==========================================
    
    def get_current_analysis(self) -> Optional[Dict]:
        """
        üïØÔ∏è ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô - COMPLETE VERSION (MAIN METHOD)
        
        Returns:
            Dict: ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ None ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
        """
        try:
            self.analysis_count += 1
            
            print(f"\nüïØÔ∏è === CANDLESTICK ANALYSIS #{self.analysis_count} ===")
            
            # 1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°
            if not self._validate_connection():
                return None
            
            # 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö cache
            if self._is_cache_valid():
                print(f"üìã Using cached analysis (age: {(datetime.now() - self.last_analysis_time).seconds}s)")
                return self.cached_analysis
            
            # 3. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
            candle_data = self._fetch_candlestick_data()
            if not candle_data:
                print(f"‚ùå Failed to fetch candlestick data")
                self.invalid_data_errors += 1
                return None
            
            # 4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            cleaned_data = self._validate_and_clean_data(candle_data)
            if not cleaned_data:
                print(f"‚ùå Invalid data after cleaning")
                self.invalid_data_errors += 1
                return None
            
            # 5. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö duplicate processing
            current_signature = self._generate_candle_signature(cleaned_data[0])
            if self._is_already_processed(current_signature):
                print(f"üö´ Duplicate processing blocked: {current_signature}")
                self.duplicate_blocks += 1
                return self.cached_analysis
            
            # 6. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
            analysis_result = self._perform_complete_analysis(cleaned_data)
            
            if analysis_result:
                # 7. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
                self._record_successful_analysis(current_signature, analysis_result)
                self.successful_analysis += 1
                
                print(f"‚úÖ Analysis completed successfully")
                print(f"   Pattern: {analysis_result.get('pattern_name')}")
                print(f"   Color: {analysis_result.get('candle_color')}")
                print(f"   Strength: {analysis_result.get('pattern_strength'):.3f}")
                print(f"   Body ratio: {analysis_result.get('body_ratio'):.3f}")
                
                return analysis_result
            else:
                print(f"‚ùå Analysis failed")
                return None
                
        except Exception as e:
            print(f"‚ùå Candlestick analysis error: {e}")
            self.invalid_data_errors += 1
            return self._get_fallback_analysis()
    
    def _fetch_candlestick_data(self) -> Optional[List[Dict]]:
        """
        üìä ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô - COMPLETE WITH ERROR HANDLING
        
        Returns:
            List[Dict]: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô ‡∏´‡∏£‡∏∑‡∏≠ None
        """
        try:
            print(f"üìä Fetching candlestick data for {self.symbol}")
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
            candles = mt5.copy_rates_from_pos(
                self.symbol, 
                self.timeframe, 
                0, 
                self.max_candles_lookback
            )
            
            if candles is None or len(candles) == 0:
                print(f"‚ùå No candlestick data received")
                return None
            
            if len(candles) < self.min_candles_required:
                print(f"‚ùå Insufficient candles: {len(candles)} < {self.min_candles_required}")
                return None
            
            print(f"‚úÖ Fetched {len(candles)} candles")
            
            # ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• MT5 ‡πÄ‡∏õ‡πá‡∏ô dictionary format
            converted_candles = []
            
            for i, candle in enumerate(candles):
                try:
                    # üîß FIXED: ‡πÅ‡∏õ‡∏•‡∏á numpy data ‡πÄ‡∏õ‡πá‡∏ô Python native types
                    candle_dict = {
                        'time': int(candle[0]),  # timestamp
                        'open': float(candle[1]),
                        'high': float(candle[2]),
                        'low': float(candle[3]),
                        'close': float(candle[4]),
                        'tick_volume': int(candle[5]) if len(candle) > 5 else 0,
                        'spread': int(candle[6]) if len(candle) > 6 else 0,
                        'real_volume': int(candle[7]) if len(candle) > 7 else 0,
                        'index': i,
                        'datetime': datetime.fromtimestamp(int(candle[0]))
                    }
                    
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á OHLC
                    if self._validate_ohlc_data(candle_dict):
                        converted_candles.append(candle_dict)
                    else:
                        print(f"‚ö†Ô∏è Invalid OHLC data at index {i}, skipping")
                        
                except Exception as e:
                    print(f"‚ùå Error converting candle {i}: {e}")
                    continue
            
            if len(converted_candles) < self.min_candles_required:
                print(f"‚ùå Insufficient valid candles after conversion: {len(converted_candles)}")
                return None
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡πÄ‡∏ß‡∏•‡∏≤ (‡πÄ‡∏Å‡πà‡∏≤‡πÑ‡∏õ‡πÉ‡∏´‡∏°‡πà)
            converted_candles.sort(key=lambda x: x['time'])
            
            print(f"‚úÖ Converted {len(converted_candles)} valid candles")
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó volume tracking
            self._update_volume_tracking(converted_candles)
            
            return converted_candles
            
        except Exception as e:
            print(f"‚ùå Fetch candlestick data error: {e}")
            return None
    
    def _validate_and_clean_data(self, candles: List[Dict]) -> Optional[List[Dict]]:
        """
        üßπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• - COMPLETE
        
        Args:
            candles: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
            
        Returns:
            List[Dict]: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÅ‡∏•‡πâ‡∏ß ‡∏´‡∏£‡∏∑‡∏≠ None
        """
        try:
            if not candles or len(candles) < self.min_candles_required:
                return None
            
            cleaned_candles = []
            
            for i, candle in enumerate(candles):
                try:
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
                    if not self._validate_basic_candle_data(candle):
                        print(f"‚ö†Ô∏è Invalid basic data at index {i}")
                        continue
                    
                    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤
                    if self.strict_time_checking and i > 0:
                        prev_time = cleaned_candles[-1]['time'] if cleaned_candles else 0
                        current_time = candle['time']
                        
                        if current_time <= prev_time:
                            print(f"‚ö†Ô∏è Time order violation at index {i}: {current_time} <= {prev_time}")
                            self.time_order_errors += 1
                            continue
                    
                    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡∏¥‡∏°
                    enhanced_candle = self._enhance_candle_data(candle)
                    cleaned_candles.append(enhanced_candle)
                    
                except Exception as e:
                    print(f"‚ùå Error cleaning candle {i}: {e}")
                    continue
            
            if len(cleaned_candles) < self.min_candles_required:
                print(f"‚ùå Insufficient cleaned candles: {len(cleaned_candles)}")
                return None
            
            print(f"üßπ Cleaned data: {len(cleaned_candles)} valid candles")
            return cleaned_candles
            
        except Exception as e:
            print(f"‚ùå Data cleaning error: {e}")
            return None
    
    def _perform_complete_analysis(self, candles: List[Dict]) -> Optional[Dict]:
        """
        üîç ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô - COMPLETE ANALYSIS ENGINE
        
        Args:
            candles: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÅ‡∏•‡πâ‡∏ß
            
        Returns:
            Dict: ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô
        """
        try:
            current_candle = candles[-1]  # ‡πÅ‡∏ó‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            previous_candle = candles[-2] if len(candles) >= 2 else None
            
            print(f"üîç Performing complete analysis...")
            print(f"   Current candle time: {current_candle['datetime'].strftime('%H:%M:%S')}")
            print(f"   OHLC: {current_candle['open']:.4f}/{current_candle['high']:.4f}/{current_candle['low']:.4f}/{current_candle['close']:.4f}")
            
            # 1. ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
            basic_analysis = self._analyze_basic_candle_properties(current_candle)
            
            # 2. ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡πÅ‡∏ó‡πà‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
            comparison_analysis = self._analyze_candle_comparison(current_candle, previous_candle) if previous_candle else {}
            
            # 3. ‡∏Å‡∏≤‡∏£‡∏à‡∏î‡∏à‡∏≥ pattern
            pattern_analysis = self._identify_candlestick_patterns(candles)
            
            # 4. ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå volume
            volume_analysis = self._analyze_volume_confirmation(candles)
            
            # 5. ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô market context
            context_analysis = self._analyze_market_context(candles)
            
            # 6. ‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á‡∏Ç‡∏≠‡∏á signal
            signal_strength = self._calculate_analysis_strength(
                basic_analysis, comparison_analysis, pattern_analysis, volume_analysis
            )
            
            # ‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            complete_analysis = {
                # Basic properties
                'timestamp': current_candle['time'],
                'datetime': current_candle['datetime'],
                'open': current_candle['open'],
                'high': current_candle['high'],
                'low': current_candle['low'],
                'close': current_candle['close'],
                'volume': current_candle.get('real_volume', 0),
                
                # Basic analysis
                **basic_analysis,
                
                # Comparison analysis
                **comparison_analysis,
                
                # Pattern analysis
                **pattern_analysis,
                
                # Volume analysis
                **volume_analysis,
                
                # Context analysis
                **context_analysis,
                
                # Signal strength
                'analysis_strength': signal_strength,
                'analysis_quality': self._calculate_analysis_quality(candles),
                
                # Metadata
                'candles_analyzed': len(candles),
                'analysis_timestamp': datetime.now(),
                'analyzer_version': '2.0.0'
            }
            
            # Cache ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå
            self.cached_analysis = complete_analysis
            self.last_analysis_time = datetime.now()
            self.last_analyzed_candle_time = current_candle['datetime']
            
            return complete_analysis
            
        except Exception as e:
            print(f"‚ùå Complete analysis error: {e}")
            return None
    
    # ==========================================
    # üîç DETAILED ANALYSIS METHODS - COMPLETE
    # ==========================================
    
    def _analyze_basic_candle_properties(self, candle: Dict) -> Dict:
        """
        üîç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô - COMPLETE
        
        Args:
            candle: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
            
        Returns:
            Dict: ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏∏‡∏ì‡∏™‡∏°‡∏ö‡∏±‡∏ï‡∏¥‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
        """
        try:
            o, h, l, c = candle['open'], candle['high'], candle['low'], candle['close']
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡∏ô‡∏≤‡∏î‡∏ï‡πà‡∏≤‡∏á‡πÜ
            candle_range = h - l
            body_size = abs(c - o)
            upper_shadow = h - max(o, c)
            lower_shadow = min(o, c) - l
            
            # ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô division by zero
            range_threshold = 0.0001
            if candle_range < range_threshold:
                candle_range = range_threshold
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡∏™‡πà‡∏ß‡∏ô
            body_ratio = body_size / candle_range
            upper_shadow_ratio = upper_shadow / candle_range
            lower_shadow_ratio = lower_shadow / candle_range
            
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏™‡∏µ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
            price_threshold = 0.0001
            if c > o + price_threshold:
                candle_color = 'green'  # bullish
            elif c < o - price_threshold:
                candle_color = 'red'    # bearish
            else:
                candle_color = 'doji'   # neutral
            
            # ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á body
            if body_ratio >= self.strong_body_threshold:
                body_type = 'strong'
            elif body_ratio >= 0.3:
                body_type = 'medium'
            elif body_ratio <= self.doji_threshold:
                body_type = 'doji'
            else:
                body_type = 'weak'
            
            # ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡∏≠‡∏á shadow
            if upper_shadow_ratio >= 0.6:
                shadow_type = 'upper_heavy'
            elif lower_shadow_ratio >= 0.6:
                shadow_type = 'lower_heavy'
            elif upper_shadow_ratio >= 0.3 and lower_shadow_ratio >= 0.3:
                shadow_type = 'both_sides'
            else:
                shadow_type = 'normal'
            
            return {
                'candle_color': candle_color,
                'body_type': body_type,
                'shadow_type': shadow_type,
                'candle_range': round(candle_range, 5),
                'body_size': round(body_size, 5),
                'body_ratio': round(body_ratio, 4),
                'upper_shadow': round(upper_shadow, 5),
                'lower_shadow': round(lower_shadow, 5),
                'upper_shadow_ratio': round(upper_shadow_ratio, 4),
                'lower_shadow_ratio': round(lower_shadow_ratio, 4),
                'is_doji': body_ratio <= self.doji_threshold,
                'is_strong_body': body_ratio >= self.strong_body_threshold
            }
            
        except Exception as e:
            print(f"‚ùå Basic properties analysis error: {e}")
            return {
                'candle_color': 'unknown',
                'body_type': 'unknown',
                'shadow_type': 'unknown',
                'body_ratio': 0.0,
                'is_doji': False,
                'is_strong_body': False
            }
    
    def _analyze_candle_comparison(self, current: Dict, previous: Dict) -> Dict:
        """
        üìä ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡∏Å‡∏±‡∏ö‡πÅ‡∏ó‡πà‡∏á‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤ - COMPLETE
        
        Args:
            current: ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
            previous: ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
            
        Returns:
            Dict: ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö
        """
        try:
            if not previous:
                return {'comparison_available': False}
            
            curr_c = current['close']
            curr_o = current['open']
            curr_h = current['high']
            curr_l = current['low']
            
            prev_c = previous['close']
            prev_o = previous['open']
            prev_h = previous['high']
            prev_l = previous['low']
            
            # ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏£‡∏≤‡∏Ñ‡∏≤
            price_change = curr_c - prev_c
            price_change_percent = (price_change / prev_c * 100) if prev_c != 0 else 0
            
            # ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö range
            curr_range = curr_h - curr_l
            prev_range = prev_h - prev_l
            range_change_percent = ((curr_range - prev_range) / prev_range * 100) if prev_range != 0 else 0
            
            # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á
            price_threshold = 0.0001
            
            # ‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡∏õ‡∏¥‡∏î
            if curr_c > prev_c + price_threshold:
                price_direction = 'higher_close'
            elif curr_c < prev_c - price_threshold:
                price_direction = 'lower_close'
            else:
                price_direction = 'same_close'
            
            # Gap detection
            gap_up = curr_o > prev_h + price_threshold
            gap_down = curr_o < prev_l - price_threshold
            gap_type = 'up' if gap_up else 'down' if gap_down else 'none'
            
            # ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå high/low
            higher_high = curr_h > prev_h + price_threshold
            lower_low = curr_l < prev_l - price_threshold
            higher_low = curr_l > prev_l + price_threshold
            lower_high = curr_h < prev_h - price_threshold
            
            # Pattern relationship
            if higher_high and higher_low:
                trend_direction = 'bullish'
            elif lower_high and lower_low:
                trend_direction = 'bearish'
            else:
                trend_direction = 'sideways'
            
            return {
                'comparison_available': True,
                'price_change': round(price_change, 5),
                'price_change_percent': round(price_change_percent, 3),
                'price_direction': price_direction,
                'range_change_percent': round(range_change_percent, 2),
                'gap_type': gap_type,
                'gap_up': gap_up,
                'gap_down': gap_down,
                'higher_high': higher_high,
                'lower_low': lower_low,
                'higher_low': higher_low,
                'lower_high': lower_high,
                'trend_direction': trend_direction,
                'momentum': 'strong' if abs(price_change_percent) > 0.1 else 'weak'
            }
            
        except Exception as e:
            print(f"‚ùå Candle comparison error: {e}")
            return {'comparison_available': False}
    
    def _identify_candlestick_patterns(self, candles: List[Dict]) -> Dict:
        """
        üéØ ‡∏à‡∏î‡∏à‡∏≥ candlestick patterns - COMPLETE PATTERN RECOGNITION
        
        Args:
            candles: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
            
        Returns:
            Dict: ‡∏ú‡∏• pattern recognition
        """
        try:
            if len(candles) < 1:
                return {'pattern_name': 'insufficient_data', 'pattern_strength': 0.0}
            
            current = candles[-1]
            previous = candles[-2] if len(candles) >= 2 else None
            third = candles[-3] if len(candles) >= 3 else None
            
            # Single candle patterns
            single_pattern = self._identify_single_candle_patterns(current)
            
            # Two candle patterns
            two_pattern = self._identify_two_candle_patterns(current, previous) if previous else None
            
            # Three candle patterns
            three_pattern = self._identify_three_candle_patterns(current, previous, third) if third else None
            
            # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å pattern ‡∏ó‡∏µ‡πà‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î
            patterns = [single_pattern]
            if two_pattern:
                patterns.append(two_pattern)
            if three_pattern:
                patterns.append(three_pattern)
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° strength ‡πÅ‡∏•‡∏∞ confidence
            patterns.sort(key=lambda p: (p['pattern_strength'], p.get('pattern_confidence', 0)), reverse=True)
            
            best_pattern = patterns[0]
            
            # ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏° pattern history
            self._record_pattern_occurrence(best_pattern)
            
            return {
                'pattern_name': best_pattern['pattern_name'],
                'pattern_type': best_pattern.get('pattern_type', 'single'),
                'pattern_strength': best_pattern['pattern_strength'],
                'pattern_confidence': best_pattern.get('pattern_confidence', 0.5),
                'pattern_description': best_pattern.get('description', ''),
                'bullish_signal': best_pattern.get('bullish', False),
                'bearish_signal': best_pattern.get('bearish', False),
                'reversal_signal': best_pattern.get('reversal', False),
                'continuation_signal': best_pattern.get('continuation', False),
                'alternative_patterns': [p['pattern_name'] for p in patterns[1:3]]  # top 2 alternatives
            }
            
        except Exception as e:
            print(f"‚ùå Pattern identification error: {e}")
            return {
                'pattern_name': 'error',
                'pattern_strength': 0.0,
                'pattern_confidence': 0.0
            }
    
    def _identify_single_candle_patterns(self, candle: Dict) -> Dict:
        """üïØÔ∏è ‡∏à‡∏î‡∏à‡∏≥ single candle patterns"""
        try:
            o, h, l, c = candle['open'], candle['high'], candle['low'], candle['close']
            candle_range = h - l
            body_size = abs(c - o)
            body_ratio = body_size / candle_range if candle_range > 0.0001 else 0
            
            upper_shadow = h - max(o, c)
            lower_shadow = min(o, c) - l
            upper_ratio = upper_shadow / candle_range if candle_range > 0.0001 else 0
            lower_ratio = lower_shadow / candle_range if candle_range > 0.0001 else 0
            
            # Doji patterns
            if body_ratio <= self.doji_threshold:
                if upper_ratio > 0.4 and lower_ratio < 0.1:
                    return {
                        'pattern_name': 'dragonfly_doji',
                        'pattern_strength': 0.7,
                        'pattern_confidence': 0.8,
                        'bullish': True,
                        'reversal': True,
                        'description': 'Dragonfly Doji - Bullish reversal'
                    }
                elif lower_ratio > 0.4 and upper_ratio < 0.1:
                    return {
                        'pattern_name': 'gravestone_doji',
                        'pattern_strength': 0.7,
                        'pattern_confidence': 0.8,
                        'bearish': True,
                        'reversal': True,
                        'description': 'Gravestone Doji - Bearish reversal'
                    }
                else:
                    return {
                        'pattern_name': 'doji',
                        'pattern_strength': 0.5,
                        'pattern_confidence': 0.6,
                        'reversal': True,
                        'description': 'Standard Doji - Indecision'
                    }
            
            # Hammer patterns
            if lower_ratio >= 0.6 and upper_ratio <= 0.1 and body_ratio >= 0.1:
                bullish = c > o
                return {
                    'pattern_name': 'hammer' if bullish else 'hanging_man',
                    'pattern_strength': 0.8,
                    'pattern_confidence': 0.7,
                    'bullish': bullish,
                    'bearish': not bullish,
                    'reversal': True,
                    'description': f'{"Hammer - Bullish" if bullish else "Hanging Man - Bearish"} reversal'
                }
            
            # Shooting star / Inverted hammer
            if upper_ratio >= 0.6 and lower_ratio <= 0.1 and body_ratio >= 0.1:
                bullish = c > o
                return {
                    'pattern_name': 'inverted_hammer' if bullish else 'shooting_star',
                    'pattern_strength': 0.8,
                    'pattern_confidence': 0.7,
                    'bullish': bullish,
                    'bearish': not bullish,
                    'reversal': True,
                    'description': f'{"Inverted Hammer" if bullish else "Shooting Star"} reversal'
                }
            
            # Marubozu (strong body, minimal shadows)
            if body_ratio >= 0.9:
                bullish = c > o
                return {
                    'pattern_name': 'marubozu',
                    'pattern_strength': 0.9,
                    'pattern_confidence': 0.8,
                    'bullish': bullish,
                    'bearish': not bullish,
                    'continuation': True,
                    'description': f'{"Bullish" if bullish else "Bearish"} Marubozu - Strong continuation'
                }
            
            # Spinning top
            if 0.1 < body_ratio < 0.3 and upper_ratio > 0.2 and lower_ratio > 0.2:
                return {
                    'pattern_name': 'spinning_top',
                    'pattern_strength': 0.4,
                    'pattern_confidence': 0.5,
                    'reversal': True,
                    'description': 'Spinning Top - Market indecision'
                }
            
            # Regular candle (default)
            bullish = c > o
            strength = min(body_ratio, 0.8)  # Cap at 0.8
            
            return {
                'pattern_name': 'regular_candle',
                'pattern_strength': strength,
                'pattern_confidence': 0.5,
                'bullish': bullish,
                'bearish': not bullish,
                'continuation': True,
                'description': f'{"Bullish" if bullish else "Bearish"} regular candle'
            }
            
        except Exception as e:
            print(f"‚ùå Single pattern identification error: {e}")
            return {
                'pattern_name': 'error',
                'pattern_strength': 0.0,
                'pattern_confidence': 0.0
            }
    
    def _identify_two_candle_patterns(self, current: Dict, previous: Dict) -> Dict:
        """üïØÔ∏èüïØÔ∏è ‡∏à‡∏î‡∏à‡∏≥ two candle patterns"""
        try:
            curr_o, curr_h, curr_l, curr_c = current['open'], current['high'], current['low'], current['close']
            prev_o, prev_h, prev_l, prev_c = previous['open'], previous['high'], previous['low'], previous['close']
            
            curr_bullish = curr_c > curr_o
            prev_bullish = prev_c > prev_o
            
            curr_body = abs(curr_c - curr_o)
            prev_body = abs(prev_c - prev_o)
            
            curr_range = curr_h - curr_l
            prev_range = prev_h - prev_l
            
            # Engulfing patterns
            if curr_bullish and not prev_bullish:  # Bullish engulfing
                if curr_o < prev_c and curr_c > prev_o and curr_body > prev_body:
                    return {
                        'pattern_name': 'bullish_engulfing',
                        'pattern_type': 'two_candle',
                        'pattern_strength': 0.85,
                        'pattern_confidence': 0.8,
                        'bullish': True,
                        'reversal': True,
                        'description': 'Bullish Engulfing - Strong reversal signal'
                    }
            
            elif not curr_bullish and prev_bullish:  # Bearish engulfing
                if curr_o > prev_c and curr_c < prev_o and curr_body > prev_body:
                    return {
                        'pattern_name': 'bearish_engulfing',
                        'pattern_type': 'two_candle',
                        'pattern_strength': 0.85,
                        'pattern_confidence': 0.8,
                        'bearish': True,
                        'reversal': True,
                        'description': 'Bearish Engulfing - Strong reversal signal'
                    }
            
            # Piercing line / Dark cloud cover
            if prev_bullish and not curr_bullish:  # Dark cloud cover
                if curr_o > prev_h and curr_c < (prev_o + prev_c) / 2:
                    return {
                        'pattern_name': 'dark_cloud_cover',
                        'pattern_type': 'two_candle',
                        'pattern_strength': 0.7,
                        'pattern_confidence': 0.7,
                        'bearish': True,
                        'reversal': True,
                        'description': 'Dark Cloud Cover - Bearish reversal'
                    }
            
            elif not prev_bullish and curr_bullish:  # Piercing line
                if curr_o < prev_l and curr_c > (prev_o + prev_c) / 2:
                    return {
                        'pattern_name': 'piercing_line',
                        'pattern_type': 'two_candle',
                        'pattern_strength': 0.7,
                        'pattern_confidence': 0.7,
                        'bullish': True,
                        'reversal': True,
                        'description': 'Piercing Line - Bullish reversal'
                    }
            
            # Tweezer patterns
            if abs(curr_h - prev_h) < 0.0005:  # Tweezer tops
                return {
                    'pattern_name': 'tweezer_tops',
                    'pattern_type': 'two_candle',
                    'pattern_strength': 0.6,
                    'pattern_confidence': 0.6,
                    'bearish': True,
                    'reversal': True,
                    'description': 'Tweezer Tops - Bearish reversal'
                }
            
            elif abs(curr_l - prev_l) < 0.0005:  # Tweezer bottoms
                return {
                    'pattern_name': 'tweezer_bottoms',
                    'pattern_type': 'two_candle',
                    'pattern_strength': 0.6,
                    'pattern_confidence': 0.6,
                    'bullish': True,
                    'reversal': True,
                    'description': 'Tweezer Bottoms - Bullish reversal'
                }
            
            # Harami patterns
            if curr_h < prev_h and curr_l > prev_l:  # Inside day
                if curr_body < prev_body * 0.5:  # Small body inside large body
                    return {
                        'pattern_name': 'harami',
                        'pattern_type': 'two_candle',
                        'pattern_strength': 0.6,
                        'pattern_confidence': 0.6,
                        'reversal': True,
                        'description': 'Harami - Reversal signal'
                    }
            
            # Default: no significant two-candle pattern
            return {
                'pattern_name': 'no_two_pattern',
                'pattern_type': 'two_candle',
                'pattern_strength': 0.3,
                'pattern_confidence': 0.3,
                'description': 'No significant two-candle pattern'
            }
            
        except Exception as e:
            print(f"‚ùå Two candle pattern error: {e}")
            return {
                'pattern_name': 'two_pattern_error',
                'pattern_strength': 0.0,
                'pattern_confidence': 0.0
            }
    
    def _identify_three_candle_patterns(self, current: Dict, previous: Dict, third: Dict) -> Dict:
        """üïØÔ∏èüïØÔ∏èüïØÔ∏è ‡∏à‡∏î‡∏à‡∏≥ three candle patterns"""
        try:
            # Morning star / Evening star patterns
            curr_bullish = current['close'] > current['open']
            prev_body_small = abs(previous['close'] - previous['open']) < (previous['high'] - previous['low']) * 0.3
            third_bullish = third['close'] > third['open']
            
            # Morning Star
            if not third_bullish and prev_body_small and curr_bullish:
                if (current['close'] > (third['open'] + third['close']) / 2 and 
                    previous['low'] < min(third['low'], current['low'])):
                    return {
                        'pattern_name': 'morning_star',
                        'pattern_type': 'three_candle',
                        'pattern_strength': 0.9,
                        'pattern_confidence': 0.8,
                        'bullish': True,
                        'reversal': True,
                        'description': 'Morning Star - Strong bullish reversal'
                    }
            
            # Evening Star
            elif third_bullish and prev_body_small and not curr_bullish:
                if (current['close'] < (third['open'] + third['close']) / 2 and 
                    previous['high'] > max(third['high'], current['high'])):
                    return {
                        'pattern_name': 'evening_star',
                        'pattern_type': 'three_candle',
                        'pattern_strength': 0.9,
                        'pattern_confidence': 0.8,
                        'bearish': True,
                        'reversal': True,
                        'description': 'Evening Star - Strong bearish reversal'
                    }
            
            # Three white soldiers / Three black crows
            if curr_bullish and (previous['close'] > previous['open']) and third_bullish:
                if (current['close'] > previous['close'] > third['close'] and
                    current['open'] > previous['open'] > third['open']):
                    return {
                        'pattern_name': 'three_white_soldiers',
                        'pattern_type': 'three_candle',
                        'pattern_strength': 0.8,
                        'pattern_confidence': 0.7,
                        'bullish': True,
                        'continuation': True,
                        'description': 'Three White Soldiers - Strong bullish continuation'
                    }
            
            elif not curr_bullish and (previous['close'] < previous['open']) and not third_bullish:
                if (current['close'] < previous['close'] < third['close'] and
                    current['open'] < previous['open'] < third['open']):
                    return {
                        'pattern_name': 'three_black_crows',
                        'pattern_type': 'three_candle',
                        'pattern_strength': 0.8,
                        'pattern_confidence': 0.7,
                        'bearish': True,
                        'continuation': True,
                        'description': 'Three Black Crows - Strong bearish continuation'
                    }
            
            # Default: no three-candle pattern
            return {
                'pattern_name': 'no_three_pattern',
                'pattern_type': 'three_candle',
                'pattern_strength': 0.2,
                'pattern_confidence': 0.2,
                'description': 'No significant three-candle pattern'
            }
            
        except Exception as e:
            print(f"‚ùå Three candle pattern error: {e}")
            return {
                'pattern_name': 'three_pattern_error',
                'pattern_strength': 0.0,
                'pattern_confidence': 0.0
            }
    
    def _analyze_volume_confirmation(self, candles: List[Dict]) -> Dict:
        """
        üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå volume confirmation - COMPLETE
        
        Args:
            candles: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
            
        Returns:
            Dict: ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå volume
        """
        try:
            if not self.volume_confirmation_enabled:
                return {
                    'volume_available': False,
                    'volume_confirmation': False,
                    'volume_analysis': 'disabled',
                    'volume_strength': 0.0
                }
            
            current = candles[-1]
            current_volume = current.get('real_volume', 0)
            
            # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ volume data ‡∏´‡∏£‡∏∑‡∏≠ volume = 0
            if current_volume <= 0:
                if self.volume_fallback_enabled:
                    return {
                        'volume_available': False,
                        'volume_confirmation': True,  # ‡πÉ‡∏ä‡πâ fallback
                        'volume_analysis': 'fallback_confirmation',
                        'volume_strength': 0.5,
                        'fallback_reason': 'no_volume_data'
                    }
                else:
                    return {
                        'volume_available': False,
                        'volume_confirmation': False,
                        'volume_analysis': 'no_data',
                        'volume_strength': 0.0
                    }
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì average volume
            if not self.volume_history or len(self.volume_history) < 5:
                # ‡πÑ‡∏°‡πà‡∏°‡∏µ history ‡∏û‡∏≠ ‡πÉ‡∏ä‡πâ fallback
                return {
                    'volume_available': True,
                    'volume_confirmation': True,
                    'volume_analysis': 'insufficient_history',
                    'volume_strength': 0.6,
                    'current_volume': current_volume,
                    'fallback_reason': 'insufficient_volume_history'
                }
            
            # ‡∏°‡∏µ volume history ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠
            avg_volume = statistics.mean(self.volume_history)
            volume_ratio = current_volume / avg_volume if avg_volume > 0 else 1.0
            
            # Volume confirmation logic
            volume_confirmed = volume_ratio >= 1.2  # 120% of average
            volume_spike = volume_ratio >= self.volume_spike_threshold  # 150% of average
            
            # Volume strength calculation
            if volume_spike:
                volume_strength = min(0.9, 0.5 + (volume_ratio - 1.5) * 0.2)
            elif volume_confirmed:
                volume_strength = 0.5 + (volume_ratio - 1.2) * 0.3
            else:
                volume_strength = max(0.1, volume_ratio * 0.4)
            
            # Volume analysis description
            if volume_spike:
                analysis = 'volume_spike'
            elif volume_confirmed:
                analysis = 'volume_confirmed'
            elif volume_ratio > 0.8:
                analysis = 'normal_volume'
            else:
                analysis = 'low_volume'
            
            return {
                'volume_available': True,
                'volume_confirmation': volume_confirmed,
                'volume_spike': volume_spike,
                'volume_analysis': analysis,
                'volume_strength': round(volume_strength, 3),
                'current_volume': current_volume,
                'average_volume': round(avg_volume, 0),
                'volume_ratio': round(volume_ratio, 2),
                'volume_percentile': self._calculate_volume_percentile(current_volume)
            }
            
        except Exception as e:
            print(f"‚ùå Volume analysis error: {e}")
            # Fallback on error
            return {
                'volume_available': False,
                'volume_confirmation': True,
                'volume_analysis': 'error_fallback',
                'volume_strength': 0.5,
                'error': str(e)
            }
    
    def _analyze_market_context(self, candles: List[Dict]) -> Dict:
        """
        üåç ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå market context - COMPLETE
        
        Args:
            candles: ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô
            
        Returns:
            Dict: ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå market context
        """
        try:
            current_time = datetime.now()
            current_candle = candles[-1]
            
            # Trading session detection
            session_info = self._detect_trading_session(current_time)
            
            # Market volatility analysis
            volatility_info = self._analyze_market_volatility(candles)
            
            # Trend analysis (short-term)
            trend_info = self._analyze_short_term_trend(candles)
            
            # Support/Resistance levels
            sr_info = self._analyze_support_resistance(candles)
            
            return {
                **session_info,
                **volatility_info,
                **trend_info,
                **sr_info,
                'market_context_timestamp': current_time,
                'context_quality': self._calculate_context_quality(session_info, volatility_info, trend_info)
            }
            
        except Exception as e:
            print(f"‚ùå Market context analysis error: {e}")
            return {
                'trading_session': 'unknown',
                'volatility_level': 'medium',
                'trend_direction': 'sideways',
                'context_quality': 0.3
            }
    
    # ==========================================
    # üîß HELPER & UTILITY METHODS - COMPLETE  
    # ==========================================
    
    def _validate_connection(self) -> bool:
        """‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠"""
        try:
            if not self.mt5_connector:
                print("‚ùå No MT5 connector")
                return False
            
            if not self.mt5_connector.is_connected:
                print("‚ùå MT5 not connected")
                return False
            
            if not self.symbol:
                print("‚ùå No symbol specified")
                return False
            
            return True
            
        except Exception as e:
            print(f"‚ùå Connection validation error: {e}")
            return False
    
    def _validate_ohlc_data(self, candle: Dict) -> bool:
        """‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á OHLC data"""
        try:
            o, h, l, c = candle['open'], candle['high'], candle['low'], candle['close']
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç
            if not all(isinstance(x, (int, float)) for x in [o, h, l, c]):
                return False
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ö‡∏ß‡∏Å
            if not all(x > 0 for x in [o, h, l, c]):
                return False
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏±‡∏°‡∏û‡∏±‡∏ô‡∏ò‡πå OHLC
            if not (l <= min(o, c) <= max(o, c) <= h):
                return False
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ high >= low
            if h < l:
                return False
            
            return True
            
        except Exception as e:
            return False
    
    def _validate_basic_candle_data(self, candle: Dict) -> bool:
        """‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô"""
        try:
            required_fields = ['time', 'open', 'high', 'low', 'close']
            
            for field in required_fields:
                if field not in candle:
                    return False
            
            return self._validate_ohlc_data(candle)
            
        except Exception as e:
            return False
    
    def _enhance_candle_data(self, candle: Dict) -> Dict:
        """üîß ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡∏¥‡∏°‡πÉ‡∏´‡πâ‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô"""
        try:
            enhanced = candle.copy()
            
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° datetime ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ
            if 'datetime' not in enhanced:
                enhanced['datetime'] = datetime.fromtimestamp(candle['time'])
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏™‡∏£‡∏¥‡∏°
            o, h, l, c = candle['open'], candle['high'], candle['low'], candle['close']
            
            enhanced.update({
                'range': h - l,
                'body_size': abs(c - o),
                'upper_shadow': h - max(o, c),
                'lower_shadow': min(o, c) - l,
                'is_bullish': c > o,
                'is_bearish': c < o,
                'midpoint': (h + l) / 2,
                'typical_price': (h + l + c) / 3
            })
            
            return enhanced
            
        except Exception as e:
            print(f"‚ùå Enhance candle data error: {e}")
            return candle
    
    def _generate_candle_signature(self, candle: Dict) -> str:
        """üîë ‡∏™‡∏£‡πâ‡∏≤‡∏á signature ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô"""
        try:
            timestamp = candle['time']
            close_price = candle['close']
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á signature ‡∏ó‡∏µ‡πà unique
            signature = f"CANDLE_{timestamp}_{close_price:.2f}_{candle.get('tick_volume', 0)}"
            
            return signature
            
        except Exception as e:
            return f"CANDLE_ERROR_{int(time.time())}"
    
    def _is_already_processed(self, signature: str) -> bool:
        """üîí ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ signature ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á"""
        try:
            is_processed = signature in self.processed_signatures
            
            if not is_processed:
                # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏ô set ‡πÅ‡∏•‡∏∞‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏ñ‡πâ‡∏≤‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô
                self.processed_signatures.add(signature)
                
                if len(self.processed_signatures) > self.max_signature_history:
                    # ‡πÄ‡∏Å‡πá‡∏ö‡πÅ‡∏Ñ‡πà 400 signatures ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
                    signatures_list = list(self.processed_signatures)
                    self.processed_signatures = set(signatures_list[-400:])
            
            return is_processed
            
        except Exception as e:
            print(f"‚ùå Signature check error: {e}")
            return False
    
    def _record_successful_analysis(self, signature: str, analysis: Dict):
        """üìù ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ó‡∏µ‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"""
        try:
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å signature
            self.processed_signatures.add(signature)
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á persistence ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
            if self.persistence_manager:
                self.persistence_manager.save_processed_signatures(self.processed_signatures)
            
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó cache
            self.cached_analysis = analysis
            self.last_analysis_time = datetime.now()
            
        except Exception as e:
            print(f"‚ùå Record successful analysis error: {e}")
    
    def _update_volume_tracking(self, candles: List[Dict]):
        """üìä ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó volume tracking"""
        try:
            if not candles:
                return
            
            # ‡∏î‡∏∂‡∏á volume ‡∏à‡∏≤‡∏Å‡πÅ‡∏ó‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            latest_volumes = []
            
            for candle in candles[-self.max_volume_history:]:
                volume = candle.get('real_volume', 0)
                if volume > 0:
                    latest_volumes.append(volume)
            
            if latest_volumes:
                self.volume_history = latest_volumes
                self.avg_volume = statistics.mean(latest_volumes)
                self.volume_available = True
                
                print(f"üìä Volume updated: {len(latest_volumes)} samples, avg: {self.avg_volume:.0f}")
            else:
                self.volume_available = False
                print(f"üìä No volume data available")
                
        except Exception as e:
            print(f"‚ùå Volume tracking error: {e}")
            self.volume_available = False
    
    def _record_pattern_occurrence(self, pattern: Dict):
        """üìà ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏¥‡∏î pattern"""
        try:
            pattern_name = pattern['pattern_name']
            
            if pattern_name not in self.pattern_success_rates:
                self.pattern_success_rates[pattern_name] = {
                    'occurrences': 0,
                    'total_strength': 0.0,
                    'avg_strength': 0.0
                }
            
            stats = self.pattern_success_rates[pattern_name]
            stats['occurrences'] += 1
            stats['total_strength'] += pattern['pattern_strength']
            stats['avg_strength'] = stats['total_strength'] / stats['occurrences']
            
            # ‡πÄ‡∏Å‡πá‡∏ö history (‡∏à‡∏≥‡∏Å‡∏±‡∏î‡∏ó‡∏µ‡πà 100)
            self.pattern_history.append({
                'timestamp': datetime.now(),
                'pattern_name': pattern_name,
                'strength': pattern['pattern_strength']
            })
            
            if len(self.pattern_history) > 100:
                self.pattern_history = self.pattern_history[-100:]
                
        except Exception as e:
            print(f"‚ùå Pattern recording error: {e}")
    
    def _calculate_analysis_strength(self, basic: Dict, comparison: Dict, pattern: Dict, volume: Dict) -> float:
        """üí™ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏£‡∏á‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"""
        try:
            # Base strength from pattern
            pattern_strength = pattern.get('pattern_strength', 0.5)
            pattern_confidence = pattern.get('pattern_confidence', 0.5)
            
            # Volume contribution
            volume_strength = volume.get('volume_strength', 0.5)
            volume_weight = 0.3 if volume.get('volume_available') else 0.1
            
            # Body ratio contribution
            body_ratio = basic.get('body_ratio', 0.3)
            body_strength = min(body_ratio * 1.5, 1.0)  # Cap at 1.0
            
            # Comparison strength
            comparison_strength = 0.5
            if comparison.get('comparison_available'):
                momentum = comparison.get('momentum', 'weak')
                comparison_strength = 0.7 if momentum == 'strong' else 0.5
            
            # Calculate weighted average
            weights = {
                'pattern': 0.4,
                'volume': volume_weight,
                'body': 0.2,
                'comparison': 0.3 - (volume_weight - 0.1)  # Adjust for volume weight
            }
            
            total_strength = (
                pattern_strength * pattern_confidence * weights['pattern'] +
                volume_strength * weights['volume'] +
                body_strength * weights['body'] +
                comparison_strength * weights['comparison']
            )
            
            return round(min(total_strength, 1.0), 3)
            
        except Exception as e:
            print(f"‚ùå Analysis strength calculation error: {e}")
            return 0.5
    
    def _calculate_analysis_quality(self, candles: List[Dict]) -> float:
        """üéØ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå"""
        try:
            quality_score = 0.5  # Base score
            
            # Data quantity factor
            data_factor = min(len(candles) / 10.0, 1.0)  # Full score at 10+ candles
            quality_score += data_factor * 0.2
            
            # Volume availability factor
            if self.volume_available:
                quality_score += 0.1
            
            # Time consistency factor
            if self.analysis_count > 0:
                success_rate = self.successful_analysis / self.analysis_count
                quality_score += success_rate * 0.2
            
            return round(min(quality_score, 1.0), 3)
            
        except Exception as e:
            return 0.5
    
    def _detect_trading_session(self, current_time: datetime) -> Dict:
        """üåç ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö trading session"""
        try:
            hour = current_time.hour
            
            # Convert to major trading sessions (approximate)
            if 1 <= hour < 9:
                session = 'asian'
                session_activity = 'medium'
            elif 9 <= hour < 17:
                session = 'london'
                session_activity = 'high'
            elif 17 <= hour <= 23:
                session = 'newyork'
                session_activity = 'high'
            else:
                session = 'quiet'
                session_activity = 'low'
            
            # Overlap periods
            overlap = None
            if 9 <= hour < 11:
                overlap = 'london_asian'
            elif 17 <= hour < 19:
                overlap = 'london_newyork'
            
            return {
                'trading_session': session,
                'session_activity': session_activity,
                'session_overlap': overlap,
                'session_hour': hour
            }
            
        except Exception as e:
            return {
                'trading_session': 'unknown',
                'session_activity': 'medium'
            }
    
    def _analyze_market_volatility(self, candles: List[Dict]) -> Dict:
        """üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏±‡∏ô‡∏ú‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏•‡∏≤‡∏î"""
        try:
            if len(candles) < 5:
                return {'volatility_level': 'unknown', 'volatility_score': 0.5}
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì average range ‡∏Ç‡∏≠‡∏á 5 ‡πÅ‡∏ó‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            recent_ranges = []
            for candle in candles[-5:]:
                range_val = candle['high'] - candle['low']
                recent_ranges.append(range_val)
            
            avg_range = statistics.mean(recent_ranges)
            current_range = candles[-1]['high'] - candles[-1]['low']
            
            # Volatility assessment
            volatility_ratio = current_range / avg_range if avg_range > 0 else 1.0
            
            if volatility_ratio >= 1.5:
                volatility_level = 'high'
                volatility_score = 0.8
            elif volatility_ratio >= 1.2:
                volatility_level = 'medium_high'
                volatility_score = 0.7
            elif volatility_ratio >= 0.8:
                volatility_level = 'medium'
                volatility_score = 0.5
            else:
                volatility_level = 'low'
                volatility_score = 0.3
            
            return {
                'volatility_level': volatility_level,
                'volatility_score': volatility_score,
                'volatility_ratio': round(volatility_ratio, 2),
                'current_range': round(current_range, 4),
                'avg_range': round(avg_range, 4)
            }
            
        except Exception as e:
            return {
                'volatility_level': 'medium',
                'volatility_score': 0.5
            }
    
    def _analyze_short_term_trend(self, candles: List[Dict]) -> Dict:
        """üìà ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå‡∏£‡∏∞‡∏¢‡∏∞‡∏™‡∏±‡πâ‡∏ô"""
        try:
            if len(candles) < 3:
                return {'trend_direction': 'sideways', 'trend_strength': 0.5}
            
            # ‡πÉ‡∏ä‡πâ 3 ‡πÅ‡∏ó‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏ó‡∏£‡∏ô‡∏î‡πå
            closes = [candle['close'] for candle in candles[-3:]]
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
            change1 = closes[1] - closes[0]
            change2 = closes[2] - closes[1]
            total_change = closes[2] - closes[0]
            
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ó‡∏¥‡∏®‡∏ó‡∏≤‡∏á
            threshold = 0.0005  # Threshold ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥
            
            if total_change > threshold and change1 > 0 and change2 > 0:
                trend_direction = 'bullish'
                trend_strength = 0.8
            elif total_change < -threshold and change1 < 0 and change2 < 0:
                trend_direction = 'bearish'
                trend_strength = 0.8
            elif abs(total_change) > threshold:
                if total_change > 0:
                    trend_direction = 'bullish_weak'
                    trend_strength = 0.6
                else:
                    trend_direction = 'bearish_weak'
                    trend_strength = 0.6
            else:
                trend_direction = 'sideways'
                trend_strength = 0.4
            
            return {
                'trend_direction': trend_direction,
                'trend_strength': trend_strength,
                'total_change': round(total_change, 5),
                'trend_consistency': 1.0 if (change1 > 0) == (change2 > 0) else 0.5
            }
            
        except Exception as e:
            return {
                'trend_direction': 'sideways',
                'trend_strength': 0.5
            }
    
    def _analyze_support_resistance(self, candles: List[Dict]) -> Dict:
        """üìä ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Support/Resistance ‡∏£‡∏∞‡∏¢‡∏∞‡∏™‡∏±‡πâ‡∏ô"""
        try:
            if len(candles) < 5:
                return {'sr_analysis': 'insufficient_data'}
            
            # ‡πÉ‡∏ä‡πâ high/low ‡∏Ç‡∏≠‡∏á 5 ‡πÅ‡∏ó‡πà‡∏á‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            highs = [candle['high'] for candle in candles[-5:]]
            lows = [candle['low'] for candle in candles[-5:]]
            
            current = candles[-1]
            current_close = current['close']
            
            # ‡∏´‡∏≤ potential resistance (highest high)
            max_high = max(highs)
            resistance_distance = abs(current_close - max_high)
            
            # ‡∏´‡∏≤ potential support (lowest low)
            min_low = min(lows)
            support_distance = abs(current_close - min_low)
            
            # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏Å‡∏•‡πâ
            close_threshold = 0.002  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏≠‡∏á‡∏Ñ‡∏≥
            
            near_resistance = resistance_distance < close_threshold
            near_support = support_distance < close_threshold
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì position ‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á
            range_size = max_high - min_low
            position_in_range = (current_close - min_low) / range_size if range_size > 0 else 0.5
            
            return {
                'sr_analysis': 'available',
                'resistance_level': round(max_high, 4),
                'support_level': round(min_low, 4),
                'near_resistance': near_resistance,
                'near_support': near_support,
                'position_in_range': round(position_in_range, 2),
                'range_size': round(range_size, 4)
            }
            
        except Exception as e:
            return {'sr_analysis': 'error'}
    
    def _calculate_volume_percentile(self, current_volume: float) -> float:
        """üìä ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì volume percentile"""
        try:
            if not self.volume_history or len(self.volume_history) < 5:
                return 50.0  # Default middle percentile
            
            sorted_volumes = sorted(self.volume_history)
            
            # ‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏Ç‡∏≠‡∏á current_volume
            position = 0
            for vol in sorted_volumes:
                if current_volume > vol:
                    position += 1
                else:
                    break
            
            percentile = (position / len(sorted_volumes)) * 100
            return round(percentile, 1)
            
        except Exception as e:
            return 50.0
    
    def _calculate_context_quality(self, session_info: Dict, volatility_info: Dict, trend_info: Dict) -> float:
        """üéØ ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á context"""
        try:
            quality_score = 0.3  # Base score
            
            # Session quality
            activity = session_info.get('session_activity', 'medium')
            if activity == 'high':
                quality_score += 0.3
            elif activity == 'medium':
                quality_score += 0.2
            else:
                quality_score += 0.1
            
            # Volatility contribution
            vol_level = volatility_info.get('volatility_level', 'medium')
            if vol_level in ['medium', 'medium_high']:
                quality_score += 0.2
            elif vol_level == 'high':
                quality_score += 0.1
            else:
                quality_score += 0.05
            
            # Trend clarity
            trend_strength = trend_info.get('trend_strength', 0.5)
            quality_score += trend_strength * 0.2
            
            return round(min(quality_score, 1.0), 2)
            
        except Exception as e:
            return 0.5
    
    def _is_cache_valid(self) -> bool:
        """üîß ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Cache"""
        try:
            if self.cached_analysis is None:
                return False
            
            time_diff = (datetime.now() - self.last_analysis_time).total_seconds()
            return time_diff < self.cache_duration_seconds
            
        except Exception as e:
            return False
    
    def _get_fallback_analysis(self) -> Dict:
        """‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• fallback ‡πÄ‡∏°‡∏∑‡πà‡∏≠ analysis ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß"""
        return {
            'candle_color': 'neutral',
            'body_ratio': 0.1,
            'pattern_name': 'error',
            'pattern_strength': 0.0,
            'analysis_strength': 0.0,
            'volume_confirmation': True,  # Fallback confirmation
            'trading_session': 'unknown',
            'volatility_level': 'medium',
            'trend_direction': 'sideways',
            'error': True,
            'timestamp': int(time.time()),
            'datetime': datetime.now()
        }
    
    # ==========================================
    # üìä STATISTICS & MONITORING METHODS
    # ==========================================
    
    def get_analysis_statistics(self) -> Dict:
        """üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô"""
        try:
            total_attempts = self.analysis_count
            success_rate = (self.successful_analysis / total_attempts * 100) if total_attempts > 0 else 0
            block_rate = (self.duplicate_blocks / total_attempts * 100) if total_attempts > 0 else 0
            
            return {
                'total_analysis_attempts': total_attempts,
                'successful_analysis': self.successful_analysis,
                'duplicate_blocks': self.duplicate_blocks,
                'time_order_errors': self.time_order_errors,
                'invalid_data_errors': self.invalid_data_errors,
                'success_rate_percent': round(success_rate, 1),
                'block_rate_percent': round(block_rate, 1),
                'signatures_tracked': len(self.processed_signatures),
                'volume_available': self.volume_available,
                'avg_volume': round(self.avg_volume, 0) if self.volume_available else 0,
                'cache_valid': self._is_cache_valid(),
                'last_analysis': self.last_analysis_time.isoformat() if self.last_analysis_time != datetime.min else 'Never'
            }
            
        except Exception as e:
            return {'error': str(e)}
    
    def get_pattern_statistics(self) -> Dict:
        """üìà ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ patterns"""
        try:
            if not self.pattern_success_rates:
                return {'message': 'No pattern data available'}
            
            # ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏¥‡∏î
            sorted_patterns = sorted(
                self.pattern_success_rates.items(),
                key=lambda x: x[1]['occurrences'],
                reverse=True
            )
            
            pattern_stats = {}
            for pattern_name, stats in sorted_patterns[:10]:  # Top 10
                pattern_stats[pattern_name] = {
                    'occurrences': stats['occurrences'],
                    'avg_strength': round(stats['avg_strength'], 3),
                    'total_strength': round(stats['total_strength'], 3)
                }
            
            return {
                'total_patterns_tracked': len(self.pattern_success_rates),
                'pattern_history_count': len(self.pattern_history),
                'top_patterns': pattern_stats,
                'most_frequent': sorted_patterns[0][0] if sorted_patterns else 'none'
            }
            
        except Exception as e:
            return {'error': str(e)}
    
    def force_cache_refresh(self):
        """üîÑ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö refresh cache"""
        try:
            self.cached_analysis = None
            self.last_analysis_time = datetime.min
            print(f"üîÑ Analysis cache force refreshed")
        except Exception as e:
            print(f"‚ùå Cache refresh error: {e}")
    
    def clear_processed_signatures(self, confirm: bool = False):
        """üóëÔ∏è ‡∏•‡πâ‡∏≤‡∏á processed signatures"""
        if not confirm:
            print("‚ùå Signature clearing aborted: confirm=False")
            return False
        
        try:
            old_count = len(self.processed_signatures)
            self.processed_signatures.clear()
            print(f"üóëÔ∏è Cleared {old_count} processed signatures")
            return True
        except Exception as e:
            print(f"‚ùå Clear signatures error: {e}")
            return False
    
    def reset_statistics(self):
        """üîÑ ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥"""
        try:
            self.analysis_count = 0
            self.duplicate_blocks = 0
            self.successful_analysis = 0
            self.time_order_errors = 0
            self.invalid_data_errors = 0
            self.pattern_history.clear()
            self.pattern_success_rates.clear()
            
            print("üîÑ Analysis statistics reset")
            
        except Exception as e:
            print(f"‚ùå Reset statistics error: {e}")
    
    # ==========================================
    # üîß CONFIGURATION & MANAGEMENT
    # ==========================================
    
    def update_configuration(self, new_config: Dict):
        """‚öôÔ∏è ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤"""
        try:
            # ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
            if 'symbol' in new_config:
                self.symbol = new_config['symbol']
            
            if 'cache_duration_seconds' in new_config:
                self.cache_duration_seconds = max(1, int(new_config['cache_duration_seconds']))
            
            if 'doji_threshold' in new_config:
                self.doji_threshold = max(0.01, min(0.2, float(new_config['doji_threshold'])))
            
            if 'strong_body_threshold' in new_config:
                self.strong_body_threshold = max(0.3, min(0.9, float(new_config['strong_body_threshold'])))
            
            if 'volume_confirmation_enabled' in new_config:
                self.volume_confirmation_enabled = bool(new_config['volume_confirmation_enabled'])
            
            if 'strict_time_checking' in new_config:
                self.strict_time_checking = bool(new_config['strict_time_checking'])
            
            # Force cache refresh after config change
            self.force_cache_refresh()
            
            print(f"‚öôÔ∏è Configuration updated")
            
        except Exception as e:
            print(f"‚ùå Configuration update error: {e}")
    
    def get_current_configuration(self) -> Dict:
        """‚öôÔ∏è ‡∏î‡∏∂‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
        return {
            'symbol': self.symbol,
            'timeframe': 'M1',
            'cache_duration_seconds': self.cache_duration_seconds,
            'min_candles_required': self.min_candles_required,
            'max_candles_lookback': self.max_candles_lookback,
            'doji_threshold': self.doji_threshold,
            'strong_body_threshold': self.strong_body_threshold,
            'volume_confirmation_enabled': self.volume_confirmation_enabled,
            'volume_fallback_enabled': self.volume_fallback_enabled,
            'strict_time_checking': self.strict_time_checking,
            'real_time_mode': self.real_time_mode,
            'max_signature_history': self.max_signature_history
        }
    
    def is_ready(self) -> bool:
        """‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°"""
        return (
            self.mt5_connector is not None and
            self.mt5_connector.is_connected and
            self.symbol is not None
        )
    
    def get_analyzer_info(self) -> Dict:
        """‚ÑπÔ∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Candlestick Analyzer"""
        return {
            'name': 'Pure Candlestick Analyzer',
            'version': '2.0.0',
            'symbol': self.symbol,
            'timeframe': 'M1',
            'features': [
                'OHLC Data Collection',
                'Pattern Recognition',
                'Volume Analysis',
                'Market Context Analysis',
                'Real-time Processing',
                'Duplicate Prevention',
                'Performance Tracking',
                'Persistence Integration'
            ],
            'status': {
                'ready': self.is_ready(),
                'volume_available': self.volume_available,
                'cache_valid': self._is_cache_valid(),
                'persistence_connected': self.persistence_manager is not None
            },
            'configuration': self.get_current_configuration(),
            'statistics': self.get_analysis_statistics()
        }
    
    def get_debug_info(self) -> Dict:
        """üîç ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• debug ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö troubleshooting"""
        try:
            return {
                'analyzer_status': {
                    'is_ready': self.is_ready(),
                    'mt5_connected': self.mt5_connector.is_connected if self.mt5_connector else False,
                    'symbol': self.symbol,
                    'timeframe': 'M1'
                },
                'cache_info': {
                    'last_analysis_time': self.last_analysis_time.isoformat() if self.last_analysis_time != datetime.min else 'Never',
                    'last_candle_time': self.last_analyzed_candle_time.isoformat() if self.last_analyzed_candle_time != datetime.min else 'Never',
                    'cache_valid': self._is_cache_valid(),
                    'cache_duration': self.cache_duration_seconds
                },
                'signature_tracking': {
                    'processed_count': len(self.processed_signatures),
                    'max_history': self.max_signature_history,
                    'recent_signatures': list(self.processed_signatures)[-5:] if self.processed_signatures else []
                },
                'performance': {
                    'total_analysis': self.analysis_count,
                    'duplicate_blocks': self.duplicate_blocks,
                    'successful_analysis': self.successful_analysis,
                    'block_rate': round((self.duplicate_blocks / self.analysis_count * 100) if self.analysis_count > 0 else 0, 1),
                    'success_rate': round((self.successful_analysis / self.analysis_count * 100) if self.analysis_count > 0 else 0, 1)
                },
                'volume_info': {
                    'available': self.volume_available,
                    'history_count': len(self.volume_history),
                    'avg_volume': round(self.avg_volume, 0) if self.volume_available else 0
                },
                'pattern_info': {
                    'patterns_tracked': len(self.pattern_success_rates),
                    'pattern_history': len(self.pattern_history)
                },
                'error_tracking': {
                    'time_order_errors': self.time_order_errors,
                    'invalid_data_errors': self.invalid_data_errors
                }
            }
            
        except Exception as e:
            return {'debug_error': str(e)}
    
    # ==========================================
    # üíæ PERSISTENCE INTEGRATION
    # ==========================================
    
    def save_to_persistence(self) -> bool:
        """üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á persistence"""
        try:
            if not self.persistence_manager:
                return False
            
            # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å processed signatures
            success = self.persistence_manager.save_processed_signatures(self.processed_signatures)
            
            if success:
                print("üíæ Analyzer data saved to persistence")
            
            return success
            
        except Exception as e:
            print(f"‚ùå Save to persistence error: {e}")
            return False
    
    def load_from_persistence(self) -> bool:
        """üìÇ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å persistence"""
        try:
            if not self.persistence_manager:
                return False
            
            # ‡πÇ‡∏´‡∏•‡∏î processed signatures
            loaded_signatures = self.persistence_manager.load_processed_signatures()
            
            if loaded_signatures:
                self.processed_signatures.update(loaded_signatures)
                print(f"üìÇ Loaded {len(loaded_signatures)} processed signatures")
                return True
            
            return False
            
        except Exception as e:
            print(f"‚ùå Load from persistence error: {e}")
            return False