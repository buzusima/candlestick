"""
üéÆ Enhanced Pure Candlestick Trading System - LOT-AWARE GUI
main.py

üîß ENHANCED FEATURES:
‚úÖ Lot Efficiency Display
‚úÖ Margin Usage Visualization
‚úÖ Volume Balance Indicator
‚úÖ Enhanced Position Table
‚úÖ Smart Close Recommendations

üÜï NEW DISPLAYS:
üí∞ Profit Per Lot Column
üìä Margin Efficiency Indicator  
‚öñÔ∏è Portfolio Balance Chart
üéØ Close Priority Display
"""

import tkinter as tk
from tkinter import ttk, messagebox, scrolledtext
import threading
import time
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any

# Import ‡∏£‡∏∞‡∏ö‡∏ö‡πÄ‡∏î‡∏¥‡∏° (mt5_connector + api_connector ‡∏Ñ‡∏á‡πÄ‡∏î‡∏¥‡∏°)
from mt5_connector import MT5Connector
from api_connector import BackendAPIConnector

# Import ‡∏£‡∏∞‡∏ö‡∏ö Pure Candlestick ‡πÉ‡∏´‡∏°‡πà
from candlestick_analyzer import CandlestickAnalyzer
from signal_generator import SignalGenerator
from order_executor import OrderExecutor
from performance_tracker import PerformanceTracker
from risk_manager import RiskManager
from data_persistence import create_persistence_manager, integrate_with_analyzer, integrate_with_generator
from position_monitor import PositionMonitor

class EnhancedPureCandlestickGUI:
    """
    üéÆ Enhanced Pure Candlestick GUI - LOT-AWARE VERSION
    
    üÜï Features:
    - Lot efficiency display
    - Margin optimization visualization
    - Volume balance monitoring  
    - Enhanced close recommendations
    """
    
    def __init__(self, root):
        self.root = root
        self.root.title("üïØÔ∏è Enhanced Pure Candlestick Trading System v2.0 (Lot-Aware)")
        self.root.geometry("1500x900")  # ‡∏Ç‡∏¢‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°
        self.root.configure(bg="#1a1a1a")
        
        # ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏£‡∏∞‡∏ö‡∏ö (‡πÄ‡∏î‡∏¥‡∏°)
        self.config = self.load_config()
        self.is_trading = False
        self.trading_thread = None
        
        # Initialize Components (‡πÄ‡∏î‡∏¥‡∏°)
        self.mt5_connector = MT5Connector()
        self.api_connector = None
        self.candlestick_analyzer = None
        self.signal_generator = None  
        self.order_executor = None
        self.position_monitor = None  # ‡∏à‡∏∞‡πÉ‡∏ä‡πâ enhanced version
        self.performance_tracker = None
        self.risk_manager = None
        self.persistence_manager = None

        # üÜï Enhanced GUI variables
        self.lot_efficiency_data = {}
        self.margin_analysis_data = {}
        self.portfolio_health_score = 0.0
        
        # Setup GUI
        self.setup_enhanced_gui()
        self.start_gui_updates()
        
        # Log system start
        self.log("üöÄ Enhanced Pure Candlestick Trading System Started")
        self.log("üîç Scanning for MT5 terminals...")
        self.initialize_persistence()

        # Auto scan
        self.scan_mt5_terminals()
    
    def load_config(self) -> Dict:
        """‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå - ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏î‡∏¥‡∏°"""
        try:
            with open('config.json', 'r', encoding='utf-8') as f:
                config = json.load(f)
                print("‚úÖ Enhanced configuration loaded successfully")
                return config
        except Exception as e:
            print(f"‚ùå Error loading config: {e}")
            # Return enhanced default config
            return {
                "trading": {"symbol": "XAUUSD.v", "timeframe": "M1"},
                "position_management": {
                    "min_efficiency_per_lot": 50.0,
                    "volume_balance_tolerance": 0.3,
                    "partial_close_enabled": True,
                    "margin_optimization": {"enabled": True}
                },
                "lot_sizing": {"base_lot": 0.01},
                "risk_management": {"max_positions": 50}
            }
    
    def setup_enhanced_gui(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á Enhanced GUI Layout - LOT-AWARE VERSION"""
        
        # ==========================================
        # üéØ HEADER SECTION (‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏î‡∏¥‡∏°)
        # ==========================================
        header_frame = tk.Frame(self.root, bg="#2d2d2d", height=60)
        header_frame.pack(fill="x", padx=5, pady=2)
        header_frame.pack_propagate(False)
        
        title_label = tk.Label(
            header_frame, text="üïØÔ∏è Enhanced Pure Candlestick Trading (Lot-Aware)", 
            font=("Arial", 16, "bold"), fg="white", bg="#2d2d2d"
        )
        title_label.pack(side="left", padx=10, pady=15)
        
        self.status_label = tk.Label(
            header_frame, text="üîç Scanning...", 
            font=("Arial", 10), fg="#00ff88", bg="#2d2d2d"
        )
        self.status_label.pack(side="right", padx=10, pady=15)
        
        # ==========================================
        # üîç MT5 CONNECTION SECTION (‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏î‡∏¥‡∏°)
        # ==========================================
        connection_frame = tk.LabelFrame(
            self.root, text="üîç MT5 Terminal & Account Selection", 
            font=("Arial", 10, "bold"), fg="white", bg="#333333"
        )
        connection_frame.pack(fill="x", padx=5, pady=2)
        
        # MT5 Terminals + Controls (‡πÄ‡∏Å‡πá‡∏ö logic ‡πÄ‡∏î‡∏¥‡∏°)
        self._setup_mt5_connection_panel(connection_frame)
        
        # ==========================================
        # üìä ENHANCED DASHBOARD
        # ==========================================
        dashboard_frame = tk.Frame(self.root, bg="#1a1a1a")
        dashboard_frame.pack(fill="both", expand=True, padx=5, pady=2)
        
        # Left Panel - Candlestick + Portfolio Health
        left_panel = tk.LabelFrame(
            dashboard_frame, text="üïØÔ∏è Analysis & Portfolio Health", 
            font=("Arial", 10, "bold"), fg="white", bg="#333333", width=450
        )
        left_panel.pack(side="left", fill="both", expand=False, padx=2, pady=2)
        left_panel.pack_propagate(False)
        
        # Candlestick Info (‡πÄ‡∏î‡∏¥‡∏°)
        self.candlestick_info = scrolledtext.ScrolledText(
            left_panel, height=6, font=("Consolas", 9),
            bg="#2a2a2a", fg="#00ff88", wrap="word"
        )
        self.candlestick_info.pack(fill="x", padx=5, pady=3)
        
        # üÜï Portfolio Health Panel
        health_frame = tk.LabelFrame(
            left_panel, text="üè• Portfolio Health", 
            font=("Arial", 9, "bold"), fg="white", bg="#333333"
        )
        health_frame.pack(fill="x", padx=5, pady=3)
        
        self.health_score_label = tk.Label(
            health_frame, text="Health Score: 0.00", 
            font=("Arial", 11, "bold"), fg="#00ff88", bg="#333333"
        )
        self.health_score_label.pack(pady=2)
        
        # Volume Balance Indicator
        balance_frame = tk.Frame(health_frame, bg="#333333")
        balance_frame.pack(fill="x", padx=5, pady=2)
        
        tk.Label(balance_frame, text="Volume Balance:", 
                fg="white", bg="#333333", font=("Arial", 8)).pack(side="left")
        
        self.volume_balance_label = tk.Label(
            balance_frame, text="BUY: 0.00 | SELL: 0.00", 
            font=("Consolas", 8), fg="#ffaa00", bg="#333333"
        )
        self.volume_balance_label.pack(side="right")
        
        # üÜï Margin Efficiency Indicator
        margin_frame = tk.Frame(health_frame, bg="#333333")
        margin_frame.pack(fill="x", padx=5, pady=2)
        
        tk.Label(margin_frame, text="Margin Efficiency:", 
                fg="white", bg="#333333", font=("Arial", 8)).pack(side="left")
        
        self.margin_efficiency_label = tk.Label(
            margin_frame, text="0.0000", 
            font=("Consolas", 8), fg="#ffaa00", bg="#333333"
        )
        self.margin_efficiency_label.pack(side="right")
        
        # Signal Panel (‡πÄ‡∏î‡∏¥‡∏°)
        self._setup_signal_panel(left_panel)
        
        # Trading Controls (‡πÄ‡∏î‡∏¥‡∏°)
        self._setup_trading_controls(left_panel)
        
        # Right Panel - Enhanced Positions & Performance
        right_panel = tk.Frame(dashboard_frame, bg="#1a1a1a")
        right_panel.pack(side="right", fill="both", expand=True, padx=2, pady=2)
        
        # üÜï Enhanced Positions Panel
        positions_frame = tk.LabelFrame(
            right_panel, text="üí∞ Enhanced Positions (Lot-Aware)", 
            font=("Arial", 10, "bold"), fg="white", bg="#333333"
        )
        positions_frame.pack(fill="both", expand=True, padx=2, pady=2)
        
        # üÜï Enhanced Headers
        headers_frame = tk.Frame(positions_frame, bg="#333333")
        headers_frame.pack(fill="x", padx=5, pady=2)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏° columns ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö lot analysis
        enhanced_headers = ["ID", "Type", "Lots", "P&L", "$/Lot", "Efficiency", "Age", "Priority"]
        for i, header in enumerate(enhanced_headers):
            width = 8 if header in ["ID", "Type", "Age"] else 10
            label = tk.Label(headers_frame, text=header, font=("Arial", 9, "bold"), 
                           fg="white", bg="#333333", width=width)
            label.grid(row=0, column=i, padx=1, sticky="w")
        
        # üÜï Enhanced Positions Treeview
        self.positions_tree = ttk.Treeview(
            positions_frame, columns=enhanced_headers, show="tree", height=12
        )
        self.positions_tree.pack(fill="both", expand=True, padx=5, pady=2)
        
        # Configure enhanced columns
        column_widths = [60, 45, 60, 80, 70, 90, 70, 60]  # ‡∏õ‡∏£‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏û‡∏≠‡∏î‡∏µ
        for i, (header, width) in enumerate(zip(enhanced_headers, column_widths)):
            self.positions_tree.heading(f"#{i+1}", text=header)
            self.positions_tree.column(f"#{i+1}", width=width, anchor="center")
        
        # üÜï Enhanced Position Controls
        self._setup_enhanced_position_controls(positions_frame)
        
        # üÜï Close Recommendations Panel
        recommendations_frame = tk.LabelFrame(
            right_panel, text="üß† Smart Close Recommendations", 
            font=("Arial", 10, "bold"), fg="white", bg="#333333"
        )
        recommendations_frame.pack(fill="x", padx=2, pady=2)
        
        self.recommendations_text = scrolledtext.ScrolledText(
            recommendations_frame, height=4, font=("Consolas", 8),
            bg="#2a2a2a", fg="#ffaa00", wrap="word"
        )
        self.recommendations_text.pack(fill="x", padx=5, pady=3)
        
        # Performance Panel (‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏î‡∏¥‡∏°‡πÅ‡∏ï‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î)
        performance_frame = tk.LabelFrame(
            right_panel, text="üìä Performance & Efficiency Metrics", 
            font=("Arial", 10, "bold"), fg="white", bg="#333333"
        )
        performance_frame.pack(fill="x", padx=2, pady=2)
        
        self.performance_info = scrolledtext.ScrolledText(
            performance_frame, height=5, font=("Consolas", 9),
            bg="#2a2a2a", fg="#00aaff", wrap="word"
        )
        self.performance_info.pack(fill="x", padx=5, pady=3)
        
        # ==========================================
        # üìù LOG PANEL (‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏î‡∏¥‡∏°)
        # ==========================================
        log_frame = tk.LabelFrame(
            self.root, text="üìù System Log", 
            font=("Arial", 10, "bold"), fg="white", bg="#333333"
        )
        log_frame.pack(fill="x", padx=5, pady=2)
        
        self.log_text = scrolledtext.ScrolledText(
            log_frame, height=6, font=("Consolas", 9),
            bg="#1a1a1a", fg="#cccccc", wrap="word"
        )
        self.log_text.pack(fill="both", expand=True, padx=5, pady=3)
        
        # Initialize displays
        self.update_candlestick_display("‚è≥ Waiting for connection...")
        self.update_performance_display("üìä No data available")
        self.update_recommendations_display("üß† No recommendations yet")
    
    def _setup_mt5_connection_panel(self, parent_frame):
        """üîç Setup MT5 Connection Panel - ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏î‡∏¥‡∏°"""
        
        # MT5 Terminals List
        terminals_frame = tk.Frame(parent_frame, bg="#333333")
        terminals_frame.pack(fill="x", padx=5, pady=3)
        
        tk.Label(terminals_frame, text="üìü Available MT5 Terminals:", 
                fg="white", bg="#333333").pack(anchor="w")
        
        self.terminals_listbox = tk.Listbox(
            terminals_frame, height=3, font=("Consolas", 9),
            bg="#404040", fg="white", selectbackground="#0066cc"
        )
        self.terminals_listbox.pack(fill="x", pady=2)
        
        # MT5 Control Buttons
        mt5_buttons_frame = tk.Frame(parent_frame, bg="#333333")
        mt5_buttons_frame.pack(fill="x", padx=5, pady=3)
        
        self.scan_button = tk.Button(
            mt5_buttons_frame, text="üîç Scan MT5", command=self.scan_mt5_terminals,
            bg="#4a90e2", fg="white", font=("Arial", 9)
        )
        self.scan_button.pack(side="left", padx=2)
        
        self.connect_button = tk.Button(
            mt5_buttons_frame, text="üîó Connect", command=self.connect_mt5,
            bg="#50c878", fg="white", font=("Arial", 9)
        )
        self.connect_button.pack(side="left", padx=2)
        
        self.disconnect_button = tk.Button(
            mt5_buttons_frame, text="üîå Disconnect", command=self.disconnect_mt5,
            bg="#ff6b6b", fg="white", font=("Arial", 9), state="disabled"
        )
        self.disconnect_button.pack(side="left", padx=2)
        
        # Account Selection
        accounts_frame = tk.Frame(parent_frame, bg="#333333")
        accounts_frame.pack(fill="x", padx=5, pady=3)
        
        tk.Label(accounts_frame, text="üë§ Trading Accounts:", 
                fg="white", bg="#333333").pack(anchor="w")
        
        self.accounts_listbox = tk.Listbox(
            accounts_frame, height=2, font=("Consolas", 9),
            bg="#404040", fg="white", selectbackground="#0066cc"
        )
        self.accounts_listbox.pack(fill="x", pady=2)
    
    def _setup_signal_panel(self, parent_frame):
        """üéØ Setup Signal Panel - ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏î‡∏¥‡∏°"""
        signal_frame = tk.Frame(parent_frame, bg="#333333")
        signal_frame.pack(fill="x", padx=5, pady=3)
        
        tk.Label(signal_frame, text="üéØ Current Signal:", 
                fg="white", bg="#333333", font=("Arial", 9, "bold")).pack()
        
        self.current_signal = tk.Label(
            signal_frame, text="‚è≥ Waiting...", 
            font=("Arial", 12, "bold"), fg="#ffaa00", bg="#333333"
        )
        self.current_signal.pack(pady=5)
        
        self.signal_strength = tk.Label(
            signal_frame, text="Strength: 0%", 
            font=("Arial", 9), fg="#cccccc", bg="#333333"
        )
        self.signal_strength.pack()
    
    def _setup_trading_controls(self, parent_frame):
        """üéÆ Setup Trading Controls - ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏î‡∏¥‡∏°"""
        controls_frame = tk.Frame(parent_frame, bg="#333333")
        controls_frame.pack(fill="x", padx=5, pady=5)
        
        self.start_button = tk.Button(
            controls_frame, text="üöÄ Start Trading", command=self.start_trading,
            bg="#50c878", fg="white", font=("Arial", 10, "bold"), state="disabled"
        )
        self.start_button.pack(side="left", padx=2, fill="x", expand=True)
        
        self.stop_button = tk.Button(
            controls_frame, text="‚èπÔ∏è Stop Trading", command=self.stop_trading,
            bg="#ff6b6b", fg="white", font=("Arial", 10, "bold"), state="disabled"
        )
        self.stop_button.pack(side="right", padx=2, fill="x", expand=True)
    
    def _setup_enhanced_position_controls(self, parent_frame):
        """üí∞ Setup Enhanced Position Controls"""
        position_controls = tk.Frame(parent_frame, bg="#333333")
        position_controls.pack(fill="x", padx=5, pady=3)
        
        # Row 1: Basic Controls
        basic_controls = tk.Frame(position_controls, bg="#333333")
        basic_controls.pack(fill="x", pady=1)
        
        self.close_selected_button = tk.Button(
            basic_controls, text="‚ùå Close Selected", 
            command=self.close_selected_position,
            bg="#ff9500", fg="white", font=("Arial", 8)
        )
        self.close_selected_button.pack(side="left", padx=2)
        
        self.close_all_button = tk.Button(
            basic_controls, text="üö® Emergency Close All", 
            command=self.emergency_close_all,
            bg="#ff3333", fg="white", font=("Arial", 8)
        )
        self.close_all_button.pack(side="right", padx=2)
        
        # Row 2: Enhanced Controls
        enhanced_controls = tk.Frame(position_controls, bg="#333333")
        enhanced_controls.pack(fill="x", pady=1)
        
        self.optimize_margin_button = tk.Button(
            enhanced_controls, text="üîß Optimize Margin", 
            command=self.execute_margin_optimization,
            bg="#4a90e2", fg="white", font=("Arial", 8)
        )
        self.optimize_margin_button.pack(side="left", padx=1)
        
        self.balance_volume_button = tk.Button(
            enhanced_controls, text="‚öñÔ∏è Balance Volume", 
            command=self.execute_volume_balance,
            bg="#9966cc", fg="white", font=("Arial", 8)
        )
        self.balance_volume_button.pack(side="left", padx=1)
        
        self.smart_recovery_button = tk.Button(
            enhanced_controls, text="üéØ Smart Recovery", 
            command=self.execute_smart_recovery,
            bg="#ff6600", fg="white", font=("Arial", 8)
        )
        self.smart_recovery_button.pack(side="left", padx=1)
        
        self.refresh_analysis_button = tk.Button(
            enhanced_controls, text="üîÑ Refresh Analysis", 
            command=self.refresh_lot_analysis,
            bg="#666666", fg="white", font=("Arial", 8)
        )
        self.refresh_analysis_button.pack(side="right", padx=1)
    
    # ==========================================
    # üîç MT5 CONNECTION METHODS (‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
    # ==========================================
    
    def scan_mt5_terminals(self):
        """‡∏™‡πÅ‡∏Å‡∏ô‡∏´‡∏≤ MT5 terminals - ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏î‡∏¥‡∏°"""
        try:
            self.log("üîç Scanning for MT5 terminals...")
            
            self.terminals_listbox.delete(0, tk.END)
            self.accounts_listbox.delete(0, tk.END)
            
            installations = self.mt5_connector.find_running_mt5_installations()
            
            if not installations:
                self.log("‚ùå No running MT5 terminals found")
                self.terminals_listbox.insert(0, "‚ùå No MT5 terminals running")
                return
            
            self.log(f"‚úÖ Found {len(installations)} MT5 terminal(s)")
            
            for i, inst in enumerate(installations):
                exe_type = "64-bit" if "64" in inst.executable_type else "32-bit"
                display_text = f"{i}: üü¢ {inst.broker} ({exe_type})"
                self.terminals_listbox.insert(tk.END, display_text)
                
        except Exception as e:
            self.log(f"‚ùå MT5 scan error: {e}")
    
    def connect_mt5(self):
        """‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5 - ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏î‡∏¥‡∏°"""
        try:
            selection = self.terminals_listbox.curselection()
            if not selection:
                messagebox.showwarning("Warning", "Please select MT5 terminal first")
                return
            
            terminal_index = selection[0]
            self.log(f"üîó Connecting to MT5 terminal #{terminal_index}...")
            
            if self.mt5_connector.connect_to_installation(terminal_index):
                self.log("‚úÖ MT5 connection successful")
                self.status_label.config(text="üü¢ MT5 Connected", fg="#00ff88")
                
                self.connect_button.config(state="disabled")
                self.disconnect_button.config(state="normal")
                self.start_button.config(state="normal")
                
                self.load_accounts()
                self.initialize_trading_components()
                
            else:
                self.log("‚ùå MT5 connection failed")
                
        except Exception as e:
            self.log(f"‚ùå MT5 connection error: {e}")
    
    def disconnect_mt5(self):
        """‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ MT5 - ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏î‡∏¥‡∏°"""
        try:
            self.log("üîå Disconnecting from MT5...")
            
            if self.is_trading:
                self.stop_trading()
            
            if self.mt5_connector.disconnect():
                self.log("‚úÖ MT5 disconnected successfully")
                self.status_label.config(text="üîç Disconnected", fg="#ffaa00")
                
                self.connect_button.config(state="normal")
                self.disconnect_button.config(state="disabled") 
                self.start_button.config(state="disabled")
                self.stop_button.config(state="disabled")
                
                self.accounts_listbox.delete(0, tk.END)
                self.update_candlestick_display("‚è≥ Waiting for connection...")
                self.update_enhanced_positions_display([])
                self.update_performance_display("üìä No data available")
            
        except Exception as e:
            self.log(f"‚ùå MT5 disconnect error: {e}")
    
    def load_accounts(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ç‡∏ä‡∏µ - ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏î‡∏¥‡∏°"""
        try:
            self.accounts_listbox.delete(0, tk.END)
            
            account_info = self.mt5_connector.get_account_info()
            if account_info:
                account_text = f"üë§ {account_info.get('login', 'Unknown')} - {account_info.get('company', 'Unknown')}"
                self.accounts_listbox.insert(0, account_text)
                self.log(f"‚úÖ Account loaded: {account_info.get('login')}")
            else:
                self.accounts_listbox.insert(0, "‚ùå No account information")
                
        except Exception as e:
            self.log(f"‚ùå Error loading accounts: {e}")
    
    # ==========================================
    # üîß COMPONENT INITIALIZATION (‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏î‡∏¥‡∏° + ‡πÄ‡∏û‡∏¥‡πà‡∏° enhanced)
    # ==========================================
    
    def initialize_persistence(self):
        """üÜï ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Data Persistence - ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏î‡∏¥‡∏°"""
        try:
            self.log("üíæ Initializing Data Persistence Manager...")
            
            self.persistence_manager = create_persistence_manager()
            
            session_info = self.persistence_manager.load_session_info()
            if session_info:
                self.log(f"üìÇ Loaded previous session data")
                
            performance_data = self.persistence_manager.load_performance_data()
            if performance_data:
                self.log(f"üìà Loaded performance history: {performance_data.get('total_signals', 0)} signals")
            
            self.log("‚úÖ Data Persistence Manager ready")
            
        except Exception as e:
            self.log(f"‚ùå Persistence initialization error: {e}")
            self.persistence_manager = None

    def initialize_trading_components(self):
        """‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Enhanced Trading Components"""
        try:
            self.log("üïØÔ∏è Initializing Enhanced Pure Candlestick components...")
            
            if not self.mt5_connector.is_connected:
                self.log("‚ùå MT5 not connected - cannot initialize components")
                return
            
            # Initialize components
            self.candlestick_analyzer = CandlestickAnalyzer(self.mt5_connector, self.config)
            self.signal_generator = SignalGenerator(self.candlestick_analyzer, self.config)
            self.order_executor = OrderExecutor(self.mt5_connector, self.config)
            
            # üÜï Use Enhanced Position Monitor
            self.position_monitor = PositionMonitor(self.mt5_connector, self.config)            
            self.performance_tracker = PerformanceTracker(self.config)
            self.risk_manager = RiskManager(self.mt5_connector, self.config)
            
            # Persistence integration
            if self.persistence_manager:
                self.log("üîó Integrating persistence with components...")
                integrate_with_analyzer(self.candlestick_analyzer, self.persistence_manager)
                integrate_with_generator(self.signal_generator, self.persistence_manager)
                self.log("‚úÖ Persistence integration completed")
            
            self.log("‚úÖ All Enhanced Pure Candlestick components initialized")
            self.log("üÜï Lot-aware analysis enabled")
            
        except Exception as e:
            self.log(f"‚ùå Component initialization error: {e}")
            
    def execute_margin_optimization(self):
        """üîß Optimize Margin"""
        if self.position_monitor:
            self.position_monitor.execute_close_action({'action_type': 'margin_optimization'})
        else:
            messagebox.showwarning("Warning", "Position Monitor not initialized")

    def execute_volume_balance(self):
        """‚öñÔ∏è Balance Volume"""  
        if self.position_monitor:
            self.position_monitor.execute_close_action({'action_type': 'volume_balance'})
        else:
            messagebox.showwarning("Warning", "Position Monitor not initialized")
            
    def execute_smart_recovery(self):
        """üéØ Smart Recovery"""
        if self.position_monitor:
            self.position_monitor.execute_close_action({'action_type': 'lot_aware_recovery'})
        else:
            messagebox.showwarning("Warning", "Position Monitor not initialized")

    def refresh_lot_analysis(self):
        """üîÑ Refresh Analysis"""
        if self.position_monitor:
            self.position_monitor.force_lot_aware_analysis()
            self.log("üîÑ Lot analysis refreshed")
        else:
            messagebox.showwarning("Warning", "Position Monitor not initialized")

    # ==========================================
    # üéÆ ENHANCED TRADING METHODS
    # ==========================================
    
    def start_trading(self):
        """üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏° Enhanced Trading - ‡πÄ‡∏Å‡πá‡∏ö logic ‡πÄ‡∏î‡∏¥‡∏°"""
        try:
            if self.is_trading:
                self.log("‚ö†Ô∏è Trading is already running")
                return
            
            if not self.mt5_connector.is_connected:
                messagebox.showwarning("Warning", "Please connect to MT5 first")
                return
            
            self.log("üöÄ Starting Enhanced Pure Candlestick Trading...")
            self.is_trading = True
            
            self.start_button.config(state="disabled")
            self.stop_button.config(state="normal") 
            self.status_label.config(text="üü¢ Enhanced Trading Active", fg="#00ff88")
            
            self.trading_thread = threading.Thread(target=self.enhanced_trading_loop, daemon=True)
            self.trading_thread.start()
            
            self.log("‚úÖ Enhanced Pure Candlestick Trading started")
            
        except Exception as e:
            self.log(f"‚ùå Start trading error: {e}")
            self.is_trading = False
    
    def enhanced_trading_loop(self):
        """üîÑ Enhanced Trading Loop - ‡πÄ‡∏û‡∏¥‡πà‡∏° lot-aware analysis"""
        self.log("üîÑ Enhanced trading loop started")
        
        while self.is_trading:
            try:
                # 1. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô (‡πÄ‡∏î‡∏¥‡∏°)
                if self.candlestick_analyzer:
                    candlestick_data = self.candlestick_analyzer.get_current_analysis()
                    
                    if not candlestick_data:
                        time.sleep(3)
                        continue
                    
                    self.update_candlestick_display_from_data(candlestick_data)
                    
                    # 2. ‡∏™‡∏£‡πâ‡∏≤‡∏á signal (‡πÄ‡∏î‡∏¥‡∏°)
                    if self.signal_generator:
                        signal_data = self.signal_generator.generate_signal(candlestick_data)
                        
                        if signal_data and signal_data.get('action') != 'WAIT':
                            self.update_signal_display(signal_data)
                            
                            if self.performance_tracker:
                                self.performance_tracker.record_signal(signal_data)
                            
                            # 3. ‡∏™‡πà‡∏á‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå (‡πÄ‡∏î‡∏¥‡∏°)
                            if self.order_executor:
                                execution_result = self.order_executor.execute_signal(signal_data)
                                
                                if execution_result:
                                    self.log(f"Order executed: {signal_data.get('action')} - {execution_result.get('success', False)}")
                                    
                                    if self.performance_tracker:
                                        self.performance_tracker.record_execution(execution_result, signal_data)
                
                # üÜï 4. Enhanced Position Monitoring
                if self.position_monitor:
                    positions = self.position_monitor.get_all_positions()
                    self.update_enhanced_positions_display(positions)
                    
                    # üÜï Enhanced Close Analysis
                    close_actions = self.position_monitor.check_smart_close_opportunities()
                    if close_actions:
                        self.log(f"üß† Found {len(close_actions)} enhanced close opportunities")
                        self.update_recommendations_display_from_data(close_actions)
                        
                        # ‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£ close ‡∏ï‡∏≤‡∏° priority
                        for action in close_actions[:2]:  # ‡∏ó‡∏≥‡πÅ‡∏Ñ‡πà 2 actions ‡∏ï‡πà‡∏≠ cycle
                            if self.position_monitor.execute_close_action(action):
                                self.log(f"‚úÖ Enhanced close executed: {action.get('action_type')}")
                
                # üÜï 5. Enhanced Performance Update
                if self.performance_tracker:
                    performance = self.performance_tracker.get_current_metrics()
                    
                    # ‡πÄ‡∏û‡∏¥‡πà‡∏° lot efficiency data
                    if self.position_monitor:
                        lot_efficiency = self.position_monitor.get_lot_efficiency_report()
                        performance['lot_efficiency'] = lot_efficiency
                    
                    self.update_enhanced_performance_display(performance)
                
                # 6. Risk Management (‡πÄ‡∏î‡∏¥‡∏°)
                if self.risk_manager:
                    risk_status = self.risk_manager.check_risk_levels()
                    if risk_status.get('emergency_stop', False):
                        self.log("üö® EMERGENCY STOP triggered by risk manager!")
                        self.emergency_close_all()
                        break
                
                time.sleep(3)  # ‡∏ó‡∏∏‡∏Å 3 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
                
            except Exception as e:
                self.log(f"‚ùå Enhanced trading loop error: {e}")
                time.sleep(5)
        
        self.log("üîÑ Enhanced trading loop ended")
    
    # ==========================================
    # üìä ENHANCED DISPLAY UPDATE METHODS
    # ==========================================
    
    def update_enhanced_positions_display(self, positions: List[Dict]):
        """üí∞ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Enhanced Positions Table"""
        try:
            # Clear existing items
            for item in self.positions_tree.get_children():
                self.positions_tree.delete(item)
            
            # Add enhanced position data
            for pos in positions:
                values = [
                    pos.get('id', ''),
                    pos.get('type', ''),
                    f"{pos.get('volume', 0):.2f}",
                    f"${pos.get('total_pnl', 0):.2f}",
                    f"${pos.get('profit_per_lot', 0):.0f}",  # üÜï Profit per lot
                    pos.get('efficiency_category', 'unknown'),  # üÜï Efficiency category
                    pos.get('age', ''),
                    f"{pos.get('close_priority', 0):.2f}"  # üÜï Close priority
                ]
                
                # üÜï Enhanced color coding
                tags = []
                efficiency = pos.get('efficiency_category', '')
                profit = pos.get('total_pnl', 0)
                
                if efficiency == 'excellent':
                    tags = ['excellent']
                elif efficiency == 'good':
                    tags = ['good']
                elif efficiency in ['poor', 'terrible']:
                    tags = ['poor']
                elif profit > 0:
                    tags = ['profit']
                elif profit < 0:
                    tags = ['loss']
                
                self.positions_tree.insert('', 'end', values=values, tags=tags)
            
            # üÜï Enhanced color configuration
            self.positions_tree.tag_configure('excellent', foreground='#00ff00', background='#003300')
            self.positions_tree.tag_configure('good', foreground='#00ff88')
            self.positions_tree.tag_configure('profit', foreground='#88ff88')
            self.positions_tree.tag_configure('loss', foreground='#ff6b6b')
            self.positions_tree.tag_configure('poor', foreground='#ff3333', background='#330000')
            
            # üÜï Update portfolio health indicator
            if self.position_monitor:
                portfolio_summary = self.position_monitor.get_enhanced_portfolio_summary()
                health_score = portfolio_summary.get('portfolio_health_score', 0)
                
                self.portfolio_health_score = health_score
                health_color = self._get_health_color(health_score)
                
                self.health_score_label.config(
                    text=f"Health Score: {health_score:.2f}",
                    fg=health_color
                )
                
                # Update volume balance
                buy_volume = portfolio_summary.get('total_buy_volume', 0)
                sell_volume = portfolio_summary.get('total_sell_volume', 0)
                self.volume_balance_label.config(
                    text=f"BUY: {buy_volume:.2f} | SELL: {sell_volume:.2f}"
                )
                
                # Update margin efficiency
                margin_efficiency = portfolio_summary.get('avg_margin_efficiency', 0)
                self.margin_efficiency_label.config(
                    text=f"{margin_efficiency:.4f}"
                )
            
        except Exception as e:
            self.log(f"‚ùå Enhanced positions display error: {e}")
    
    def _get_health_color(self, score: float) -> str:
        """üé® ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏™‡∏µ‡∏ï‡∏≤‡∏° Health Score"""
        if score >= 0.8:
            return "#00ff88"  # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß
        elif score >= 0.6:
            return "#ffaa00"  # ‡∏™‡πâ‡∏°
        elif score >= 0.4:
            return "#ff6600"  # ‡∏™‡πâ‡∏°‡πÅ‡∏î‡∏á
        else:
            return "#ff3333"  # ‡πÅ‡∏î‡∏á
    
    def update_recommendations_display_from_data(self, close_actions: List[Dict]):
        """üß† ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Close Recommendations Display"""
        try:
            if not close_actions:
                self.update_recommendations_display("üß† No close recommendations")
                return
            
            timestamp = datetime.now().strftime("%H:%M:%S")
            
            display_text = f"üß† CLOSE RECOMMENDATIONS [{timestamp}]\n"
            display_text += "=" * 45 + "\n\n"
            
            for i, action in enumerate(close_actions[:5], 1):  # ‡πÅ‡∏™‡∏î‡∏á 5 ‡∏≠‡∏±‡∏ô‡∏î‡∏±‡∏ö‡πÅ‡∏£‡∏Å
                action_type = action.get('action_type', 'unknown')
                priority = action.get('priority', 10)
                reason = action.get('reason', '')
                
                # Icon ‡∏ï‡∏≤‡∏° action type
                if action_type == 'margin_optimization':
                    icon = "üîß"
                elif action_type == 'volume_balance':
                    icon = "‚öñÔ∏è"
                elif action_type == 'lot_aware_recovery':
                    icon = "üéØ"
                elif action_type == 'enhanced_profit_target':
                    icon = "üí∞"
                else:
                    icon = "üìã"
                
                display_text += f"{i}. {icon} {action_type.replace('_', ' ').title()}\n"
                display_text += f"   Priority: {priority} | {reason}\n"
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏≤‡∏° type
                if 'net_profit' in action:
                    display_text += f"   Net Result: ${action.get('net_profit', 0):.2f}\n"
                
                if 'margin_freed' in action:
                    display_text += f"   Margin Freed: ${action.get('margin_freed', 0):.0f}\n"
                    
                if 'volume_match_ratio' in action:
                    display_text += f"   Volume Match: {action.get('volume_match_ratio', 0):.1%}\n"
                
                display_text += "\n"
            
            self.update_recommendations_display(display_text)
            
        except Exception as e:
            self.log(f"‚ùå Recommendations display error: {e}")
    
    def update_enhanced_performance_display(self, data: Dict):
        """üìä ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Enhanced Performance Display"""
        try:
            timestamp = datetime.now().strftime("%H:%M:%S")
            
            display_text = f"üìä ENHANCED PERFORMANCE [{timestamp}]\n"
            display_text += "=" * 40 + "\n\n"
            
            # üÜï Lot Efficiency Section
            lot_efficiency = data.get('lot_efficiency', {})
            if 'efficiency_breakdown' in lot_efficiency:
                display_text += "üî¢ LOT EFFICIENCY BREAKDOWN:\n"
                
                breakdown = lot_efficiency['efficiency_breakdown']
                for category, stats in breakdown.items():
                    if stats:
                        display_text += f"   {category.title()}: {stats['count']} pos "
                        display_text += f"({stats['total_volume']:.2f} lots, "
                        display_text += f"${stats['avg_efficiency']:.0f}/lot)\n"
                display_text += "\n"
            
            # Trading Results (‡πÄ‡∏î‡∏¥‡∏°)
            display_text += "üí∞ TRADING RESULTS:\n"
            display_text += f"   Total Profit: ${data.get('total_profit', 0):.2f}\n"
            display_text += f"   Win Rate: {data.get('win_rate', 0)*100:.1f}%\n"
            display_text += f"   Total Orders: {data.get('total_orders', 0)}\n\n"
            
            # üÜï Portfolio Health
            portfolio_health = self.portfolio_health_score
            display_text += f"üè• PORTFOLIO HEALTH: {portfolio_health:.2f}\n"
            
            if portfolio_health >= 0.8:
                display_text += "   Status: üü¢ Excellent\n"
            elif portfolio_health >= 0.6:
                display_text += "   Status: üü° Good\n"
            elif portfolio_health >= 0.4:
                display_text += "   Status: üü† Fair\n"
            else:
                display_text += "   Status: üî¥ Needs Attention\n"
            
            display_text += "\n"
            
            # Execution Stats (‡πÄ‡∏î‡∏¥‡∏°)
            display_text += "‚ö° EXECUTION STATS:\n"
            display_text += f"   Avg Execution: {data.get('avg_execution_time_ms', 0):.0f}ms\n"
            display_text += f"   Success Rate: {data.get('execution_rate', 0)*100:.1f}%\n"
            
            self.update_performance_display(display_text)
            
        except Exception as e:
            self.log(f"‚ùå Enhanced performance display error: {e}")
    
    # ==========================================
    # üÜï NEW ENHANCED CONTROL METHODS
    # ==========================================
    
    def execute_margin_optimization(self):
        """üîß Execute Margin Optimization"""
        try:
            if not self.position_monitor:
                messagebox.showwarning("Warning", "Position Monitor not initialized")
                return
            
            self.log("üîß Executing margin optimization...")
            
            # ‡∏´‡∏≤ margin optimization opportunities
            opportunities = self.position_monitor.check_smart_close_opportunities()
            margin_ops = [op for op in opportunities if op.get('action_type') == 'margin_optimization']
            
            if not margin_ops:
                messagebox.showinfo("Info", "No margin optimization opportunities found")
                return
            
            # Execute top margin optimization
            success = self.position_monitor.execute_close_action(margin_ops[0])
            
            if success:
                self.log("‚úÖ Margin optimization executed successfully")
                margin_freed = margin_ops[0].get('margin_freed', 0)
                messagebox.showinfo("Success", f"Margin optimization completed!\nMargin freed: ${margin_freed:.0f}")
            else:
                self.log("‚ùå Margin optimization failed")
                messagebox.showerror("Error", "Margin optimization failed")
                
        except Exception as e:
            self.log(f"‚ùå Margin optimization error: {e}")
    
    def execute_volume_balance(self):
        """‚öñÔ∏è Execute Volume Balance"""
        try:
            if not self.position_monitor:
                messagebox.showwarning("Warning", "Position Monitor not initialized")
                return
            
            self.log("‚öñÔ∏è Executing volume balance...")
            
            # ‡∏´‡∏≤ volume balance opportunities
            opportunities = self.position_monitor.check_smart_close_opportunities()
            balance_ops = [op for op in opportunities if op.get('action_type') == 'volume_balance']
            
            if not balance_ops:
                messagebox.showinfo("Info", "Portfolio volume is already balanced")
                return
            
            # Execute top volume balance
            success = self.position_monitor.execute_close_action(balance_ops[0])
            
            if success:
                self.log("‚úÖ Volume balance executed successfully")
                volume_closed = balance_ops[0].get('volume_to_close', 0)
                messagebox.showinfo("Success", f"Volume balance completed!\nVolume balanced: {volume_closed:.2f} lots")
            else:
                self.log("‚ùå Volume balance failed")
                messagebox.showerror("Error", "Volume balance failed")
                
        except Exception as e:
            self.log(f"‚ùå Volume balance error: {e}")
    
    def execute_smart_recovery(self):
        """üéØ Execute Smart Recovery"""
        try:
            if not self.position_monitor:
                messagebox.showwarning("Warning", "Position Monitor not initialized") 
                return
            
            self.log("üéØ Executing smart recovery...")
            
            # ‡∏´‡∏≤ recovery opportunities
            opportunities = self.position_monitor.check_smart_close_opportunities()
            recovery_ops = [op for op in opportunities if op.get('action_type') == 'lot_aware_recovery']
            
            if not recovery_ops:
                messagebox.showinfo("Info", "No smart recovery opportunities found")
                return
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÉ‡∏´‡πâ user ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
            top_recovery = recovery_ops[0]
            net_profit = top_recovery.get('net_profit', 0)
            volume_match = top_recovery.get('volume_match_ratio', 0)
            
            result = messagebox.askyesno(
                "üéØ Smart Recovery",
                f"Execute smart recovery?\n\n"
                f"Net Result: ${net_profit:.2f}\n"
                f"Volume Match: {volume_match:.1%}\n"
                f"Positions to close: {len(top_recovery.get('recovery_positions', [])) + 1}\n\n"
                f"Continue?"
            )
            
            if result:
                success = self.position_monitor.execute_close_action(top_recovery)
                
                if success:
                    self.log("‚úÖ Smart recovery executed successfully")
                    messagebox.showinfo("Success", f"Smart recovery completed!\nNet result: ${net_profit:.2f}")
                else:
                    self.log("‚ùå Smart recovery failed")
                    messagebox.showerror("Error", "Smart recovery failed")
            
        except Exception as e:
            self.log(f"‚ùå Smart recovery error: {e}")
    
    def refresh_lot_analysis(self):
        """üîÑ Refresh Lot Analysis"""
        try:
            if not self.position_monitor:
                messagebox.showwarning("Warning", "Position Monitor not initialized")
                return
            
            self.log("üîÑ Refreshing lot-aware analysis...")
            
            # Force refresh analysis
            analysis_result = self.position_monitor.force_lot_aware_analysis()
            
            if 'error' not in analysis_result:
                self.log("‚úÖ Lot analysis refreshed successfully")
                
                # ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏£‡∏∏‡∏õ‡πÉ‡∏ô message box
                total_positions = analysis_result.get('total_positions', 0)
                opportunities = analysis_result.get('close_opportunities', 0)
                health_score = analysis_result.get('portfolio_health', 0)
                
                messagebox.showinfo(
                    "üîÑ Analysis Refreshed",
                    f"Analysis completed!\n\n"
                    f"Total Positions: {total_positions}\n"
                    f"Close Opportunities: {opportunities}\n" 
                    f"Portfolio Health: {health_score:.2f}\n\n"
                    f"Check recommendations panel for details."
                )
            else:
                self.log("‚ùå Lot analysis refresh failed")
                messagebox.showerror("Error", "Failed to refresh analysis")
                
        except Exception as e:
            self.log(f"‚ùå Refresh analysis error: {e}")
    
    # ==========================================
    # üìä DISPLAY UPDATE METHODS (‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏î‡∏¥‡∏° + ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á)
    # ==========================================
    
    def update_candlestick_display(self, message: str):
        """üïØÔ∏è ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Candlestick Display - ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏î‡∏¥‡∏°"""
        try:
            self.candlestick_info.delete(1.0, tk.END)
            self.candlestick_info.insert(tk.END, message)
            self.candlestick_info.see(tk.END)
        except Exception as e:
            print(f"‚ùå Candlestick display error: {e}")
    
    def update_candlestick_display_from_data(self, data: Dict):
        """üïØÔ∏è ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Candlestick ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á - ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏î‡∏¥‡∏°"""
        try:
            timestamp = datetime.now().strftime("%H:%M:%S")
            
            display_text = f"""üïØÔ∏è CANDLESTICK ANALYSIS [{timestamp}]
{'='*35}

üìä Current Candle:
   Open:  ${data.get('open', 0):.2f}
   High:  ${data.get('high', 0):.2f}  
   Low:   ${data.get('low', 0):.2f}
   Close: ${data.get('close', 0):.2f}
   
üé® Properties:
   Color: {data.get('candle_color', 'unknown')}
   Body: {data.get('body_ratio', 0)*100:.1f}%
   Direction: {data.get('price_direction', 'unknown')}
   
üìà Analysis:
   Pattern: {data.get('pattern_name', 'Standard')}
   Strength: {data.get('signal_strength', 0)*100:.1f}%
"""
            
            self.update_candlestick_display(display_text)
            
        except Exception as e:
            self.log(f"‚ùå Candlestick data display error: {e}")
    
    def update_signal_display(self, signal_data: Dict):
        """üéØ ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Signal Display - ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏î‡∏¥‡∏°"""
        try:
            action = signal_data.get('action', 'WAIT')
            strength = signal_data.get('strength', 0) * 100
            
            if action == 'BUY':
                color = "#00ff88"
                emoji = "üü¢"
            elif action == 'SELL':
                color = "#ff6b6b" 
                emoji = "üî¥"
            else:
                color = "#ffaa00"
                emoji = "‚è≥"
            
            self.current_signal.config(text=f"{emoji} {action}", fg=color)
            self.signal_strength.config(text=f"Strength: {strength:.1f}%")
            
        except Exception as e:
            self.log(f"‚ùå Signal display error: {e}")
    
    def update_performance_display(self, message: str):
        """üìä ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Performance Display - ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏î‡∏¥‡∏°"""
        try:
            self.performance_info.delete(1.0, tk.END)
            self.performance_info.insert(tk.END, message)
            self.performance_info.see(tk.END)
        except Exception as e:
            print(f"‚ùå Performance display error: {e}")
    
    def update_recommendations_display(self, message: str):
        """üß† ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó Recommendations Display"""
        try:
            self.recommendations_text.delete(1.0, tk.END)
            self.recommendations_text.insert(tk.END, message)
            self.recommendations_text.see(tk.END)
        except Exception as e:
            print(f"‚ùå Recommendations display error: {e}")
    
    # ==========================================
    # üéÆ CONTROL METHODS (‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏î‡∏¥‡∏° + ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á)
    # ==========================================
    
    def stop_trading(self):
        """‚èπÔ∏è ‡∏´‡∏¢‡∏∏‡∏î Trading - ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏î‡∏¥‡∏°"""
        try:
            self.log("‚èπÔ∏è Stopping Enhanced Pure Candlestick Trading...")
            self.is_trading = False
            
            self.start_button.config(state="normal")
            self.stop_button.config(state="disabled")
            self.status_label.config(text="üü° Trading Stopped", fg="#ffaa00")
            
            self.log("‚úÖ Enhanced Pure Candlestick Trading stopped")
            
        except Exception as e:
            self.log(f"‚ùå Stop trading error: {e}")
    
    def close_selected_position(self):
        """‚ùå ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å - ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏î‡∏¥‡∏°"""
        try:
            selection = self.positions_tree.selection()
            if not selection:
                messagebox.showwarning("Warning", "Please select position to close")
                return
            
            item = self.positions_tree.item(selection[0])
            position_id = item['values'][0]
            
            # üÜï ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î lot efficiency
            profit_per_lot = item['values'][4]
            efficiency = item['values'][5]
            
            result = messagebox.askyesno(
                "‚ùå Close Position",
                f"Close position #{position_id}?\n\n"
                f"Profit per Lot: {profit_per_lot}\n"
                f"Efficiency: {efficiency}\n\n"
                f"Continue?"
            )
            
            if result:
                self.log(f"‚ùå Closing position #{position_id}...")
                
                if self.position_monitor:
                    success = self.position_monitor.close_position_by_id(int(position_id), "Manual Close")
                    if success:
                        self.log(f"‚úÖ Position #{position_id} closed successfully")
                    else:
                        self.log(f"‚ùå Failed to close position #{position_id}")
            
        except Exception as e:
            self.log(f"‚ùå Close position error: {e}")
    
    def emergency_close_all(self):
        """üö® ‡∏õ‡∏¥‡∏î‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏â‡∏∏‡∏Å‡πÄ‡∏â‡∏¥‡∏ô - ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏î‡∏¥‡∏°"""
        try:
            result = messagebox.askyesno(
                "üö® Emergency Close", 
                "Close ALL positions immediately?\n\nThis action cannot be undone!"
            )
            
            if not result:
                return
                
            self.log("üö® EMERGENCY CLOSE ALL POSITIONS!")
            
            if self.position_monitor:
                closed_count = self.position_monitor.emergency_close_all()
                self.log(f"üö® Emergency closed {closed_count} positions")
            
            if self.is_trading:
                self.stop_trading()
                
        except Exception as e:
            self.log(f"‚ùå Emergency close error: {e}")
    
    # ==========================================
    # üìù UTILITY METHODS (‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏î‡∏¥‡∏°)
    # ==========================================
    
    def log(self, message: str):
        """üìù ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô log - ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏î‡∏¥‡∏°"""
        try:
            timestamp = datetime.now().strftime("%H:%M:%S")
            log_message = f"[{timestamp}] {message}\n"
            
            if hasattr(self, 'log_text') and self.log_text:
                self.log_text.insert(tk.END, log_message)
                self.log_text.see(tk.END)
                
                lines = self.log_text.get(1.0, tk.END).split('\n')
                if len(lines) > 100:
                    self.log_text.delete(1.0, f"{len(lines)-100}.0")
            
            print(log_message.strip())
            
        except Exception as e:
            print(f"[{datetime.now().strftime('%H:%M:%S')}] {message}")
            print(f"Log error: {e}")
    
    def start_gui_updates(self):
        """üîÑ ‡πÄ‡∏£‡∏¥‡πà‡∏° GUI Updates - ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏î‡∏¥‡∏°"""
        def update_loop():
            while True:
                try:
                    time.sleep(1)
                except Exception as e:
                    self.log(f"‚ùå GUI update error: {e}")
        
        update_thread = threading.Thread(target=update_loop, daemon=True)
        update_thread.start()
    
    def on_closing(self):
        """üîí ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏° - Enhanced with lot data saving"""
        try:
            self.log("üîí Shutting down Enhanced Pure Candlestick System...")
            
            # ‡∏´‡∏¢‡∏∏‡∏î trading
            if self.is_trading:
                self.stop_trading()
                time.sleep(1)
            
            # üÜï ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• lot efficiency
            if self.persistence_manager and self.position_monitor:
                self.log("üíæ Saving enhanced session data...")
                
                # ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• session
                session_data = {
                    'last_shutdown': datetime.now().isoformat(),
                    'trading_was_active': self.is_trading,
                    'mt5_connected': self.mt5_connector.is_connected if self.mt5_connector else False,
                    'portfolio_health_score': self.portfolio_health_score,
                    'lot_efficiency_data': self.lot_efficiency_data,
                    'enhanced_features_used': True
                }
                
                self.persistence_manager.save_session_info(session_data)
                
                # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å performance data
                if self.performance_tracker:
                    performance_data = self.performance_tracker.get_current_metrics()
                    
                    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• lot efficiency
                    if self.position_monitor:
                        lot_report = self.position_monitor.get_lot_efficiency_report()
                        performance_data['final_lot_efficiency'] = lot_report
                    
                    self.persistence_manager.save_performance_data(performance_data)
                
                self.log("‚úÖ Enhanced session data saved")
            
            # ‡∏ï‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
            if self.mt5_connector and self.mt5_connector.is_connected:
                self.disconnect_mt5()
            
            self.root.destroy()
            
        except Exception as e:
            print(f"Shutdown error: {e}")
            self.root.destroy()
    
    # ==========================================
    # üÜï ENHANCED MENU & ANALYSIS METHODS
    # ==========================================
    
    def show_lot_efficiency_analysis(self):
        """üìä ‡πÅ‡∏™‡∏î‡∏á Lot Efficiency Analysis ‡πÉ‡∏ô popup window"""
        try:
            if not self.position_monitor:
                messagebox.showwarning("Warning", "Position Monitor not initialized")
                return
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• lot efficiency
            lot_report = self.position_monitor.get_lot_efficiency_report()
            lot_distribution = self.position_monitor.get_lot_distribution_analysis()
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á analysis window
            analysis_window = tk.Toplevel(self.root)
            analysis_window.title("üìä Lot Efficiency Analysis")
            analysis_window.geometry("700x500")
            analysis_window.configure(bg="#2a2a2a")
            
            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
            analysis_text = scrolledtext.ScrolledText(
                analysis_window, font=("Consolas", 10),
                bg="#1a1a1a", fg="#00aaff", wrap="word"
            )
            analysis_text.pack(fill="both", expand=True, padx=10, pady=10)
            
            # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            
            report_text = f"""üìä LOT EFFICIENCY ANALYSIS REPORT
Generated: {timestamp}
{'='*50}

üî¢ EFFICIENCY BREAKDOWN:
"""
            
            if 'efficiency_breakdown' in lot_report:
                for category, data in lot_report['efficiency_breakdown'].items():
                    report_text += f"\n{category.upper()}:\n"
                    report_text += f"   Positions: {data.get('count', 0)}\n"
                    report_text += f"   Volume: {data.get('total_volume', 0):.2f} lots\n"
                    report_text += f"   Avg Efficiency: ${data.get('avg_efficiency', 0):.1f}/lot\n"
                    report_text += f"   Portfolio %: {data.get('volume_percentage', 0):.1f}%\n"
            
            report_text += f"\n\nüìè LOT SIZE DISTRIBUTION:\n"
            
            if 'message' not in lot_distribution:
                for size_range, data in lot_distribution.items():
                    report_text += f"\n{size_range.upper()} LOTS:\n"
                    report_text += f"   Count: {data.get('count', 0)}\n"
                    report_text += f"   Volume: {data.get('total_volume', 0):.2f} lots\n"
                    report_text += f"   Profit: ${data.get('total_profit', 0):.2f}\n"
                    report_text += f"   Avg $/Lot: ${data.get('avg_profit_per_lot', 0):.1f}\n"
            
            report_text += f"\n\nüí° RECOMMENDATIONS:\n"
            
            if 'recommendations' in lot_report:
                for rec in lot_report['recommendations']:
                    report_text += f"   ‚Ä¢ {rec}\n"
            
            analysis_text.insert("end", report_text)
            analysis_text.config(state="disabled")
            
        except Exception as e:
            self.log(f"‚ùå Show lot analysis error: {e}")
    
    def show_margin_optimization_suggestions(self):
        """üîß ‡πÅ‡∏™‡∏î‡∏á Margin Optimization Suggestions"""
        try:
            if not self.position_monitor:
                messagebox.showwarning("Warning", "Position Monitor not initialized")
                return
            
            # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏∞‡πÅ‡∏ô‡∏∞
            suggestions = self.position_monitor.get_margin_optimization_suggestions()
            
            if not suggestions:
                messagebox.showinfo("Info", "No margin optimization suggestions available")
                return
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á suggestions window
            suggestions_window = tk.Toplevel(self.root)
            suggestions_window.title("üîß Margin Optimization Suggestions")
            suggestions_window.geometry("600x400")
            suggestions_window.configure(bg="#2a2a2a")
            
            suggestions_text = scrolledtext.ScrolledText(
                suggestions_window, font=("Consolas", 10),
                bg="#1a1a1a", fg="#ffaa00", wrap="word"
            )
            suggestions_text.pack(fill="both", expand=True, padx=10, pady=10)
            
            # ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏Ç‡πâ‡∏≠‡πÄ‡∏™‡∏ô‡∏≠‡πÅ‡∏ô‡∏∞
            report_text = f"üîß MARGIN OPTIMIZATION SUGGESTIONS\n"
            report_text += f"Generated: {datetime.now().strftime('%H:%M:%S')}\n"
            report_text += "="*40 + "\n\n"
            
            for i, suggestion in enumerate(suggestions, 1):
                urgency = suggestion.get('urgency', 'medium')
                message = suggestion.get('message', '')
                
                # Icon ‡∏ï‡∏≤‡∏° urgency
                if urgency == 'high':
                    icon = "üö®"
                elif urgency == 'medium':
                    icon = "‚ö†Ô∏è"
                else:
                    icon = "üí°"
                
                report_text += f"{i}. {icon} {message}\n"
                
                # ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
                if 'estimated_margin_freed' in suggestion:
                    report_text += f"   Margin to free: ${suggestion['estimated_margin_freed']:.0f}\n"
                if 'affected_positions' in suggestion:
                    report_text += f"   Affected positions: {suggestion['affected_positions']}\n"
                if 'current_imbalance' in suggestion:
                    report_text += f"   Current imbalance: {suggestion['current_imbalance']:.1%}\n"
                
                report_text += "\n"
            
            suggestions_text.insert("end", report_text)
            suggestions_text.config(state="disabled")
            
        except Exception as e:
            self.log(f"‚ùå Show margin suggestions error: {e}")
    
    # ==========================================
    # üîß MENU BAR (‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà)
    # ==========================================
    
    def setup_menu_bar(self):
        """üìã Setup Enhanced Menu Bar"""
        try:
            menubar = tk.Menu(self.root)
            self.root.config(menu=menubar)
            
            # üìä Analysis Menu
            analysis_menu = tk.Menu(menubar, tearoff=0)
            menubar.add_cascade(label="üìä Analysis", menu=analysis_menu)
            
            analysis_menu.add_command(
                label="üìä Lot Efficiency Report", 
                command=self.show_lot_efficiency_analysis
            )
            analysis_menu.add_command(
                label="üîß Margin Optimization", 
                command=self.show_margin_optimization_suggestions
            )
            analysis_menu.add_separator()
            analysis_menu.add_command(
                label="üîÑ Force Refresh Analysis", 
                command=self.refresh_lot_analysis
            )
            
            # üéÆ Actions Menu
            actions_menu = tk.Menu(menubar, tearoff=0)
            menubar.add_cascade(label="üéÆ Actions", menu=actions_menu)
            
            actions_menu.add_command(
                label="üîß Auto Margin Optimization", 
                command=self.execute_margin_optimization
            )
            actions_menu.add_command(
                label="‚öñÔ∏è Auto Volume Balance", 
                command=self.execute_volume_balance
            )
            actions_menu.add_command(
                label="üéØ Auto Smart Recovery", 
                command=self.execute_smart_recovery
            )
            
        except Exception as e:
            self.log(f"‚ùå Menu setup error: {e}")

# ==========================================
# üöÄ APPLICATION ENTRY POINT
# ==========================================

def main():
    """üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Enhanced Pure Candlestick Trading System"""
    
    print("üïØÔ∏è Enhanced Pure Candlestick Trading System (Lot-Aware)")
    print("=" * 60)
    print("üöÄ Starting enhanced application...")
    
    # Create enhanced GUI
    root = tk.Tk()
    app = EnhancedPureCandlestickGUI(root)
    
    # Setup menu bar
    app.setup_menu_bar()
    
    # Handle window close
    root.protocol("WM_DELETE_WINDOW", app.on_closing)
    
    # Start GUI
    try:
        print("‚úÖ Enhanced GUI started successfully")
        root.mainloop()
    except KeyboardInterrupt:
        print("\nüõë Interrupted by user")
        app.on_closing()
    except Exception as e:
        print(f"‚ùå Enhanced GUI error: {e}")

if __name__ == "__main__":
    main()