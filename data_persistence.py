"""
üíæ Data Persistence Manager
data_persistence.py

‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡πâ‡∏≤‡∏° session restart
‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏π‡∏ç‡∏´‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏µ‡∏™‡∏ï‡∏≤‡∏£‡πå‡∏ó‡∏£‡∏∞‡∏ö‡∏ö
"""

import json
import os
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, Set, List, Any, Optional

class DataPersistenceManager:
    """
    üíæ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏≤‡∏ß‡∏£
    
    Features:
    - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å/‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô processed signatures
    - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å/‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô signal history  
    - ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å/‡∏Å‡∏π‡πâ‡∏Ñ‡∏∑‡∏ô performance data
    - ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    """
    
    def __init__(self, data_directory: str = "trading_data"):
        """
        ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Data Persistence Manager
        
        Args:
            data_directory: ‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        """
        self.data_dir = Path(data_directory)
        self.data_dir.mkdir(exist_ok=True)
        
        # ‡πÑ‡∏ü‡∏•‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡πà‡∏≤‡∏á‡πÜ
        self.files = {
            'signatures': self.data_dir / "processed_signatures.json",
            'signals': self.data_dir / "signal_history.json", 
            'performance': self.data_dir / "performance_data.json",
            'session': self.data_dir / "session_info.json"
        }
        
        print(f"üíæ DataPersistenceManager initialized")
        print(f"   Data directory: {self.data_dir}")
        self._cleanup_old_files()

    def _cleanup_old_files(self):
        """üßπ ‡∏•‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô 7 ‡∏ß‡∏±‡∏ô"""
        try:
            cutoff_date = datetime.now() - timedelta(days=7)
            cutoff_timestamp = cutoff_date.timestamp()
            
            for file_path in self.data_dir.glob("*.json"):
                try:
                    if file_path.stat().st_mtime < cutoff_timestamp:
                        backup_name = f"{file_path.stem}_old_{datetime.now().strftime('%Y%m%d')}.json"
                        backup_path = self.data_dir / backup_name
                        file_path.rename(backup_path)
                        print(f"üóÇÔ∏è Moved old file: {file_path.name} -> {backup_name}")
                except Exception as e:
                    print(f"‚ùå Cleanup file {file_path.name} error: {e}")
                    
        except Exception as e:
            print(f"‚ùå Cleanup old files error: {e}")

    # ========================================
    # CANDLESTICK SIGNATURES PERSISTENCE
    # ========================================

    def load_processed_signatures(self) -> Set[str]:
        """
        üíæ ‡πÇ‡∏´‡∏•‡∏î‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß
        
        Returns:
            Set[str]: ‡∏ä‡∏∏‡∏î‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß
        """
        try:
            if not self.files['signatures'].exists():
                print(f"üìÅ No signatures file found, starting fresh")
                return set()
            
            with open(self.files['signatures'], 'r') as f:
                data = json.load(f)
            
            signatures_list = data.get('signatures', [])
            
            # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô 24 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á
            cutoff_time = datetime.now().timestamp() - (24 * 3600)
            valid_signatures = [
                sig for sig in signatures_list
                if self._extract_timestamp_from_signature(sig) > cutoff_time
            ]
            
            removed_count = len(signatures_list) - len(valid_signatures)
            if removed_count > 0:
                print(f"üßπ Removed {removed_count} old signatures (>24h)")
            
            print(f"üíæ Loaded {len(valid_signatures)} processed signatures")
            return set(valid_signatures)
            
        except Exception as e:
            print(f"‚ùå Load signatures error: {e}")
            return set()

    def save_processed_signatures(self, signatures: Set[str]):
        """
        üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏ó‡∏µ‡∏¢‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡πÅ‡∏•‡πâ‡∏ß
        
        Args:
            signatures: ‡∏ä‡∏∏‡∏î‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        """
        try:
            data = {
                'last_updated': datetime.now().isoformat(),
                'total_signatures': len(signatures),
                'signatures': list(signatures)
            }
            
            with open(self.files['signatures'], 'w') as f:
                json.dump(data, f, indent=2)
                
            print(f"üíæ Saved {len(signatures)} processed signatures")
            
        except Exception as e:
            print(f"‚ùå Save signatures error: {e}")

    # ========================================
    # SIGNAL HISTORY PERSISTENCE  
    # ========================================

    def load_signal_history(self) -> Set[str]:
        """
        üíæ ‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ signal ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß
        
        Returns:
            Set[str]: ‡∏ä‡∏∏‡∏î‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á signal ‡πÅ‡∏•‡πâ‡∏ß
        """
        try:
            if not self.files['signals'].exists():
                print(f"üìÅ No signal history found, starting fresh")
                return set()
                
            with open(self.files['signals'], 'r') as f:
                data = json.load(f)
            
            signal_signatures = data.get('signal_signatures', [])
            
            # ‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤‡πÄ‡∏Å‡∏¥‡∏ô 12 ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á (signals ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏Å‡πá‡∏ö‡∏ô‡∏≤‡∏ô)
            cutoff_time = datetime.now().timestamp() - (12 * 3600)
            valid_signals = [
                sig for sig in signal_signatures
                if self._extract_timestamp_from_signature(sig) > cutoff_time
            ]
            
            removed_count = len(signal_signatures) - len(valid_signals)
            if removed_count > 0:
                print(f"üßπ Removed {removed_count} old signal signatures (>12h)")
            
            print(f"üíæ Loaded {len(valid_signals)} signal signatures")
            return set(valid_signals)
            
        except Exception as e:
            print(f"‚ùå Load signal history error: {e}")
            return set()

    def save_signal_history(self, signal_signatures: Set[str]):
        """
        üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥ signal ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß
        
        Args:
            signal_signatures: ‡∏ä‡∏∏‡∏î‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á signal ‡πÅ‡∏•‡πâ‡∏ß
        """
        try:
            data = {
                'last_updated': datetime.now().isoformat(),
                'total_signals': len(signal_signatures),
                'signal_signatures': list(signal_signatures)
            }
            
            with open(self.files['signals'], 'w') as f:
                json.dump(data, f, indent=2)
                
            print(f"üíæ Saved {len(signal_signatures)} signal signatures")
            
        except Exception as e:
            print(f"‚ùå Save signal history error: {e}")

    # ========================================
    # PERFORMANCE DATA PERSISTENCE
    # ========================================

    def load_performance_data(self) -> Dict:
        """
        üíæ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô
        
        Returns:
            Dict: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• performance
        """
        try:
            if not self.files['performance'].exists():
                print(f"üìÅ No performance data found, starting fresh")
                return {}
                
            with open(self.files['performance'], 'r') as f:
                data = json.load(f)
                
            print(f"üíæ Loaded performance data")
            print(f"   Total signals: {data.get('total_signals', 0)}")
            print(f"   Total orders: {data.get('total_orders', 0)}")
            
            return data
            
        except Exception as e:
            print(f"‚ùå Load performance data error: {e}")
            return {}

    def save_performance_data(self, performance_data: Dict):
        """
        üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏á‡∏≤‡∏ô
        
        Args:
            performance_data: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• performance ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
        """
        try:
            # ‡πÄ‡∏û‡∏¥‡πà‡∏° metadata
            data = performance_data.copy()
            data.update({
                'last_updated': datetime.now().isoformat(),
                'session_count': data.get('session_count', 0) + 1
            })
            
            with open(self.files['performance'], 'w') as f:
                json.dump(data, f, indent=2, default=str)
                
            print(f"üíæ Saved performance data")
            
        except Exception as e:
            print(f"‚ùå Save performance data error: {e}")

    # ========================================
    # SESSION INFO PERSISTENCE
    # ========================================

    def save_session_info(self, session_data: Dict):
        """
        üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• session
        
        Args:
            session_data: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• session
        """
        try:
            data = {
                'last_session_end': datetime.now().isoformat(),
                'session_data': session_data,
                'clean_shutdown': True
            }
            
            with open(self.files['session'], 'w') as f:
                json.dump(data, f, indent=2, default=str)
                
        except Exception as e:
            print(f"‚ùå Save session info error: {e}")

    def load_session_info(self) -> Dict:
        """
        üíæ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• session ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
        
        Returns:
            Dict: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• session
        """
        try:
            if not self.files['session'].exists():
                return {}
                
            with open(self.files['session'], 'r') as f:
                data = json.load(f)
                
            last_end = data.get('last_session_end')
            clean_shutdown = data.get('clean_shutdown', False)
            
            if last_end:
                last_time = datetime.fromisoformat(last_end)
                print(f"üíæ Last session: {last_time.strftime('%Y-%m-%d %H:%M:%S')}")
                print(f"   Clean shutdown: {clean_shutdown}")
                
            return data.get('session_data', {})
            
        except Exception as e:
            print(f"‚ùå Load session info error: {e}")
            return {}

    # ========================================
    # UTILITY METHODS
    # ========================================

    def _extract_timestamp_from_signature(self, signature: str) -> float:
        """
        üîß ‡∏î‡∏∂‡∏á timestamp ‡∏à‡∏≤‡∏Å‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô
        
        Args:
            signature: ‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡πá‡∏ô‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö "timestamp_ohlc"
            
        Returns:
            float: timestamp ‡∏´‡∏£‡∏∑‡∏≠ 0 ‡∏ñ‡πâ‡∏≤‡πÅ‡∏õ‡∏•‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
        """
        try:
            return float(signature.split('_')[0])
        except:
            return 0.0

    def get_storage_stats(self) -> Dict:
        """
        üìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏±‡∏î‡πÄ‡∏Å‡πá‡∏ö
        
        Returns:
            Dict: ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        """
        stats = {
            'data_directory': str(self.data_dir),
            'files': {}
        }
        
        for name, file_path in self.files.items():
            if file_path.exists():
                size = file_path.stat().st_size
                modified = datetime.fromtimestamp(file_path.stat().st_mtime)
                stats['files'][name] = {
                    'size_bytes': size,
                    'size_kb': round(size / 1024, 2),
                    'last_modified': modified.isoformat(),
                    'exists': True
                }
            else:
                stats['files'][name] = {'exists': False}
        
        return stats

    def export_all_data(self, export_path: str) -> bool:
        """
        üì§ Export ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
        
        Args:
            export_path: path ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå export
            
        Returns:
            bool: ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        """
        try:
            all_data = {
                'export_time': datetime.now().isoformat(),
                'signatures': list(self.load_processed_signatures()),
                'signals': list(self.load_signal_history()),
                'performance': self.load_performance_data(),
                'session': self.load_session_info()
            }
            
            with open(export_path, 'w') as f:
                json.dump(all_data, f, indent=2, default=str)
                
            print(f"üì§ Exported all data to: {export_path}")
            return True
            
        except Exception as e:
            print(f"‚ùå Export data error: {e}")
            return False

    def clear_all_data(self):
        """
        üóëÔ∏è ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡πÉ‡∏ä‡πâ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÉ‡∏´‡∏°‡πà)
        """
        try:
            for name, file_path in self.files.items():
                if file_path.exists():
                    backup_name = f"{file_path.stem}_backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
                    backup_path = self.data_dir / backup_name
                    file_path.rename(backup_path)
                    print(f"üóëÔ∏è Cleared {name} data (backed up as {backup_name})")
                    
        except Exception as e:
            print(f"‚ùå Clear data error: {e}")

# ========================================
# INTEGRATION HELPERS
# ========================================

def create_persistence_manager() -> DataPersistenceManager:
    """
    üèóÔ∏è ‡∏™‡∏£‡πâ‡∏≤‡∏á DataPersistenceManager instance
    
    Returns:
        DataPersistenceManager: instance ‡∏ó‡∏µ‡πà‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    """
    return DataPersistenceManager()

def integrate_with_analyzer(analyzer, persistence_manager: DataPersistenceManager):
    """
    üîó ‡∏ú‡∏π‡∏Å persistence ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö CandlestickAnalyzer
    
    Args:
        analyzer: CandlestickAnalyzer instance
        persistence_manager: DataPersistenceManager instance
    """
    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
    analyzer.processed_signatures = persistence_manager.load_processed_signatures()
    analyzer.persistence_manager = persistence_manager
    
    # Override method ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    original_mark_processed = analyzer._mark_signature_processed
    
    def enhanced_mark_processed(signature: str):
        original_mark_processed(signature)
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á
        analyzer.persistence_manager.save_processed_signatures(analyzer.processed_signatures)
    
    analyzer._mark_signature_processed = enhanced_mark_processed

def integrate_with_generator(generator, persistence_manager: DataPersistenceManager):
    """
    üîó ‡∏ú‡∏π‡∏Å persistence ‡πÄ‡∏Ç‡πâ‡∏≤‡∏Å‡∏±‡∏ö SignalGenerator
    
    Args:
        generator: SignalGenerator instance  
        persistence_manager: DataPersistenceManager instance
    """
    # ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
    generator.signal_signatures = persistence_manager.load_signal_history()
    generator.persistence_manager = persistence_manager
    
    # Override method ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
    original_mark_signal = generator._mark_signal_sent_for_signature
    
    def enhanced_mark_signal(signature: str):
        original_mark_signal(signature)
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á signal
        generator.persistence_manager.save_signal_history(generator.signal_signatures)
    
    generator._mark_signal_sent_for_signature = enhanced_mark_signal